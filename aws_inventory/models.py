# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.BooleanField()
    username = models.CharField(unique=True, max_length=150)
    first_name = models.CharField(max_length=150)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    date_joined = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    id = models.BigAutoField(primary_key=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class AwsAccessanalyzerAnalyzer(models.Model):
    name = models.TextField(blank=True, null=False, primary_key=True, db_comment='The name of the Analyzer.')
    arn = models.TextField(blank=True, null=True, db_comment='The ARN of the analyzer.')
    status = models.TextField(blank=True, null=True, db_comment='The status of the analyzer.')
    type = models.TextField(blank=True, null=True, db_comment='The type of analyzer, which corresponds to the zone of trust chosen for the analyzer.')
    created_at = models.DateTimeField(blank=True, null=True, db_comment='A timestamp for the time at which the analyzer was created.')
    last_resource_analyzed = models.TextField(blank=True, null=True, db_comment='The resource that was most recently analyzed by the analyzer.')
    last_resource_analyzed_at = models.DateTimeField(blank=True, null=True, db_comment='The time at which the most recently analyzed resource was analyzed.')
    status_reason = models.TextField(blank=True, null=True, db_comment='The statusReason provides more details about the current status of the analyzer.')
    findings = models.JSONField(blank=True, null=True, db_comment='[DEPRECATED] This column has been deprecated and will be removed in a future release, use table aws_accessanalyzer_finding instead. A list of findings retrieved from the analyzer that match the filter criteria specified, if any.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_accessanalyzer_analyzer'
        db_table_comment = 'AWS Access Analyzer'


class AwsAccessanalyzerFinding(models.Model):
    access_analyzer_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the analyzer that generated the finding.')
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The ID of the finding.')
    analyzed_at = models.DateTimeField(blank=True, null=True, db_comment='The time at which the resource-based policy that generated the finding was analyzed.')
    created_at = models.DateTimeField(blank=True, null=True, db_comment='The time at which the finding was created.')
    error = models.TextField(blank=True, null=True, db_comment='The error that resulted in an Error finding.')
    is_public = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the finding reports a resource that has a policy that allows public access.')
    resource = models.TextField(blank=True, null=True, db_comment='The resource that the external principal has access to.')
    resource_owner_account = models.TextField(blank=True, null=True, db_comment='The Amazon Web Services account ID that owns the resource.')
    resource_type = models.TextField(blank=True, null=True, db_comment='The type of the resource that the external principal has access to.')
    status = models.TextField(blank=True, null=True, db_comment='The status of the finding.')
    updated_at = models.DateTimeField(blank=True, null=True, db_comment='The time at which the finding was most recently updated.')
    action = models.JSONField(blank=True, null=True, db_comment='The action in the analyzed policy statement that an external principal has permission to use.')
    sources = models.JSONField(blank=True, null=True, db_comment='The sources of the finding, indicating how the access that generated the finding is granted. It is populated for Amazon S3 bucket findings.')
    principal = models.JSONField(blank=True, null=True, db_comment='The external principal that has access to a resource within the zone of trust.')
    condition = models.JSONField(blank=True, null=True, db_comment='The condition in the analyzed policy statement that resulted in a finding.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_accessanalyzer_finding'
        db_table_comment = 'AWS Access Analyzer Finding'


class AwsAccount(models.Model):
    account_aliases = models.JSONField(blank=True, null=True, db_comment='A list of aliases associated with the account, if applicable.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the account.')
    organization_id = models.TextField(blank=True, null=True, db_comment='The unique identifier (ID) of an organization, if applicable.')
    organization_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of an organization.')
    organization_feature_set = models.TextField(blank=True, null=True, db_comment='Specifies the functionality that currently is available to the organization. If set to "ALL", then all features are enabled and policies can be applied to accounts in the organization. If set to "CONSOLIDATED_BILLING", then only consolidated billing functionality is available.')
    organization_master_account_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the account that is designated as the management account for the organization')
    organization_master_account_email = models.TextField(blank=True, null=True, db_comment='The email address that is associated with the AWS account that is designated as the management account for the organization')
    organization_master_account_id = models.TextField(blank=True, null=True, db_comment='The unique identifier (ID) of the management account of an organization')
    organization_available_policy_types = models.JSONField(blank=True, null=True, db_comment='The Region opt-in status. The possible values are opt-in-not-required, opted-in, and not-opted-in')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_account'
        db_table_comment = 'AWS Account'


class AwsAccountAlternateContact(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name associated with this alternate contact.')
    contact_type = models.TextField(blank=True, null=True, db_comment='The type of alternate contact.')
    email_address = models.TextField(blank=True, null=True, db_comment='The email address associated with this alternate contact.')
    phone_number = models.TextField(blank=True, null=True, db_comment='The phone number associated with this alternate contact.')
    contact_title = models.TextField(blank=True, null=True, db_comment='The title associated with this alternate contact.')
    linked_account_id = models.TextField(blank=True, null=True, db_comment='Account ID to get alternate contact details for.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_account_alternate_contact'
        db_table_comment = 'AWS Account Alternate Contact'


class AwsAccountContact(models.Model):
    full_name = models.TextField(blank=True, null=True, db_comment='The full name of the primary contact address.')
    address_line_1 = models.TextField(blank=True, null=True, db_comment='The first line of the primary contact address')
    address_line_2 = models.TextField(blank=True, null=True, db_comment='The second line of the primary contact address, if any.')
    address_line_3 = models.TextField(blank=True, null=True, db_comment='The third line of the primary contact address, if any.')
    company_name = models.TextField(blank=True, null=True, db_comment='The name of the company associated with the primary contact information, if any.')
    city = models.TextField(blank=True, null=True, db_comment='The city of the primary contact address.')
    country_code = models.TextField(blank=True, null=True, db_comment='The ISO-3166 two-letter country code for the primary contact address.')
    district_or_county = models.TextField(blank=True, null=True, db_comment='The district or county of the primary contact address, if any.')
    phone_number = models.TextField(blank=True, null=True, db_comment='The phone number of the primary contact information. The number will be validated and, in some countries, checked for activation.')
    postal_code = models.TextField(blank=True, null=True, db_comment='The postal code of the primary contact address.')
    state_or_region = models.TextField(blank=True, null=True, db_comment='The state or region of the primary contact address. This field is required in selected countries.')
    website_url = models.TextField(blank=True, null=True, db_comment='The URL of the website associated with the primary contact information, if any.')
    linked_account_id = models.TextField(blank=True, null=True, db_comment='Account ID to get contact details for.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_account_contact'
        db_table_comment = 'AWS Account Contact'


class AwsAcmCertificate(models.Model):
    certificate_arn = models.TextField(blank=True, null=False, primary_key=True, db_comment='Amazon Resource Name (ARN) of the certificate. This is of the form: arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012')
    certificate = models.TextField(blank=True, null=True, db_comment='The ACM-issued certificate corresponding to the ARN specified as input')
    certificate_chain = models.TextField(blank=True, null=True, db_comment='The ACM-issued certificate corresponding to the ARN specified as input')
    domain_name = models.TextField(blank=True, null=True, db_comment='Fully qualified domain name (FQDN), such as www.example.com or example.com, for the certificate')
    certificate_transparency_logging_preference = models.TextField(blank=True, null=True, db_comment='Indicates whether to opt in to or out of certificate transparency logging. Certificates that are not logged typically generate a browser error. Transparency makes it possible for you to detect SSL/TLS certificates that have been mistakenly or maliciously issued for your domain.')
    created_at = models.DateTimeField(blank=True, null=True, db_comment='The time at which the certificate was requested. This value exists only when the certificate type is AMAZON_ISSUED')
    subject = models.TextField(blank=True, null=True, db_comment='The name of the entity that is associated with the public key contained in the certificate')
    imported_at = models.DateTimeField(blank=True, null=True, db_comment='The name of the certificate authority that issued and signed the certificate')
    issuer = models.TextField(blank=True, null=True, db_comment='The name of the certificate authority that issued and signed the certificate')
    signature_algorithm = models.TextField(blank=True, null=True, db_comment='The algorithm that was used to sign the certificate')
    extended_key_usages = models.JSONField(blank=True, null=True, db_comment='Specify one or more ExtendedKeyUsage extension values.')
    failure_reason = models.TextField(blank=True, null=True, db_comment='The reason the certificate request failed. This value exists only when the certificate status is FAILED')
    issued_at = models.DateTimeField(blank=True, null=True, db_comment='A list of ARNs for the AWS resources that are using the certificate. A certificate can be used by multiple AWS resources')
    status = models.TextField(blank=True, null=True, db_comment='The status of the certificate')
    key_algorithm = models.TextField(blank=True, null=True, db_comment='The algorithm that was used to generate the public-private key pair')
    not_after = models.DateTimeField(blank=True, null=True, db_comment='The time after which the certificate is not valid')
    not_before = models.DateTimeField(blank=True, null=True, db_comment='The time before which the certificate is not valid')
    renewal_eligibility = models.TextField(blank=True, null=True, db_comment='Specifies whether the certificate is eligible for renewal.')
    revocation_reason = models.TextField(blank=True, null=True, db_comment='The reason the certificate was revoked. This value exists only when the certificate status is REVOKED')
    revoked_at = models.DateTimeField(blank=True, null=True, db_comment='The time at which the certificate was revoked. This value exists only when the certificate status is REVOKED')
    serial = models.TextField(blank=True, null=True, db_comment='The serial number of the certificate')
    type = models.TextField(blank=True, null=True, db_comment='The source of the certificate. For certificates provided by ACM, this value is AMAZON_ISSUED.')
    domain_validation_options = models.JSONField(blank=True, null=True, db_comment='Contains information about the initial validation of each domain name that occurs as a result of the RequestCertificate request. This field exists only when the certificate type is AMAZON_ISSUED')
    in_use_by = models.JSONField(blank=True, null=True, db_comment='A list of ARNs for the AWS resources that are using the certificate')
    subject_alternative_names = models.JSONField(blank=True, null=True, db_comment='One or more domain names (subject alternative names) included in the certificate. This list contains the domain names that are bound to the public key that is contained in the certificate. The subject alternative names include the canonical domain name (CN) of the certificate and additional domain names that can be used to connect to the website')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags associated with certificate')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_acm_certificate'
        db_table_comment = 'AWS ACM Certificate'


class AwsAcmpcaCertificateAuthority(models.Model):
    arn = models.TextField(blank=True, null=False, primary_key=True, db_comment='Amazon Resource Name (ARN) for your private certificate authority (CA). The format is 12345678-1234-1234-1234-123456789012.')
    created_at = models.DateTimeField(blank=True, null=True, db_comment='Date and time at which your private CA was created.')
    failure_reason = models.TextField(blank=True, null=True, db_comment='Reason the request to create your private CA failed.')
    key_storage_security_standard = models.TextField(blank=True, null=True, db_comment="Defines a cryptographic key management compliance standard used for handling CA keys. Default: FIPS_140_2_LEVEL_3_OR_HIGHER Note: Amazon Web Services Region ap-northeast-3 supports only FIPS_140_2_LEVEL_2_OR_HIGHER. You must explicitly specify this parameter and value when creating a CA in that Region. Specifying a different value (or no value) results in an InvalidArgsException with the message 'A certificate authority cannot be created in this region with the specified security standard.'")
    last_state_change_at = models.DateTimeField(blank=True, null=True, db_comment='Date and time at which your private CA was last updated.')
    not_after = models.DateTimeField(blank=True, null=True, db_comment='Date and time after which your private CA certificate is not valid.')
    not_before = models.DateTimeField(blank=True, null=True, db_comment='Date and time before which your private CA certificate is not valid.')
    owner_account = models.TextField(blank=True, null=True, db_comment='The Amazon Web Services account ID that owns the certificate authority.')
    restorable_until = models.DateTimeField(blank=True, null=True, db_comment='The period during which a deleted CA can be restored. For more information, see the PermanentDeletionTimeInDays parameter of the DeleteCertificateAuthorityRequest action.')
    serial = models.TextField(blank=True, null=True, db_comment='Serial number of your private CA.')
    status = models.TextField(blank=True, null=True, db_comment='Status of your private CA.')
    type = models.TextField(blank=True, null=True, db_comment='Type of your private CA.')
    usage_mode = models.TextField(blank=True, null=True, db_comment='Specifies whether the CA issues general-purpose certificates that typically require a revocation mechanism, or short-lived certificates that may optionally omit revocation because they expire quickly. Short-lived certificate validity is limited to seven days. The default value is GENERAL_PURPOSE.')
    certificate_authority_configuration = models.JSONField(blank=True, null=True, db_comment='Your private CA configuration.')
    revocation_configuration = models.JSONField(blank=True, null=True, db_comment='Information about the Online Certificate Status Protocol (OCSP) configuration or certificate revocation list (CRL) created and maintained by your private CA.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags associated with private certificate authority (CA).')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_acmpca_certificate_authority'
        db_table_comment = 'AWS ACM Private Certificate Authority'


class AwsAmplifyApp(models.Model):
    app_id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The unique ID of the Amplify app.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the Amplify app.')
    name = models.TextField(blank=True, null=True, db_comment='The name for the Amplify app.')
    description = models.TextField(blank=True, null=True, db_comment='The description for the Amplify app.')
    create_time = models.DateTimeField(blank=True, null=True, db_comment='Creates a date and time for the Amplify app.')
    update_time = models.DateTimeField(blank=True, null=True, db_comment='Updates the date and time for the Amplify app.')
    basic_auth_credentials = models.TextField(blank=True, null=True, db_comment='The basic authorization credentials for branches for the Amplify app. You must base64-encode the authorization credentials and provide them in the format user:password.')
    custom_headers = models.TextField(blank=True, null=True, db_comment='Describes the custom HTTP headers for the Amplify app.')
    default_domain = models.TextField(blank=True, null=True, db_comment='The default domain for the Amplify app.')
    enable_auto_branch_creation = models.BooleanField(blank=True, null=True, db_comment='Enables automated branch creation for the Amplify app.')
    enable_basic_auth = models.BooleanField(blank=True, null=True, db_comment="Enables basic authorization for the Amplify app's branches.")
    enable_branch_auto_build = models.BooleanField(blank=True, null=True, db_comment='Enables the auto-building of branches for the Amplify app.')
    enable_branch_auto_deletion = models.BooleanField(blank=True, null=True, db_comment='Automatically disconnect a branch in the Amplify Console when you delete a branch from your Git repository.')
    iam_service_role_arn = models.TextField(blank=True, null=True, db_comment='The AWS Identity and Access Management (IAM) service role for the Amazon Resource Name (ARN) of the Amplify app.')
    platform = models.TextField(blank=True, null=True, db_comment='The platform for the Amplify app.')
    repository = models.TextField(blank=True, null=True, db_comment='The Git repository for the Amplify app.')
    repository_clone_method = models.TextField(blank=True, null=True, db_comment='The Amplify service uses this parameter to specify the authentication protocol to use to access the Git repository for an Amplify app. Amplify specifies TOKEN for a GitHub repository, SIGV4 for an AWS CodeCommit repository, and SSH for GitLab and Bitbucket repositories.')
    auto_branch_creation_config = models.JSONField(blank=True, null=True, db_comment='Describes the automated branch creation configuration for the Amplify app.')
    auto_branch_creation_patterns = models.JSONField(blank=True, null=True, db_comment='Describes the automated branch creation glob patterns for the Amplify app.')
    build_spec = models.JSONField(blank=True, null=True, db_comment='Describes the content of the build specification (build spec) for the Amplify app.')
    custom_rules = models.JSONField(blank=True, null=True, db_comment='Describes the custom redirect and rewrite rules for the Amplify app.')
    environment_variables = models.JSONField(blank=True, null=True, db_comment='The environment variables for the Amplify app.')
    production_branch = models.JSONField(blank=True, null=True, db_comment='Describes the information about a production branch of the Amplify app.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_amplify_app'
        db_table_comment = 'AWS Amplify App'


class AwsApiGatewayApiKey(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the API Key')
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The identifier of the API Key')
    enabled = models.BooleanField(blank=True, null=True, db_comment='Specifies whether the API Key can be used by callers')
    created_date = models.DateTimeField(blank=True, null=True, db_comment='The timestamp when the API Key was created')
    last_updated_date = models.DateTimeField(blank=True, null=True, db_comment='The timestamp when the API Key was last updated')
    customer_id = models.TextField(blank=True, null=True, db_comment='An AWS Marketplace customer identifier , when integrating with the AWS SaaS Marketplace')
    description = models.TextField(blank=True, null=True, db_comment='The description of the API Key')
    value = models.TextField(blank=True, null=True, db_comment='The value of the API Key')
    stage_keys = models.JSONField(blank=True, null=True, db_comment='A list of Stage resources that are associated with the ApiKey resource')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags attached to API key')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_api_gateway_api_key'
        db_table_comment = 'AWS API Gateway API Key'


class AwsApiGatewayAuthorizer(models.Model):
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The identifier for the authorizer resource')
    name = models.TextField(blank=True, null=True, db_comment='The name of the authorizer')
    rest_api_id = models.TextField(blank=True, null=True, db_comment='The id of the rest api')
    auth_type = models.TextField(blank=True, null=True, db_comment='Optional customer-defined field, used in OpenAPI imports and exports without functional impact')
    authorizer_credentials = models.TextField(blank=True, null=True, db_comment='Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer')
    authorizer_uri = models.TextField(blank=True, null=True, db_comment="Specifies the authorizer's Uniform Resource Identifier (URI). For TOKEN or REQUEST authorizers, this must be a well-formed Lambda function URI")
    identity_validation_expression = models.TextField(blank=True, null=True, db_comment='A validation expression for the incoming identity token. For TOKEN authorizers, this value is a regular expression')
    identity_source = models.TextField(blank=True, null=True, db_comment='The identity source for which authorization is requested')
    provider_arns = models.JSONField(blank=True, null=True, db_comment='A list of the Amazon Cognito user pool ARNs for the COGNITO_USER_POOLS authorizer')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_api_gateway_authorizer'
        db_table_comment = 'AWS API Gateway Authorizer'


class AwsApiGatewayDomainName(models.Model):
    domain_name = models.TextField(blank=True, null=False, primary_key=True, db_comment='The custom domain name as an API host name.')
    certificate_arn = models.TextField(blank=True, null=True, db_comment='The reference to an AWS-managed certificate that will be used by edge-optimized endpoint for this domain name.')
    certificate_name = models.TextField(blank=True, null=True, db_comment='The name of the certificate that will be used by edge-optimized endpoint for this domain name.')
    certificate_upload_date = models.DateTimeField(blank=True, null=True, db_comment='The timestamp when the certificate that was used by edge-optimized endpoint for this domain name was uploaded.')
    distribution_domain_name = models.TextField(blank=True, null=True, db_comment='The domain name of the Amazon CloudFront distribution associated with this custom domain name for an edge-optimized endpoint.')
    distribution_hosted_zone_id = models.TextField(blank=True, null=True, db_comment='The region-agnostic Amazon Route 53 Hosted Zone ID of the edge-optimized endpoint. The valid value is Z2FDTNDATAQYW2 for all the regions.')
    domain_name_status = models.TextField(blank=True, null=True, db_comment='The status of the DomainName migration. The valid values are AVAILABLE and UPDATING. If the status is UPDATING, the domain cannot be modified further until the existing operation is complete.')
    domain_name_status_message = models.TextField(blank=True, null=True, db_comment='An optional text message containing detailed information about status of the DomainName migration.')
    ownership_verification_certificate_arn = models.TextField(blank=True, null=True, db_comment='The ARN of the public certificate issued by ACM to validate ownership of your custom domain. Only required when configuring mutual TLS and using an ACM imported or private CA certificate ARN as the regionalCertificateArn.')
    regional_certificate_arn = models.TextField(blank=True, null=True, db_comment='The reference to an AWS-managed certificate that will be used for validating the regional domain name. AWS Certificate Manager is the only supported source.')
    regional_certificate_name = models.TextField(blank=True, null=True, db_comment='The name of the certificate that will be used for validating the regional domain name.')
    regional_domain_name = models.TextField(blank=True, null=True, db_comment='The domain name associated with the regional endpoint for this custom domain name. You set up this association by adding a DNS record that points the custom domain name to this regional domain name. The regional domain name is returned by API Gateway when you create a regional endpoint.')
    regional_hosted_zone_id = models.TextField(blank=True, null=True, db_comment='The region-specific Amazon Route 53 Hosted Zone ID of the regional endpoint. For more information, see Set up a Regional Custom Domain Name and AWS Regions and Endpoints for API Gateway.')
    security_policy = models.TextField(blank=True, null=True, db_comment='The Transport Layer Security (TLS) version + cipher suite for this DomainName. The valid values are TLS_1_0 and TLS_1_2.')
    endpoint_configuration = models.JSONField(blank=True, null=True, db_comment='The endpoint configuration of this DomainName showing the endpoint types of the domain name.')
    mutual_tls_authentication = models.JSONField(blank=True, null=True, db_comment='The mutual TLS authentication configuration for a custom domain name. If specified, API Gateway performs two-way authentication between the client and the server. Clients must present a trusted certificate to access your API.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_api_gateway_domain_name'
        db_table_comment = 'AWS API Gateway Domain Name'


class AwsApiGatewayMethod(models.Model):
    rest_api_id = models.TextField(blank=True, null=True, db_comment='The string identifier of the associated RestApi.')
    resource_id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The Resource identifier for the Method resource.')
    http_method = models.TextField(blank=True, null=True, db_comment="The method's HTTP verb.")
    path = models.TextField(blank=True, null=True, db_comment='The full path for this resource.')
    path_part = models.TextField(blank=True, null=True, db_comment='The last path segment for this resource.')
    api_key_required = models.BooleanField(blank=True, null=True, db_comment='A boolean flag specifying whether a valid ApiKey is required to invoke this method.')
    authorization_type = models.TextField(blank=True, null=True, db_comment="The method's authorization type. Valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, CUSTOM for using a custom authorizer, or COGNITO_USER_POOLS for using a Cognito user pool.")
    authorizer_id = models.TextField(blank=True, null=True, db_comment='The identifier of an Authorizer to use on this method. The authorizationType must be CUSTOM.')
    operation_name = models.TextField(blank=True, null=True, db_comment='A human-friendly operation identifier for the method. For example, you can assign the operationName of ListPets for the GET /pets method in the PetStore example.')
    request_validator_id = models.TextField(blank=True, null=True, db_comment='The identifier of a RequestValidator for request validation.')
    authorization_scopes = models.JSONField(blank=True, null=True, db_comment='A list of authorization scopes configured on the method. The scopes are used with a COGNITO_USER_POOLS authorizer to authorize the method invocation.')
    method_integration = models.JSONField(blank=True, null=True, db_comment="Gets the method's integration responsible for passing the client-submitted request to the back end and performing necessary transformations.")
    method_responses = models.JSONField(blank=True, null=True, db_comment='Gets a method response associated with a given HTTP status code.')
    request_models = models.JSONField(blank=True, null=True, db_comment='A key-value map specifying data schemas, represented by Model resources, of the request payloads of given content types.')
    request_parameters = models.JSONField(blank=True, null=True, db_comment='A key-value map defining required or optional method request parameters that can be accepted by API Gateway.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_api_gateway_method'
        db_table_comment = 'AWS API Gateway Method'


class AwsApiGatewayRestApi(models.Model):
    name = models.TextField(blank=True, null=True, db_comment="The API's name")
    api_id = models.TextField(blank=True, null=False, primary_key=True, db_comment="The API's identifier. This identifier is unique across all of APIs in API Gateway")
    version = models.TextField(blank=True, null=True, db_comment='A version identifier for the API')
    api_key_source = models.TextField(blank=True, null=True, db_comment='The source of the API key for metering requests according to a usage plan')
    created_date = models.DateTimeField(blank=True, null=True, db_comment='The timestamp when the API was created')
    description = models.TextField(blank=True, null=True, db_comment="The API's description")
    minimum_compression_size = models.BigIntegerField(blank=True, null=True, db_comment='A nullable integer that is used to enable compression (with non-negative between 0 and 10485760 (10M) bytes, inclusive) or disable compression (with a null value) on an API. When compression is enabled, compression or decompression is not applied on the payload if the payload size is smaller than this value')
    policy = models.JSONField(blank=True, null=True, db_comment='A stringified JSON policy document that applies to this RestApi regardless of the caller and Method configuration')
    policy_std = models.JSONField(blank=True, null=True, db_comment='Contains the policy in a canonical form for easier searching.')
    binary_media_types = models.JSONField(blank=True, null=True, db_comment='The list of binary media types supported by the RestApi. By default, the RestApi supports only UTF-8-encoded text payloads')
    endpoint_configuration_types = models.JSONField(blank=True, null=True, db_comment='The endpoint configuration of this RestApi showing the endpoint types of the API')
    endpoint_configuration_vpc_endpoint_ids = models.JSONField(blank=True, null=True, db_comment='The endpoint configuration of this RestApi showing the endpoint types of the API')
    warnings = models.JSONField(blank=True, null=True, db_comment='The warning messages reported when failonwarnings is turned on during API import')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_api_gateway_rest_api'
        db_table_comment = 'AWS API Gateway Rest API '


class AwsApiGatewayStage(models.Model):
    name = models.TextField(blank=True, null=False, primary_key=True, db_comment='The name of the stage.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the  stage.')
    rest_api_id = models.TextField(blank=True, null=True, db_comment='The id of the rest api which contains this stage.')
    deployment_id = models.TextField(blank=True, null=True, db_comment='The identifier of the Deployment that the stage points to.')
    created_date = models.DateTimeField(blank=True, null=True, db_comment='The timestamp when the stage was created.')
    cache_cluster_enabled = models.BooleanField(blank=True, null=True, db_comment='Specifies whether a cache cluster is enabled for the stage.')
    tracing_enabled = models.BooleanField(blank=True, null=True, db_comment='Specifies whether active tracing with X-ray is enabled for the Stage.')
    access_log_settings = models.JSONField(blank=True, null=True, db_comment='Settings for logging access in this stage.')
    cache_cluster_size = models.TextField(blank=True, null=True, db_comment='The size of the cache cluster for the stage, if enabled.')
    cache_cluster_status = models.TextField(blank=True, null=True, db_comment='The status of the cache cluster for the stage, if enabled.')
    client_certificate_id = models.TextField(blank=True, null=True, db_comment='The identifier of a client certificate for an API stage.')
    description = models.TextField(blank=True, null=True, db_comment="The stage's description.")
    documentation_version = models.TextField(blank=True, null=True, db_comment='The version of the associated API documentation.')
    last_updated_date = models.DateTimeField(blank=True, null=True, db_comment='The timestamp when the stage last updated.')
    canary_settings = models.JSONField(blank=True, null=True, db_comment='A map of settings for the canary deployment in this stage.')
    method_settings = models.JSONField(blank=True, null=True, db_comment='A map that defines the method settings for a Stage resource.')
    variables = models.JSONField(blank=True, null=True, db_comment='A map that defines the stage variables for a Stage resource.')
    web_acl_arn = models.TextField(blank=True, null=True, db_comment='The ARN of the WebAcl associated with the Stage.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_api_gateway_stage'
        db_table_comment = 'AWS API Gateway Stage'


class AwsApiGatewayUsagePlan(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of a usage plan')
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The identifier of a UsagePlan resource')
    product_code = models.TextField(blank=True, null=True, db_comment='The AWS Markeplace product identifier to associate with the usage plan as a SaaS product on AWS Marketplace')
    description = models.TextField(blank=True, null=True, db_comment='The description of a usage plan')
    quota = models.JSONField(blank=True, null=True, db_comment='The maximum number of permitted requests per a given unit time interval')
    throttle = models.JSONField(blank=True, null=True, db_comment='The request throttle limits of a usage plan')
    api_stages = models.JSONField(blank=True, null=True, db_comment='The associated API stages of a usage plan')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_api_gateway_usage_plan'
        db_table_comment = 'AWS API Gateway Usage Plan'


class AwsApiGatewayv2Api(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the API')
    api_id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The API ID')
    api_endpoint = models.TextField(blank=True, null=True, db_comment='The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com')
    description = models.TextField(blank=True, null=True, db_comment='The description of the API.')
    protocol_type = models.TextField(blank=True, null=True, db_comment='The API protocol')
    api_key_selection_expression = models.TextField(blank=True, null=True, db_comment='An API key selection expression. Supported only for WebSocket APIs')
    disable_execute_api_endpoint = models.BooleanField(blank=True, null=True, db_comment='Specifies whether clients can invoke your API by using the default execute-api endpoint.')
    route_selection_expression = models.TextField(blank=True, null=True, db_comment='The route selection expression for the API. For HTTP APIs, the routeSelectionExpression must be ${request.method} ${request.path}. If not provided, this will be the default for HTTP APIs')
    created_date = models.DateTimeField(blank=True, null=True, db_comment='The timestamp when the API was created')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_api_gatewayv2_api'
        db_table_comment = 'AWS API Gateway Version 2 API'


class AwsApiGatewayv2DomainName(models.Model):
    domain_name = models.TextField(blank=True, null=True, db_comment='The name of the DomainName resource')
    api_mapping_selection_expression = models.TextField(blank=True, null=True, db_comment='The API mapping selection expression.')
    domain_name_configurations = models.JSONField(blank=True, null=True, db_comment='The domain name configurations')
    mutual_tls_authentication = models.JSONField(blank=True, null=True, db_comment='The mutual TLS authentication configuration for a custom domain name')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_api_gatewayv2_domain_name'
        db_table_comment = 'AWS API Gateway Version 2 Domain Name'


class AwsApiGatewayv2Integration(models.Model):
    integration_id = models.TextField(blank=True, null=True, db_comment='Represents the identifier of an integration.')
    api_id = models.TextField(blank=True, null=True, db_comment='Represents the identifier of an API.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the integration.')
    description = models.TextField(blank=True, null=True, db_comment='Represents the description of an integration.')
    integration_method = models.TextField(blank=True, null=True, db_comment="Specifies the integration's HTTP method type.")
    integration_type = models.TextField(blank=True, null=True, db_comment='Represents an API method integration type.')
    integration_uri = models.TextField(blank=True, null=True, db_comment='A string representation of a URI with a length between [1-2048]. For a Lambda integration, specify the URI of a Lambda function. For an HTTP integration, specify a fully-qualified URL.')
    api_gateway_managed = models.BooleanField(blank=True, null=True, db_comment="Specifies whether an integration is managed by API Gateway. If you created an API using using quick create, the resulting integration is managed by API Gateway. You can update a managed integration, but you can't delete it.")
    connection_id = models.TextField(blank=True, null=True, db_comment='The ID of the VPC link for a private integration. Supported only for HTTP APIs.')
    connection_type = models.TextField(blank=True, null=True, db_comment='Represents a connection type.')
    content_handling_strategy = models.TextField(blank=True, null=True, db_comment='Specifies how to handle response payload content type conversions. Supported only for WebSocket APIs.')
    credentials_arn = models.TextField(blank=True, null=True, db_comment="Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN).")
    integration_response_selection_expression = models.TextField(blank=True, null=True, db_comment='An expression used to extract information at runtime. See Selection Expressions(https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions for more information.')
    integration_subtype = models.TextField(blank=True, null=True, db_comment='A string with a length between [1-128].')
    passthrough_behavior = models.TextField(blank=True, null=True, db_comment='Represents passthrough behavior for an integration response. Supported only for WebSocket APIs.')
    payload_format_version = models.TextField(blank=True, null=True, db_comment='Specifies the format of the payload sent to an integration. Required for HTTP APIs.')
    template_selection_expression = models.TextField(blank=True, null=True, db_comment='The template selection expression for the integration. Supported only for WebSocket APIs.')
    timeout_in_millis = models.BigIntegerField(blank=True, null=True, db_comment='Indicates custom timeout between 50 and 29,000 milliseconds for WebSocket APIs and between 50 and 30,000 milliseconds for HTTP APIs. The default timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs.')
    request_parameters = models.JSONField(blank=True, null=True, db_comment='For HTTP API itegrations, without a specified integrationSubtype request parameters are a key-value map specifying how to transform HTTP requests before sending them to backend integrations. The key should follow the pattern <action>:<header|querystring|path>.<location>. The action can be append, overwrite or remove. For values, you can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see Transforming API requests and responses (https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html).')
    request_templates = models.JSONField(blank=True, null=True, db_comment='Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value. Supported only for WebSocket APIs.')
    response_parameters = models.JSONField(blank=True, null=True, db_comment='API requests and responses (https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html).')
    tls_config = models.JSONField(blank=True, null=True, db_comment='The TLS configuration for a private integration. If you specify a TLS configuration, private integration traffic uses the HTTPS protocol. Supported only for HTTP APIs.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_api_gatewayv2_integration'
        db_table_comment = 'AWS API Gateway Version 2 Integration'


class AwsApiGatewayv2Route(models.Model):
    route_key = models.TextField(blank=True, null=True, db_comment='The route key for the route.')
    api_id = models.TextField(blank=True, null=True, db_comment='Represents the identifier of an API.')
    route_id = models.TextField(blank=True, null=True, db_comment='The route ID.')
    api_gateway_managed = models.BooleanField(blank=True, null=True, db_comment='Specifies whether a route is managed by API Gateway.')
    api_key_required = models.BooleanField(blank=True, null=True, db_comment='Specifies whether an API key is required for this route. Supported only for WebSocket APIs.')
    authorization_type = models.TextField(blank=True, null=True, db_comment='The authorization type for the route. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.')
    authorizer_id = models.TextField(blank=True, null=True, db_comment='The identifier of the Authorizer resource to be associated with this route. The authorizer identifier is generated by API Gateway when you created the authorizer.')
    model_selection_expression = models.TextField(blank=True, null=True, db_comment='The model selection expression for the route. Supported only for WebSocket APIs.')
    operation_name = models.TextField(blank=True, null=True, db_comment='The operation name for the route.')
    route_response_selection_expression = models.TextField(blank=True, null=True, db_comment='The route response selection expression for the route. Supported only for WebSocket APIs.')
    target = models.TextField(blank=True, null=True, db_comment='The target for the route.')
    authorization_scopes = models.JSONField(blank=True, null=True, db_comment='A list of authorization scopes configured on a route. The scopes are used with a JWT authorizer to authorize the method invocation. The authorization works by matching the route scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any route scope matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the route scope is configured, the client must provide an access token instead of an identity token for authorization purposes.')
    request_models = models.JSONField(blank=True, null=True, db_comment='The request models for the route. Supported only for WebSocket APIs.')
    request_parameters = models.JSONField(blank=True, null=True, db_comment='The request parameters for the route. Supported only for WebSocket APIs.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_api_gatewayv2_route'
        db_table_comment = 'AWS API Gateway Version 2 Route'


class AwsApiGatewayv2Stage(models.Model):
    stage_name = models.TextField(blank=True, null=True, db_comment='The name of the stage')
    api_id = models.TextField(blank=True, null=True, db_comment='The id of the api which contains this stage')
    api_gateway_managed = models.BooleanField(blank=True, null=True, db_comment='Specifies whether a stage is managed by API Gateway')
    auto_deploy = models.BooleanField(blank=True, null=True, db_comment='Specifies whether updates to an API automatically trigger a new deployment')
    client_certificate_id = models.TextField(blank=True, null=True, db_comment='The identifier of a client certificate for a Stage. Supported only for WebSocket APIs')
    created_date = models.TextField(blank=True, null=True, db_comment='The timestamp when the stage was created')
    deployment_id = models.TextField(blank=True, null=True, db_comment='The identifier of the Deployment that the Stage is associated with')
    default_route_data_trace_enabled = models.BooleanField(blank=True, null=True, db_comment='Specifies whether (true) or not (false) data trace logging is enabled for this route. This property affects the log entries pushed to Amazon CloudWatch Logs. Supported only for WebSocket APIs')
    default_route_detailed_metrics_enabled = models.BooleanField(blank=True, null=True, db_comment='Specifies whether detailed metrics are enabled')
    default_route_logging_level = models.TextField(blank=True, null=True, db_comment='Specifies the logging level for this route: INFO, ERROR, or OFF. This property affects the log entries pushed to Amazon CloudWatch Logs. Supported only for WebSocket APIs')
    default_route_throttling_burst_limit = models.BigIntegerField(blank=True, null=True, db_comment='Throttling burst limit for default route settings')
    default_route_throttling_rate_limit = models.FloatField(blank=True, null=True, db_comment='Throttling rate limit for default route settings')
    last_deployment_status_message = models.TextField(blank=True, null=True, db_comment='Describes the status of the last deployment of a stage. Supported only for stages with autoDeploy enabled')
    last_updated_date = models.TextField(blank=True, null=True, db_comment='The timestamp when the stage was last updated')
    description = models.TextField(blank=True, null=True, db_comment="The stage's description")
    access_log_settings = models.JSONField(blank=True, null=True, db_comment='Access log settings of the stage.')
    stage_variables = models.JSONField(blank=True, null=True, db_comment='A map that defines the stage variables for a stage resource')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_api_gatewayv2_stage'
        db_table_comment = 'AWS API Gateway Version 2 Stage'
# Unable to inspect table 'aws_appautoscaling_policy'
# The error was: rpc error: code = Internal desc = aws: rpc error: code = Internal desc = 'List' call for table 'aws_appautoscaling_policy' is missing 1 required qual: column:'service_namespace' operator: =

# Unable to inspect table 'aws_appautoscaling_target'
# The error was: rpc error: code = Internal desc = aws: rpc error: code = Internal desc = 'List' call for table 'aws_appautoscaling_target' is missing 1 required qual: column:'service_namespace' operator: =



class AwsAppconfigApplication(models.Model):
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The application ID.')
    name = models.TextField(blank=True, null=True, db_comment='The application name.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) that identifies the application.')
    description = models.TextField(blank=True, null=True, db_comment='The description of the application.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_appconfig_application'
        db_table_comment = 'AWS AppConfig Application'


class AwsAppstreamFleet(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the fleet.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the fleet.')
    instance_type = models.TextField(blank=True, null=True, db_comment='The instance type to use when launching fleet instances.')
    state = models.TextField(blank=True, null=True, db_comment='The current state for the fleet.')
    created_time = models.DateTimeField(blank=True, null=True, db_comment='The time the fleet was created.')
    description = models.TextField(blank=True, null=True, db_comment='The description to display.')
    display_name = models.TextField(blank=True, null=True, db_comment='The fleet name to display.')
    disconnect_timeout_in_seconds = models.BigIntegerField(blank=True, null=True, db_comment='The amount of time that a streaming session remains active after users disconnect. If they try to reconnect to the streaming session after a disconnection or network interruption within this time interval, they are connected to their previous session. Otherwise, they are connected to a new session with a new streaming instance. Specify a value between 60 and 360000.')
    directory_name = models.TextField(blank=True, null=True, db_comment='The fully qualified name of the directory (for example, corp.example.com).')
    organizational_unit_distinguished_name = models.TextField(blank=True, null=True, db_comment='The distinguished name of the organizational unit for computer accounts.')
    enable_default_internet_access = models.BooleanField(blank=True, null=True, db_comment='Indicates whether default internet access is enabled for the fleet.')
    fleet_type = models.TextField(blank=True, null=True, db_comment='The fleet type. ALWAYS_ON Provides users with instant-on access to their apps. You are charged for all running instances in your fleet, even if no users are streaming apps. ON_DEMAND Provide users with access to applications after they connect, which takes one to two minutes. You are charged for instance streaming when users are connected and a small hourly fee for instances that are not streaming apps.')
    iam_role_arn = models.TextField(blank=True, null=True, db_comment='The ARN of the IAM role that is applied to the fleet.')
    idle_disconnect_timeout_in_seconds = models.BigIntegerField(blank=True, null=True, db_comment='The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the DisconnectTimeoutInSeconds time interval begins.')
    image_arn = models.TextField(blank=True, null=True, db_comment='The ARN for the public, private, or shared image.')
    image_name = models.TextField(blank=True, null=True, db_comment='The name of the image used to create the fleet.')
    max_concurrent_sessions = models.BigIntegerField(blank=True, null=True, db_comment='The maximum number of concurrent sessions for the fleet.')
    max_user_duration_in_seconds = models.BigIntegerField(blank=True, null=True, db_comment='The maximum amount of time that a streaming session can remain active, in seconds. If users are still connected to a streaming instance five minutes before this limit is reached, they are prompted to save any open documents before being disconnected.')
    platform = models.TextField(blank=True, null=True, db_comment='The platform of the fleet.')
    stream_view = models.TextField(blank=True, null=True, db_comment='The AppStream 2.0 view that is displayed to your users when they stream from the fleet. When APP is specified, only the windows of applications opened by users display. When DESKTOP is specified, the standard desktop that is provided by the operating system displays. The default value is APP.')
    compute_capacity_status = models.JSONField(blank=True, null=True, db_comment='The capacity status for the fleet.')
    fleet_errors = models.JSONField(blank=True, null=True, db_comment='The fleet errors.')
    session_script_s3_location = models.JSONField(blank=True, null=True, db_comment='The S3 location of the session scripts configuration zip file. This only applies to Elastic fleets.')
    usb_device_filter_strings = models.JSONField(blank=True, null=True, db_comment='The USB device filter strings associated with the fleet.')
    vpc_config = models.JSONField(blank=True, null=True, db_comment='The VPC configuration for the fleet.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_appstream_fleet'
        db_table_comment = 'AWS AppStream Fleet'
# Unable to inspect table 'aws_appstream_image'
# The error was: rpc error: code = Unknown desc = aws: operation error AppStream: ListTagsForResource, https response error StatusCode: 400, RequestID: 3ab71e4d-b45c-4400-874a-55a46db14af7, api error AccessDeniedException: User: arn:aws:sts::730335309881:assumed-role/AWSReservedSSO_AdministratorAccess_e90e8afaad518434/cccmigor is not authorized to perform: appstream:ListTagsForResource on resource: arn:aws:appstream:sa-east-1::image/AppStream-Graphics-G5-WinServer2016-06-17-2024


class AwsAppsyncGraphqlApi(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The API name.')
    api_id = models.TextField(blank=True, null=True, db_comment='The API ID.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of AppSync GraphQL API.')
    api_type = models.TextField(blank=True, null=True, db_comment='The value that indicates whether the GraphQL API is a standard API ( GRAPHQL ) or merged API ( MERGED ).')
    authentication_type = models.TextField(blank=True, null=True, db_comment='The authentication type.')
    merged_api_execution_role_arn = models.TextField(blank=True, null=True, db_comment='The Identity and Access Management service role ARN for a merged API.')
    owner = models.TextField(blank=True, null=True, db_comment='The account owner of the GraphQL API.')
    owner_contact = models.TextField(blank=True, null=True, db_comment='The owner contact information for an API resource.')
    visibility = models.TextField(blank=True, null=True, db_comment='Sets the value of the GraphQL API to public ( GLOBAL ) or private ( PRIVATE ).')
    waf_web_acl_arn = models.TextField(blank=True, null=True, db_comment='The ARN of the WAF access control list (ACL) associated with this GraphqlApi, if one exists.')
    xray_enabled = models.BooleanField(blank=True, null=True, db_comment='A flag indicating whether to use X-Ray tracing for this GraphqlApi.')
    log_config = models.JSONField(blank=True, null=True, db_comment='The Amazon CloudWatch Logs configuration.')
    open_id_connect_config = models.JSONField(blank=True, null=True, db_comment='The OpenID Connect configuration.')
    additional_authentication_providers = models.JSONField(blank=True, null=True, db_comment='A list of additional authentication providers for the GraphqlApi API.')
    dns = models.JSONField(blank=True, null=True, db_comment='The DNS records for the API.')
    lambda_authorizer_config = models.JSONField(blank=True, null=True, db_comment='Configuration for Lambda function authorization.')
    uris = models.JSONField(blank=True, null=True, db_comment='The URIs.')
    user_pool_config = models.JSONField(blank=True, null=True, db_comment='The Amazon Cognito user pool configuration.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_appsync_graphql_api'
        db_table_comment = 'AWS AppSync GraphQL API'


class AwsAthenaQueryExecution(models.Model):
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The unique identifier for each query execution.')
    workgroup = models.TextField(blank=True, null=True, db_comment='The name of the workgroup in which the query ran.')
    catalog = models.TextField(blank=True, null=True, db_comment='The name of the data catalog used in the query execution.')
    database = models.TextField(blank=True, null=True, db_comment='The name of the data database used in the query execution.')
    query = models.TextField(blank=True, null=True, db_comment='The SQL query statements which the query execution ran.')
    effective_engine_version = models.TextField(blank=True, null=True, db_comment='The engine version on which the query runs.')
    selected_engine_version = models.TextField(blank=True, null=True, db_comment='The engine version requested by the users.')
    execution_parameters = models.JSONField(blank=True, null=True, db_comment='A list of values for the parameters in a query.')
    statement_type = models.TextField(blank=True, null=True, db_comment='The type of query statement that was run.')
    substatement_type = models.TextField(blank=True, null=True, db_comment='The kind of query statement that was run.')
    state = models.TextField(blank=True, null=True, db_comment='The state of query execution.')
    state_change_reason = models.TextField(blank=True, null=True, db_comment='Further detail about the status of the query.')
    submission_date_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time that the query was submitted.')
    completion_date_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time that the query completed.')
    error_message = models.TextField(blank=True, null=True, db_comment='Contains a short description of the error that occurred.')
    error_type = models.BigIntegerField(blank=True, null=True, db_comment='An integer value that provides specific information about an Athena query error.')
    error_category = models.BigIntegerField(blank=True, null=True, db_comment='An integer value that specifies the category of a query failure error.')
    retryable = models.BooleanField(blank=True, null=True, db_comment='True if the query might succeed if resubmitted.')
    data_manifest_location = models.TextField(blank=True, null=True, db_comment='The location and file name of a data manifest file.')
    data_scanned_in_bytes = models.BigIntegerField(blank=True, null=True, db_comment='The number of bytes in the data that was queried.')
    engine_execution_time_in_millis = models.BigIntegerField(blank=True, null=True, db_comment='The number of milliseconds that the query took to execute.')
    query_planning_time_in_millis = models.BigIntegerField(blank=True, null=True, db_comment='The number of milliseconds that Athena took to plan the query processing flow.')
    query_queue_time_in_millis = models.BigIntegerField(blank=True, null=True, db_comment='The number of milliseconds that the query was in your query queue waiting for resources.')
    service_processing_time_in_millis = models.BigIntegerField(blank=True, null=True, db_comment='The number of milliseconds that Athena took to finalize and publish the query results after the query engine finished running the query.')
    total_execution_time_in_millis = models.BigIntegerField(blank=True, null=True, db_comment='The number of milliseconds that Athena took to run the query.')
    reused_previous_result = models.BooleanField(blank=True, null=True, db_comment='True if a previous query result was reused; false if the result was generated.')
    s3_acl_option = models.TextField(blank=True, null=True, db_comment='The Amazon S3 canned ACL that Athena should specify when storing query results.')
    encryption_option = models.TextField(blank=True, null=True, db_comment='Indicates whether Amazon S3 server-side encryption with Amazon S3-managed keys (SSE_S3), server-side encryption with KMS-managed keys (SSE_KMS), or client-side encryption with KMS-managed keys (CSE_KMS) is used.')
    kms_key = models.TextField(blank=True, null=True, db_comment='For SSE_KMS and CSE_KMS, this is the KMS key ARN or ID.')
    expected_bucket_owner = models.TextField(blank=True, null=True, db_comment='The Amazon Web Services account ID that you expect to be the owner of the Amazon S3 bucket specified by ResultConfiguration$OutputLocation.')
    output_location = models.TextField(blank=True, null=True, db_comment='The location in Amazon S3 where your query results are stored.')
    result_reuse_by_age_enabled = models.BooleanField(blank=True, null=True, db_comment='True if previous query results can be reused when the query is run.')
    result_reuse_by_age_mag_age_in_minutes = models.BigIntegerField(blank=True, null=True, db_comment='Specifies, in minutes, the maximum age of a previous query result that Athena should consider for reuse. The default is 60.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_athena_query_execution'
        db_table_comment = 'AWS Athena Query Execution'


class AwsAthenaWorkgroup(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The workgroup name.')
    description = models.TextField(blank=True, null=True, db_comment='The workgroup description.')
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time the workgroup was created.')
    state = models.TextField(blank=True, null=True, db_comment='The state of the workgroup.')
    additional_configuration = models.JSONField(blank=True, null=True, db_comment='Specifies a user defined JSON string that is passed to the notebook engine.')
    bytes_scanned_cutoff_per_query = models.BigIntegerField(blank=True, null=True, db_comment='The upper data usage limit (cutoff) for the amount of bytes a single query in a workgroup is allowed to scan.')
    customer_content_kms_key = models.TextField(blank=True, null=True, db_comment="Specifies the KMS key that is used to encrypt the user's data stores in Athena.")
    enforce_workgroup_configuration = models.BooleanField(blank=True, null=True, db_comment='If set to "true", the settings for the workgroup override client-side settings.')
    effective_engine_version = models.TextField(blank=True, null=True, db_comment='The engine version on which the query runs.')
    selected_engine_version = models.TextField(blank=True, null=True, db_comment='The engine version requested by the user.')
    execution_role = models.TextField(blank=True, null=True, db_comment="Role used in a notebook session for accessing the user's resources.")
    publish_cloudwatch_metrics_enabled = models.BooleanField(blank=True, null=True, db_comment='Indicates that the Amazon CloudWatch metrics are enabled for the workgroup.')
    requester_pays_enabled = models.BooleanField(blank=True, null=True, db_comment='If set to true, allows members assigned to a workgroup to reference Amazon S3 Requester Pays buckets in queries.')
    s3_acl_option = models.TextField(blank=True, null=True, db_comment='The Amazon S3 canned ACL that Athena should specify when storing query results.')
    encryption_option = models.TextField(blank=True, null=True, db_comment='Indicates whether Amazon S3 server-side encryption with Amazon S3-managed keys (SSE_S3), server-side encryption with KMS-managed keys (SSE_KMS), or client-side encryption with KMS-managed keys (CSE_KMS) is used.')
    result_configuration_kms_key = models.TextField(blank=True, null=True, db_comment='For SSE_KMS and CSE_KMS, this is the KMS key ARN or ID.')
    expected_bucket_owner = models.TextField(blank=True, null=True, db_comment='The Amazon Web Services account ID that you expect to be the owner of the Amazon S3 bucket specified by ResultConfiguration$OutputLocation.')
    output_location = models.TextField(blank=True, null=True, db_comment='The location in Amazon S3 where your query results are stored.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_athena_workgroup'
        db_table_comment = 'AWS Athena Workgroup'


class AwsAuditmanagerAssessment(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the assessment.')
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='An unique identifier for the assessment.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the assessment.')
    status = models.TextField(blank=True, null=True, db_comment='The current status of the assessment.')
    compliance_type = models.TextField(blank=True, null=True, db_comment='The name of the compliance standard related to the assessment.')
    assessment_report_destination = models.TextField(blank=True, null=True, db_comment='The destination of the assessment report.')
    assessment_report_destination_type = models.TextField(blank=True, null=True, db_comment='The destination type, such as Amazon S3.')
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='Specifies when the assessment was created.')
    description = models.TextField(blank=True, null=True, db_comment='The description of the assessment.')
    last_updated = models.DateTimeField(blank=True, null=True, db_comment='The time of the most recent update.')
    aws_account = models.JSONField(blank=True, null=True, db_comment='The AWS account associated with the assessment.')
    delegations = models.JSONField(blank=True, null=True, db_comment='The delegations associated with the assessment.')
    framework = models.JSONField(blank=True, null=True, db_comment='The framework from which the assessment was created.')
    scope = models.JSONField(blank=True, null=True, db_comment='The wrapper of AWS accounts and services in scope for the assessment.')
    roles = models.JSONField(blank=True, null=True, db_comment='The roles associated with the assessment.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_auditmanager_assessment'
        db_table_comment = 'AWS Audit Manager Assessment'


class AwsAuditmanagerControl(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the specified control.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the specified control.')
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='An unique identifier for the specified control.')
    type = models.TextField(blank=True, null=True, db_comment='The type of control, such as custom or standard.')
    created_at = models.DateTimeField(blank=True, null=True, db_comment='Specifies when the control was created.')
    created_by = models.TextField(blank=True, null=True, db_comment='The IAM user or role that created the control.')
    action_plan_title = models.TextField(blank=True, null=True, db_comment='The title of the action plan for remediating the control.')
    action_plan_instructions = models.TextField(blank=True, null=True, db_comment='The recommended actions to carry out if the control is not fulfilled.')
    control_sources = models.TextField(blank=True, null=True, db_comment='The data source that determines from where AWS Audit Manager collects evidence for the control.')
    description = models.TextField(blank=True, null=True, db_comment='The description of the specified control.')
    last_updated_at = models.DateTimeField(blank=True, null=True, db_comment='Specifies when the control was most recently updated.')
    last_updated_by = models.TextField(blank=True, null=True, db_comment='The IAM user or role that most recently updated the control.')
    testing_information = models.TextField(blank=True, null=True, db_comment='The steps to follow to determine if the control has been satisfied.')
    control_mapping_sources = models.JSONField(blank=True, null=True, db_comment='The data mapping sources for the specified control.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_auditmanager_control'
        db_table_comment = 'AWS Audit Manager Control'


class AwsAuditmanagerEvidence(models.Model):
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The identifier for the evidence.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the evidence.')
    assessment_id = models.TextField(blank=True, null=True, db_comment='An unique identifier for the assessment.')
    control_set_id = models.TextField(blank=True, null=True, db_comment='The identifier for the control set.')
    evidence_folder_id = models.TextField(blank=True, null=True, db_comment='The identifier for the folder in which the evidence is stored.')
    assessment_report_selection = models.TextField(blank=True, null=True, db_comment='Specifies whether the evidence is included in the assessment report.')
    aws_account_id = models.TextField(blank=True, null=True, db_comment='The identifier for the specified AWS account.')
    aws_organization = models.TextField(blank=True, null=True, db_comment='The AWS account from which the evidence is collected, and its AWS organization path.')
    compliance_check = models.TextField(blank=True, null=True, db_comment='The evaluation status for evidence that falls under the compliance check category.')
    data_source = models.TextField(blank=True, null=True, db_comment='The data source from which the specified evidence was collected.')
    event_name = models.TextField(blank=True, null=True, db_comment='The name of the specified evidence event.')
    event_source = models.TextField(blank=True, null=True, db_comment='The AWS service from which the evidence is collected.')
    evidence_aws_account_id = models.TextField(blank=True, null=True, db_comment='The identifier for the specified AWS account.')
    evidence_by_type = models.TextField(blank=True, null=True, db_comment='The type of automated evidence.')
    iam_id = models.TextField(blank=True, null=True, db_comment='The unique identifier for the IAM user or role associated with the evidence.')
    time = models.DateTimeField(blank=True, null=True, db_comment='The timestamp that represents when the evidence was collected.')
    attributes = models.JSONField(blank=True, null=True, db_comment='The names and values used by the evidence event')
    resources_included = models.JSONField(blank=True, null=True, db_comment='The list of resources assessed to generate the evidence.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_auditmanager_evidence'
        db_table_comment = 'AWS Audit Manager Evidence'


class AwsAuditmanagerEvidenceFolder(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the specified evidence folder.')
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The identifier for the folder in which evidence is stored.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the evidence folder.')
    assessment_id = models.TextField(blank=True, null=True, db_comment='The identifier for the specified assessment.')
    control_set_id = models.TextField(blank=True, null=True, db_comment='The identifier for the control set.')
    assessment_report_selection_count = models.BigIntegerField(blank=True, null=True, db_comment='The total count of evidence included in the assessment report.')
    author = models.TextField(blank=True, null=True, db_comment='The name of the user who created the evidence folder.')
    control_id = models.TextField(blank=True, null=True, db_comment='The unique identifier for the specified control.')
    control_name = models.TextField(blank=True, null=True, db_comment='The name of the control.')
    data_source = models.TextField(blank=True, null=True, db_comment='The AWS service from which the evidence was collected.')
    date = models.DateTimeField(blank=True, null=True, db_comment='The date when the first evidence was added to the evidence folder.')
    evidence_aws_service_source_count = models.BigIntegerField(blank=True, null=True, db_comment='The total number of AWS resources assessed to generate the evidence.')
    evidence_by_type_compliance_check_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of evidence that falls under the compliance check category.')
    evidence_by_type_compliance_check_issues_count = models.BigIntegerField(blank=True, null=True, db_comment='The total number of issues that were reported directly from AWS Security Hub, AWS Config, or both.')
    evidence_by_type_configuration_data_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of evidence that falls under the configuration data category.')
    evidence_by_type_manual_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of evidence that falls under the manual category.')
    evidence_by_type_user_activity_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of evidence that falls under the user activity category.')
    evidence_resources_included_count = models.BigIntegerField(blank=True, null=True, db_comment='The amount of evidence included in the evidence folder.')
    total_evidence = models.BigIntegerField(blank=True, null=True, db_comment='The total amount of evidence in the evidence folder.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_auditmanager_evidence_folder'
        db_table_comment = 'AWS Audit Manager Evidence Folder'


class AwsAuditmanagerFramework(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the specified framework.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the framework.')
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The unique identified for the specified framework.')
    type = models.TextField(blank=True, null=True, db_comment='The framework type, such as standard or custom.')
    created_at = models.DateTimeField(blank=True, null=True, db_comment='Specifies when the framework was created.')
    created_by = models.TextField(blank=True, null=True, db_comment='The IAM user or role that created the framework.')
    compliance_type = models.TextField(blank=True, null=True, db_comment='The compliance type that the new custom framework supports, such as CIS or HIPAA.')
    controls_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of controls associated with the specified framework.')
    control_sets_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of control sets associated with the specified framework.')
    control_sources = models.TextField(blank=True, null=True, db_comment='The sources from which AWS Audit Manager collects evidence for the control.')
    description = models.TextField(blank=True, null=True, db_comment='The description of the specified framework.')
    last_updated_at = models.DateTimeField(blank=True, null=True, db_comment='Specifies when the framework was most recently updated.')
    last_updated_by = models.TextField(blank=True, null=True, db_comment='The IAM user or role that most recently updated the framework.')
    logo = models.TextField(blank=True, null=True, db_comment='The logo associated with the framework.')
    control_sets = models.JSONField(blank=True, null=True, db_comment='The control sets associated with the framework.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_auditmanager_framework'
        db_table_comment = 'AWS Audit Manager Framework'


class AwsAvailabilityZone(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the Availability Zone, Local Zone, or Wavelength Zone')
    zone_id = models.TextField(blank=True, null=True, db_comment='The ID of the Availability Zone, Local Zone, or Wavelength Zone.')
    zone_type = models.TextField(blank=True, null=True, db_comment='The type of zone. The valid values are availability-zone, local-zone, and wavelength-zone.')
    opt_in_status = models.TextField(blank=True, null=True, db_comment='For Availability Zones, this parameter always has the value of opt-in-not-required. For Local Zones and Wavelength Zones, this parameter is the opt-in status. The possible values are opted-in, and not-opted-in.')
    group_name = models.TextField(blank=True, null=True, db_comment='For Availability Zones, this parameter has the same value as the Region name. For Local Zones, the name of the associated group, for example us-west-2-lax-1. For Wavelength Zones, the name of the associated group, for example us-east-1-wl1-bos-wlz-1.')
    region_name = models.TextField(blank=True, null=True, db_comment='The name of the Region.')
    parent_zone_name = models.TextField(blank=True, null=True, db_comment='The name of the zone that handles some of the Local Zone or Wavelength Zone control plane operations, such as API calls.')
    parent_zone_id = models.TextField(blank=True, null=True, db_comment='The ID of the zone that handles some of the Local Zone or Wavelength Zone control plane operations, such as API calls')
    messages = models.TextField(blank=True, null=True, db_comment='Any messages about the Availability Zone, Local Zone, or Wavelength Zone.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_availability_zone'
        db_table_comment = 'AWS Availability Zone'


class AwsBackupFramework(models.Model):
    framework_name = models.TextField(blank=True, null=True, db_comment='The unique name of a backup framework.')
    arn = models.TextField(blank=True, null=True, db_comment='An Amazon Resource Name (ARN) that uniquely identifies a backup framework resource.')
    framework_description = models.TextField(blank=True, null=True, db_comment='An optional description of the backup framework.')
    deployment_status = models.TextField(blank=True, null=True, db_comment='The deployment status of a backup framework.')
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time that a framework was created.')
    number_of_controls = models.BigIntegerField(blank=True, null=True, db_comment='The number of controls contained by the framework.')
    framework_status = models.TextField(blank=True, null=True, db_comment='The framework status based on recording statuses for resources governed by the framework (ACTIVE | PARTIALLY_ACTIVE | INACTIVE | UNAVAILABLE).')
    framework_controls = models.JSONField(blank=True, null=True, db_comment='A list of the controls that make up the framework. Each control in the list has a name, input parameters, and scope.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_backup_framework'
        db_table_comment = 'AWS Backup Framework'


class AwsBackupJob(models.Model):
    job_id = models.TextField(blank=True, null=True, db_comment='The logical id of a backup job.')
    recovery_point_arn = models.TextField(blank=True, null=True, db_comment='An Amazon Resource Name (ARN) that uniquely identifies a recovery point.')
    backup_vault_arn = models.TextField(blank=True, null=True, db_comment='An Amazon Resource Name (ARN) that uniquely identifies the target backup vault.')
    resource_type = models.TextField(blank=True, null=True, db_comment='The type of AWS resource to be backed up.')
    resource_arn = models.TextField(blank=True, null=True, db_comment='An Amazon Resource Name (ARN) that uniquely identifies the source resource in the recovery point.')
    status = models.TextField(blank=True, null=True, db_comment='The current state of a backup job.')
    status_message = models.TextField(blank=True, null=True, db_comment='A detailed message explaining the status of the job.')
    backup_size = models.BigIntegerField(blank=True, null=True, db_comment='The size in bytes of a backup.')
    backup_vault_name = models.TextField(blank=True, null=True, db_comment='The name of the target backup vault.')
    backup_options = models.JSONField(blank=True, null=True, db_comment='Specifies the backup options for a selected resource.')
    backup_type = models.TextField(blank=True, null=True, db_comment='Represents the type of backup for a backup job.')
    bytes_transferred = models.BigIntegerField(blank=True, null=True, db_comment='The size in bytes transferred to a backup vault at the time that the job status was queried.')
    completion_date = models.DateTimeField(blank=True, null=True, db_comment='The date and time a backup job is completed.')
    creation_date = models.DateTimeField(blank=True, null=True, db_comment='The date and time a backup job is created.')
    expected_completion_date = models.DateTimeField(blank=True, null=True, db_comment='The date and time a backup job is expected to be completed.')
    iam_role_arn = models.TextField(blank=True, null=True, db_comment='The ARN of the IAM role that AWS Backup uses to create the target recovery point.')
    is_parent = models.BooleanField(blank=True, null=True, db_comment='A Boolean value that is returned as TRUE if the specified job is a parent job.')
    parent_job_id = models.TextField(blank=True, null=True, db_comment='The ID of the parent backup job, if there is one.')
    percent_done = models.TextField(blank=True, null=True, db_comment='The percentage of job completion.')
    start_by = models.DateTimeField(blank=True, null=True, db_comment='The date and time a backup job must be started before it is canceled.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_backup_job'
        db_table_comment = 'AWS Backup Job'


class AwsBackupLegalHold(models.Model):
    legal_hold_id = models.TextField(blank=True, null=True, db_comment='ID of specific legal hold on one or more recovery points.')
    arn = models.TextField(blank=True, null=True, db_comment='This is an Amazon Resource Number (ARN) that uniquely identifies the legal hold.')
    creation_date = models.DateTimeField(blank=True, null=True, db_comment='This is the time in number format when legal hold was created.')
    status = models.TextField(blank=True, null=True, db_comment='This is the status of the legal hold. Statuses can be ACTIVE, CREATING, CANCELED, and CANCELING.')
    cancellation_date = models.DateTimeField(blank=True, null=True, db_comment='This is the time in number format when legal hold was cancelled.')
    description = models.TextField(blank=True, null=True, db_comment='This is the description of a legal hold.')
    retain_record_until = models.DateTimeField(blank=True, null=True, db_comment='This is the date and time until which the legal hold record will be retained.')
    recovery_point_selection = models.JSONField(blank=True, null=True, db_comment='This specifies criteria to assign a set of resources, such as resource types or backup vaults.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_backup_legal_hold'
        db_table_comment = 'AWS Backup Legal Hold'


class AwsBackupPlan(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The display name of a saved backup plan.')
    arn = models.TextField(blank=True, null=True, db_comment='An Amazon Resource Name (ARN) that uniquely identifies a backup plan.')
    backup_plan_id = models.TextField(blank=True, null=True, db_comment='Specifies the id to identify a backup plan uniquely.')
    creation_date = models.DateTimeField(blank=True, null=True, db_comment='The date and time a resource backup plan is created.')
    deletion_date = models.DateTimeField(blank=True, null=True, db_comment='The date and time a backup plan is deleted.')
    last_execution_date = models.DateTimeField(blank=True, null=True, db_comment='The last time a job to back up resources was run with this rule.')
    creator_request_id = models.TextField(blank=True, null=True, db_comment='An unique string that identifies the request and allows failed requests to be retried without the risk of running the operation twice.')
    version_id = models.TextField(blank=True, null=True, db_comment='Unique, randomly generated, Unicode, UTF-8 encoded strings that are at most 1,024 bytes long. Version IDs cannot be edited.')
    backup_plan = models.JSONField(blank=True, null=True, db_comment='Specifies the body of a backup plan.')
    advanced_backup_settings = models.JSONField(blank=True, null=True, db_comment='Contains a list of BackupOptions for a resource type.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_backup_plan'
        db_table_comment = 'AWS Backup Plan'


class AwsBackupProtectedResource(models.Model):
    resource_arn = models.TextField(blank=True, null=True, db_comment='An Amazon Resource Name (ARN) that uniquely identifies a resource.')
    resource_type = models.TextField(blank=True, null=True, db_comment='The type of Amazon Web Services resource.')
    last_backup_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time a resource was last backed up.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_backup_protected_resource'
        db_table_comment = 'AWS Backup Protected Resource'


class AwsBackupRecoveryPoint(models.Model):
    backup_vault_name = models.TextField(blank=True, null=True, db_comment='The name of a logical container where backups are stored.')
    recovery_point_arn = models.TextField(blank=True, null=True, db_comment='An ARN that uniquely identifies a recovery point.')
    resource_type = models.TextField(blank=True, null=True, db_comment='The type of Amazon Web Services resource to save as a recovery point.')
    status = models.TextField(blank=True, null=True, db_comment='A status code specifying the state of the recovery point.')
    backup_size_in_bytes = models.BigIntegerField(blank=True, null=True, db_comment='The size, in bytes, of a backup.')
    backup_vault_arn = models.TextField(blank=True, null=True, db_comment='An ARN that uniquely identifies a backup vault.')
    creation_date = models.DateTimeField(blank=True, null=True, db_comment='The date and time that a recovery point is created.')
    completion_date = models.DateTimeField(blank=True, null=True, db_comment='The date and time that a job to create a recovery point is completed.')
    encryption_key_arn = models.TextField(blank=True, null=True, db_comment='The server-side encryption key used to protect your backups.')
    iam_role_arn = models.TextField(blank=True, null=True, db_comment='Specifies the IAM role ARN used to create the target recovery point.')
    is_encrypted = models.BooleanField(blank=True, null=True, db_comment='A Boolean value that is returned as TRUE if the specified recovery point is encrypted, or FALSE if the recovery point is not encrypted.')
    last_restore_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time that a recovery point was last restored.')
    resource_arn = models.TextField(blank=True, null=True, db_comment='An ARN that uniquely identifies a saved resource.')
    source_backup_vault_arn = models.TextField(blank=True, null=True, db_comment='An Amazon Resource Name (ARN) that uniquely identifies the source vault where the resource was originally backed up in.')
    status_message = models.TextField(blank=True, null=True, db_comment='A status message explaining the reason for the recovery point deletion failure.')
    storage_class = models.TextField(blank=True, null=True, db_comment='Specifies the storage class of the recovery point. Valid values are WARM or COLD.')
    calculated_lifecycle = models.JSONField(blank=True, null=True, db_comment='An object containing DeleteAt and MoveToColdStorageAt timestamps.')
    created_by = models.JSONField(blank=True, null=True, db_comment='Contains identifying information about the creation of a recovery point, including the BackupPlanArn, BackupPlanId, BackupPlanVersion, and BackupRuleId of the backup plan used to create it.')
    lifecycle = models.JSONField(blank=True, null=True, db_comment='The lifecycle defines when a protected resource is transitioned to cold storage and when it expires.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_backup_recovery_point'
        db_table_comment = 'AWS Backup Recovery Point'


class AwsBackupReportPlan(models.Model):
    arn = models.TextField(blank=True, null=True, db_comment='An Amazon Resource Name (ARN) that uniquely identifies a resource.')
    report_plan_name = models.TextField(blank=True, null=True, db_comment='The unique name of the report plan.')
    description = models.TextField(blank=True, null=True, db_comment='An optional description of the report plan with a maximum 1,024 characters.')
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time that a report plan is created, in Unix format and Coordinated Universal Time (UTC).')
    deployment_status = models.TextField(blank=True, null=True, db_comment='The deployment status of a report plan. The statuses are CREATE_IN_PROGRESS, UPDATE_IN_PROGRESS, DELETE_IN_PROGRESS, and COMPLETED.')
    last_attempted_execution_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time that a report job associated with this report plan last attempted to run, in Unix format and Coordinated Universal Time (UTC).')
    last_successful_execution_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time that a report job associated with this report plan last successfully ran, in Unix format and Coordinated Universal Time (UTC).')
    report_delivery_channel = models.JSONField(blank=True, null=True, db_comment='Contains information about where and how to deliver your reports, specifically your Amazon S3 bucket name, S3 key prefix, and the formats of your reports.')
    report_setting = models.JSONField(blank=True, null=True, db_comment='Identifies the report template for the report. Reports are built using a report template.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_backup_report_plan'
        db_table_comment = 'AWS Backup Report Plan'


class AwsBackupSelection(models.Model):
    selection_name = models.TextField(blank=True, null=True, db_comment='The display name of a resource selection document.')
    selection_id = models.TextField(blank=True, null=True, db_comment='Uniquely identifies a request to assign a set of resources to a backup plan.')
    backup_plan_id = models.TextField(blank=True, null=True, db_comment='An ID that uniquely identifies a backup plan.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the backup selection.')
    creation_date = models.DateTimeField(blank=True, null=True, db_comment='The date and time a resource backup plan is created.')
    creator_request_id = models.TextField(blank=True, null=True, db_comment='An unique string that identifies the request and allows failed requests to be retried without the risk of running the operation twice.')
    iam_role_arn = models.TextField(blank=True, null=True, db_comment='Specifies the IAM role Amazon Resource Name (ARN) to create the target recovery point.')
    list_of_tags = models.JSONField(blank=True, null=True, db_comment='An array of conditions used to specify a set of resources to assign to a backup plan.')
    resources = models.JSONField(blank=True, null=True, db_comment='Contains a list of BackupOptions for a resource type.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_backup_selection'
        db_table_comment = 'AWS Backup Selection'


class AwsBackupVault(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of a logical container where backups are stored.')
    arn = models.TextField(blank=True, null=True, db_comment='An Amazon Resource Name (ARN) that uniquely identifies a backup vault.')
    creation_date = models.DateTimeField(blank=True, null=True, db_comment='The date and time a resource backup is created.')
    creator_request_id = models.TextField(blank=True, null=True, db_comment='An unique string that identifies the request and allows failed requests to be retried without the risk of running the operation twice.')
    encryption_key_arn = models.TextField(blank=True, null=True, db_comment='The server-side encryption key that is used to protect your backups.')
    number_of_recovery_points = models.FloatField(blank=True, null=True, db_comment='The number of recovery points that are stored in a backup vault.')
    sns_topic_arn = models.TextField(blank=True, null=True, db_comment='An ARN that uniquely identifies an Amazon Simple Notification Service.')
    policy = models.JSONField(blank=True, null=True, db_comment='The backup vault access policy document in JSON format.')
    policy_std = models.JSONField(blank=True, null=True, db_comment='Contains the backup vault access policy document in a canonical form for easier searching.')
    backup_vault_events = models.JSONField(blank=True, null=True, db_comment='An array of events that indicate the status of jobs to back up resources to the backup vault.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_backup_vault'
        db_table_comment = 'AWS Backup Vault'
# Unable to inspect table 'aws_cloudcontrol_resource'
# The error was: rpc error: code = Internal desc = aws: rpc error: code = Internal desc = 'List' call for table 'aws_cloudcontrol_resource' is missing 1 required qual: column:'type_name' operator: =



class AwsCloudformationStack(models.Model):
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='Unique identifier of the stack.')
    name = models.TextField(blank=True, null=True, db_comment='The name associated with the stack.')
    status = models.TextField(blank=True, null=True, db_comment='Current status of the stack.')
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='The time at which the stack was created.')
    disable_rollback = models.BooleanField(blank=True, null=True, db_comment='Boolean to enable or disable rollback on stack creation failures.')
    enable_termination_protection = models.BooleanField(blank=True, null=True, db_comment='Specifies whether termination protection is enabled for the stack.')
    last_updated_time = models.DateTimeField(blank=True, null=True, db_comment='The time the stack was last updated. This field will only be returned if the stack has been updated at least once.')
    parent_id = models.TextField(blank=True, null=True, db_comment='ID of the direct parent of this stack.')
    role_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that is associated with the stack.')
    root_id = models.TextField(blank=True, null=True, db_comment='ID of the top-level stack to which the nested stack ultimately belongs.')
    description = models.TextField(blank=True, null=True, db_comment='A user-defined description associated with the stack.')
    notification_arns = models.JSONField(blank=True, null=True, db_comment='SNS topic ARNs to which stack related events are published.')
    outputs = models.JSONField(blank=True, null=True, db_comment='A list of output structures.')
    rollback_configuration = models.JSONField(blank=True, null=True, db_comment='The rollback triggers for AWS CloudFormation to monitor during stack creation and updating operations, and for the specified monitoring period afterwards.')
    capabilities = models.JSONField(blank=True, null=True, db_comment='The capabilities allowed in the stack.')
    stack_drift_status = models.TextField(blank=True, null=True, db_comment="Status of the stack's actual configuration compared to its expected template configuration.")
    parameters = models.JSONField(blank=True, null=True, db_comment='A list of Parameter structures.')
    template_body = models.TextField(blank=True, null=True, db_comment='Structure containing the template body.')
    template_body_json = models.JSONField(blank=True, null=True, db_comment='Structure containing the template body. Parsed into json object for better readability.')
    resources = models.JSONField(blank=True, null=True, db_comment='A list of Stack resource structures.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags associated with stack.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_cloudformation_stack'
        db_table_comment = 'AWS CloudFormation Stack'


class AwsCloudformationStackResource(models.Model):
    logical_resource_id = models.TextField(blank=True, null=True, db_comment='The logical name of the resource specified in the template.')
    stack_name = models.TextField(blank=True, null=True, db_comment='The name associated with the stack.')
    stack_id = models.TextField(blank=True, null=True, db_comment='Unique identifier of the stack.')
    last_updated_timestamp = models.DateTimeField(blank=True, null=True, db_comment='Time the status was updated.')
    resource_status = models.TextField(blank=True, null=True, db_comment='Current status of the resource.')
    resource_type = models.TextField(blank=True, null=True, db_comment='Type of resource.')
    description = models.TextField(blank=True, null=True, db_comment='User defined description associated with the resource.')
    physical_resource_id = models.TextField(blank=True, null=True, db_comment='The name or unique identifier that corresponds to a physical instance ID of a resource supported by CloudFormation.')
    resource_status_reason = models.TextField(blank=True, null=True, db_comment='Success/failure message associated with the resource.')
    drift_information = models.JSONField(blank=True, null=True, db_comment="Information about whether the resource's actual configuration differs, or has drifted, from its expected configuration, as defined in the stack template and any values specified as template parameters. For more information, see Detecting Unregulated Configuration Changes to Stacks and Resources.")
    module_info = models.JSONField(blank=True, null=True, db_comment='Contains information about the module from which the resource was created, if the resource was created from a module included in the stack template.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_cloudformation_stack_resource'
        db_table_comment = 'AWS CloudFormation Stack Resource'


class AwsCloudformationStackSet(models.Model):
    stack_set_id = models.TextField(blank=True, null=True, db_comment='The ID of the stack set.')
    stack_set_name = models.TextField(blank=True, null=True, db_comment='The name of the stack set.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the stack set.')
    status = models.TextField(blank=True, null=True, db_comment='The status of the stack set.')
    description = models.TextField(blank=True, null=True, db_comment='A description of the stack set that you specify when the stack set is created or updated.')
    drift_status = models.TextField(blank=True, null=True, db_comment="Status of the stack set's actual configuration compared to its expected template and parameter configuration. A stack set is considered to have drifted if one or more of its stack instances have drifted from their expected template and parameter configuration.")
    last_drift_check_timestamp = models.DateTimeField(blank=True, null=True, db_comment='Most recent time when CloudFormation performed a drift detection operation on the stack set.')
    permission_model = models.TextField(blank=True, null=True, db_comment='Describes how the IAM roles required for stack set operations are created.')
    administration_role_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the IAM role used to create or update the stack set.')
    execution_role_name = models.TextField(blank=True, null=True, db_comment='The name of the IAM execution role used to create or update the stack set.')
    template_body = models.TextField(blank=True, null=True, db_comment='The structure that contains the body of the template that was used to create or update the stack set.')
    auto_deployment = models.JSONField(blank=True, null=True, db_comment='Describes whether StackSets automatically deploys to Organizations accounts that are added to a target organizational unit (OU).')
    capabilities = models.JSONField(blank=True, null=True, db_comment='The capabilities that are allowed in the stack set.')
    organizational_unit_ids = models.JSONField(blank=True, null=True, db_comment='The organization root ID or organizational unit (OU) IDs that you specified for DeploymentTargets.')
    parameters = models.JSONField(blank=True, null=True, db_comment='A list of input parameters for a stack set.')
    stack_set_drift_detection_details = models.JSONField(blank=True, null=True, db_comment='Detailed information about the drift status of the stack set.')
    managed_execution = models.JSONField(blank=True, null=True, db_comment='Describes whether StackSets performs non-conflicting operations concurrently and queues conflicting operations.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags associated with stack.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_cloudformation_stack_set'
        db_table_comment = 'AWS CloudFormation Stack Set'


class AwsCloudfrontCachePolicy(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='A unique name to identify the cache policy.')
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The unique identifier for the cache policy.')
    comment = models.TextField(blank=True, null=True, db_comment='A comment to describe the cache policy.')
    default_ttl = models.BigIntegerField(blank=True, null=True, db_comment='The default amount of time, in seconds, that you want objects to stay in the CloudFront cache before CloudFront sends another request to the origin to see if the object has been updated.')
    etag = models.TextField(blank=True, null=True, db_comment='The current version of the cache policy.')
    max_ttl = models.BigIntegerField(blank=True, null=True, db_comment='The maximum amount of time, in seconds, that you want objects to stay in the CloudFront cache before CloudFront sends another request to the origin to see if the object has been updated.')
    min_ttl = models.BigIntegerField(blank=True, null=True, db_comment='The minimum amount of time, in seconds, that you want objects to stay in the CloudFront cache before CloudFront sends another request to the origin to see if the object has been updated.')
    last_modified_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time when the cache policy was last modified.')
    parameters_in_cache_key_and_forwarded_to_origin = models.JSONField(blank=True, null=True, db_comment='The HTTP headers, cookies, and URL query strings to include in the cache key. The values included in the cache key are automatically included in requests that CloudFront sends to the origin.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_cloudfront_cache_policy'
        db_table_comment = 'AWS CloudFront Cache Policy'


class AwsCloudfrontDistribution(models.Model):
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The identifier for the Distribution.')
    arn = models.TextField(blank=True, null=True, db_comment='The ARN (Amazon Resource Name) for the distribution.')
    status = models.TextField(blank=True, null=True, db_comment='The current status of the Distribution.')
    caller_reference = models.TextField(blank=True, null=True, db_comment="A unique value that ensures that the request can't be replayed.")
    comment = models.TextField(blank=True, null=True, db_comment='The comment originally specified when this Distribution was created.')
    default_root_object = models.TextField(blank=True, null=True, db_comment='The object that you want CloudFront to request from your origin.')
    domain_name = models.TextField(blank=True, null=True, db_comment='The domain name that corresponds to the Distribution.')
    enabled = models.BooleanField(blank=True, null=True, db_comment='Whether the Distribution is enabled to accept user requests for content.')
    e_tag = models.TextField(blank=True, null=True, db_comment='The current version of the configuration.')
    http_version = models.TextField(blank=True, null=True, db_comment="Specify the maximum HTTP version that you want viewers to use to communicate with CloudFront. The default value for new web Distributions is http2. Viewers that don't support HTTP/2 will automatically use an earlier version.")
    is_ipv6_enabled = models.BooleanField(blank=True, null=True, db_comment='Whether CloudFront responds to IPv6 DNS requests with an IPv6 address for your Distribution.')
    in_progress_invalidation_batches = models.BigIntegerField(blank=True, null=True, db_comment='The number of invalidation batches currently in progress.')
    last_modified_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time the Distribution was last modified.')
    price_class = models.TextField(blank=True, null=True, db_comment='A complex type that contains information about price class for this streaming Distribution.')
    web_acl_id = models.TextField(blank=True, null=True, db_comment='The Web ACL Id (if any) associated with the distribution.')
    active_trusted_key_groups = models.JSONField(blank=True, null=True, db_comment='CloudFront automatically adds this field to the response if you’ve configured a cache behavior in this distribution to serve private content using key groups.')
    active_trusted_signers = models.JSONField(blank=True, null=True, db_comment='A list of AWS accounts and the identifiers of active CloudFront key pairs in each account that CloudFront can use to verify the signatures of signed URLs and signed cookies.')
    aliases = models.JSONField(blank=True, null=True, db_comment='A complex type that contains information about CNAMEs (alternate domain names),if any, for this distribution.')
    alias_icp_recordals = models.JSONField(blank=True, null=True, db_comment="AWS services in China customers must file for an Internet Content Provider (ICP) recordal if they want to serve content publicly on an alternate domain name, also known as a CNAME, that they've added to CloudFront. AliasICPRecordal provides the ICP recordal status for CNAMEs associated with distributions.")
    cache_behaviors = models.JSONField(blank=True, null=True, db_comment='The number of cache behaviors for this Distribution.')
    custom_error_responses = models.JSONField(blank=True, null=True, db_comment='A complex type that contains zero or more CustomErrorResponses elements.')
    default_cache_behavior = models.JSONField(blank=True, null=True, db_comment="A complex type that describes the default cache behavior if you don't specify a CacheBehavior element or if files don't match any of the values of PathPattern in CacheBehavior elements. You must create exactly one default cache behavior.")
    logging = models.JSONField(blank=True, null=True, db_comment='A complex type that controls whether access logs are written for the distribution.')
    origins = models.JSONField(blank=True, null=True, db_comment='A complex type that contains information about origins for this distribution.')
    origin_groups = models.JSONField(blank=True, null=True, db_comment='A complex type that contains information about origin groups for this distribution.')
    restrictions = models.JSONField(blank=True, null=True, db_comment='A complex type that identifies ways in which you want to restrict distribution of your content.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the Maintenance Window')
    viewer_certificate = models.JSONField(blank=True, null=True, db_comment="A complex type that determines the distribution's SSL/TLS configuration for communicating with viewers.")
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_cloudfront_distribution'
        db_table_comment = 'AWS CloudFront Distribution'


class AwsCloudfrontFunction(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the CloudFront function.')
    arn = models.TextField(blank=True, null=True, db_comment='The version identifier for the current version of the CloudFront function.')
    status = models.TextField(blank=True, null=True, db_comment='The status of the CloudFront function.')
    e_tag = models.TextField(blank=True, null=True, db_comment='The version identifier for the current version of the CloudFront function.')
    function_config = models.JSONField(blank=True, null=True, db_comment='Contains configuration information about a CloudFront function.')
    function_metadata = models.JSONField(blank=True, null=True, db_comment='Contains metadata about a CloudFront function.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_cloudfront_function'
        db_table_comment = 'AWS CloudFront Function'


class AwsCloudfrontOriginAccessIdentity(models.Model):
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The ID for the origin access identity.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the origin access identity.')
    s3_canonical_user_id = models.TextField(blank=True, null=True, db_comment='The Amazon S3 canonical user ID for the origin access identity, which you use when giving the origin access identity read permission to an object in Amazon S3.')
    caller_reference = models.TextField(blank=True, null=True, db_comment="A unique value that ensures that the request can't be replayed.")
    comment = models.TextField(blank=True, null=True, db_comment='The comment for this origin access identity.')
    etag = models.TextField(blank=True, null=True, db_comment="The current version of the origin access identity's information.")
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_cloudfront_origin_access_identity'
        db_table_comment = 'AWS CloudFront Origin Access Identity'


class AwsCloudfrontOriginRequestPolicy(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='A unique name to identify the origin request policy.')
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The ID for the origin request policy.')
    comment = models.TextField(blank=True, null=True, db_comment='The comment for this origin request policy.')
    etag = models.TextField(blank=True, null=True, db_comment='The current version of the origin request policy.')
    last_modified_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time when the origin request policy was last modified.')
    cookies_config = models.JSONField(blank=True, null=True, db_comment='The cookies from viewer requests to include in origin requests.')
    headers_config = models.JSONField(blank=True, null=True, db_comment='The HTTP headers to include in origin requests.')
    query_strings_config = models.JSONField(blank=True, null=True, db_comment='The URL query strings from viewer requests to include in origin requests.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_cloudfront_origin_request_policy'
        db_table_comment = 'AWS CloudFront Origin Request Policy'


class AwsCloudfrontResponseHeadersPolicy(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the response headers policy.')
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The identifier for the response headers policy.')
    arn = models.TextField(blank=True, null=True, db_comment='The version identifier for the current version of the response headers policy.')
    last_modified_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time when the response headers policy was last modified.')
    type = models.TextField(blank=True, null=True, db_comment='The type of response headers policy, either managed (created by AWS) or custom (created in this AWS account).')
    etag = models.TextField(blank=True, null=True, db_comment='The version identifier for the current version of the response headers policy.')
    response_headers_policy_config = models.JSONField(blank=True, null=True, db_comment='A response headers policy contains information about a set of HTTP response headers and their values. CloudFront adds the headers in the policy to HTTP responses that it sends for requests that match a cache behavior that’s associated with the policy.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_cloudfront_response_headers_policy'
        db_table_comment = 'AWS Cloudfront Response Headers Policy'


class AwsCloudsearchDomain(models.Model):
    domain_name = models.TextField(blank=True, null=True, db_comment='A string that represents the name of a domain.')
    domain_id = models.TextField(blank=True, null=True, db_comment='An internally generated unique identifier for a domain.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the search domain.')
    created = models.BooleanField(blank=True, null=True, db_comment='True if the search domain is created.')
    deleted = models.BooleanField(blank=True, null=True, db_comment='True if the search domain has been deleted.')
    processing = models.BooleanField(blank=True, null=True, db_comment='True if processing is being done to activate the current domain configuration.')
    requires_index_documents = models.BooleanField(blank=True, null=True, db_comment='True if Index Documents need to be called to activate the current domain configuration.')
    search_instance_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of search instances that are available to process search requests.')
    search_instance_type = models.TextField(blank=True, null=True, db_comment='The instance type that is being used to process search requests.')
    search_partition_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of partitions across which the search index is spread.')
    doc_service = models.JSONField(blank=True, null=True, db_comment='The service endpoint for updating documents in a search domain.')
    limits = models.JSONField(blank=True, null=True, db_comment='Limit details for a search domain.')
    search_service = models.JSONField(blank=True, null=True, db_comment='The service endpoint for requesting search results from a search domain.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_cloudsearch_domain'
        db_table_comment = 'AWS CloudSearch Domain'


class AwsCloudtrailChannel(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the cloudtrail channel.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of a channel.')
    apply_to_all_regions = models.BooleanField(blank=True, null=True, db_comment='Specifies whether the channel applies to a single region or to all regions.')
    source = models.TextField(blank=True, null=True, db_comment='The event source for the cloudtrail channel.')
    advanced_event_selectors = models.JSONField(blank=True, null=True, db_comment='The advanced event selectors that are configured for the channel.')
    destinations = models.JSONField(blank=True, null=True, db_comment='The Amazon Web Services service that created the service-linked channel.')
    source_config = models.JSONField(blank=True, null=True, db_comment='Configuration information about the channel.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_cloudtrail_channel'
        db_table_comment = 'AWS CloudTrail Channel'


class AwsCloudtrailEventDataStore(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the event data store.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the event data store.')
    status = models.TextField(blank=True, null=True, db_comment='The status of an event data store.')
    created_timestamp = models.DateTimeField(blank=True, null=True, db_comment="The timestamp of the event data store's creation.")
    multi_region_enabled = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the event data store includes events from all regions, or only from the region in which it was created.')
    organization_enabled = models.BooleanField(blank=True, null=True, db_comment='Indicates that an event data store is collecting logged events for an organization.')
    retention_period = models.BigIntegerField(blank=True, null=True, db_comment='The retention period, in days.')
    termination_protection_enabled = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the event data store is protected from termination.')
    updated_timestamp = models.DateTimeField(blank=True, null=True, db_comment='The timestamp showing when an event data store was updated, if applicable. UpdatedTimestamp is always either the same or newer than the time shown in CreatedTimestamp.')
    advanced_event_selectors = models.JSONField(blank=True, null=True, db_comment='The advanced event selectors that were used to select events for the data store.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_cloudtrail_event_data_store'
        db_table_comment = 'AWS CloudTrail Event Data Store'


class AwsCloudtrailImport(models.Model):
    import_id = models.TextField(blank=True, null=True, db_comment='The ID of the import.')
    created_timestamp = models.DateTimeField(blank=True, null=True, db_comment="The timestamp of the import's creation.")
    import_status = models.TextField(blank=True, null=True, db_comment='The status of the import.')
    end_event_time = models.DateTimeField(blank=True, null=True, db_comment='Used with EndEventTime to bound a StartImport request, and limit imported trail events to only those events logged within a specified time period.')
    start_event_time = models.DateTimeField(blank=True, null=True, db_comment='Used with StartEventTime to bound a StartImport request, and limit imported trail events to only those events logged within a specified time period.')
    updated_timestamp = models.DateTimeField(blank=True, null=True, db_comment="The timestamp of the import's last update.")
    destinations = models.JSONField(blank=True, null=True, db_comment='The ARN of the destination event data store.')
    import_source = models.JSONField(blank=True, null=True, db_comment='The source S3 bucket.')
    import_statistics = models.JSONField(blank=True, null=True, db_comment='Provides statistics for the import.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_cloudtrail_import'
        db_table_comment = 'AWS CloudTrail Import'


class AwsCloudtrailLookupEvent(models.Model):
    event_id = models.TextField(blank=True, null=True, db_comment='The CloudTrail ID of the event returned.')
    event_name = models.TextField(blank=True, null=True, db_comment='The name of the event returned.')
    event_source = models.TextField(blank=True, null=True, db_comment='The Amazon Web Services service to which the request was made.')
    read_only = models.TextField(blank=True, null=True, db_comment='Information about whether the event is a write event or a read event.')
    access_key_id = models.TextField(blank=True, null=True, db_comment='The AWS access key ID that was used to sign the request. If the request was made with temporary security credentials, this is the access key ID of the temporary credentials.')
    event_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time of the event returned.')
    end_time = models.DateTimeField(blank=True, null=True, db_comment='Specifies that only events that occur before or at the specified time are returned. If the specified end time is before the specified start time, an error is returned.')
    start_time = models.DateTimeField(blank=True, null=True, db_comment='Specifies that only events that occur after or at the specified time are returned. If the specified start time is after the specified end time, an error is returned.')
    resource_name = models.TextField(blank=True, null=True, db_comment='The name of the resource.')
    resource_type = models.TextField(blank=True, null=True, db_comment='The resource type.')
    username = models.TextField(blank=True, null=True, db_comment='A user name or role name of the requester that called the API in the event returned.')
    resources = models.JSONField(blank=True, null=True, db_comment='A list of resources referenced by the event returned.')
    cloud_trail_event = models.JSONField(blank=True, null=True, db_comment='A JSON string that contains a representation of the event returned.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_cloudtrail_lookup_event'
        db_table_comment = 'AWS CloudTrail Lookup Event'


class AwsCloudtrailQuery(models.Model):
    query_id = models.TextField(blank=True, null=True, db_comment='The ID of the query.')
    event_data_store_arn = models.TextField(blank=True, null=True, db_comment='The ID of the event data store.')
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='The creation time of the query.')
    delivery_s3_uri = models.TextField(blank=True, null=True, db_comment='The URI for the S3 bucket where CloudTrail delivered query results, if applicable.')
    delivery_status = models.TextField(blank=True, null=True, db_comment='The delivery status.')
    error_message = models.TextField(blank=True, null=True, db_comment='The error message returned if a query failed.')
    query_status = models.TextField(blank=True, null=True, db_comment='The status of a query. Values for QueryStatus include QUEUED, RUNNING, FINISHED, FAILED, TIMED_OUT, or CANCELLED.')
    bytes_scanned = models.BigIntegerField(blank=True, null=True, db_comment="Gets metadata about a query, including the number of events that were matched, the total number of events scanned, the query run time in milliseconds, and the query's creation time.")
    events_matched = models.BigIntegerField(blank=True, null=True, db_comment='The number of events that matched a query.')
    events_scanned = models.BigIntegerField(blank=True, null=True, db_comment='The number of events that the query scanned in the event data store.')
    execution_time_in_millis = models.BigIntegerField(blank=True, null=True, db_comment="The query's run time, in milliseconds.")
    query_string = models.TextField(blank=True, null=True, db_comment='The SQL code of a query.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_cloudtrail_query'
        db_table_comment = 'AWS CloudTrail Query'


class AwsCloudtrailTrail(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the trail.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the trail.')
    home_region = models.TextField(blank=True, null=True, db_comment='The region in which the trail was created.')
    is_multi_region_trail = models.BooleanField(blank=True, null=True, db_comment='Specifies whether the trail exists only in one region or exists in all regions.')
    log_file_validation_enabled = models.BooleanField(blank=True, null=True, db_comment='Specifies whether log file validation is enabled, or not.')
    is_logging = models.BooleanField(blank=True, null=True, db_comment='Specifies whether the CloudTrail is currently logging AWS API calls, or not.')
    log_group_arn = models.TextField(blank=True, null=True, db_comment='Specifies an Amazon Resource Name (ARN), a unique identifier that represents the log group to which CloudTrail logs will be delivered.')
    cloudwatch_logs_role_arn = models.TextField(blank=True, null=True, db_comment="Specifies the role for the CloudWatch Logs endpoint to assume to write to a user's log group.")
    has_custom_event_selectors = models.BooleanField(blank=True, null=True, db_comment='Specifies whether the trail has custom event selectors, or not.')
    has_insight_selectors = models.BooleanField(blank=True, null=True, db_comment='Specifies whether a trail has insight types specified in an InsightSelector list, or not.')
    include_global_service_events = models.BooleanField(blank=True, null=True, db_comment='Specifies whether to include AWS API calls from AWS global services, or not.')
    is_organization_trail = models.BooleanField(blank=True, null=True, db_comment='Specifies whether the trail is an organization trail, or not.')
    kms_key_id = models.TextField(blank=True, null=True, db_comment='Specifies the KMS key ID that encrypts the logs delivered by CloudTrail.')
    s3_bucket_name = models.TextField(blank=True, null=True, db_comment='Name of the Amazon S3 bucket into which CloudTrail delivers your trail files.')
    s3_key_prefix = models.TextField(blank=True, null=True, db_comment='Specifies the Amazon S3 key prefix that comes after the name of the bucket you have designated for log file delivery.')
    sns_topic_arn = models.TextField(blank=True, null=True, db_comment='Specifies the ARN of the Amazon SNS topic that CloudTrail uses to send notifications when log files are delivered.')
    latest_cloudwatch_logs_delivery_error = models.TextField(blank=True, null=True, db_comment='Displays any CloudWatch Logs error that CloudTrail encountered when attempting to deliver logs to CloudWatch Logs.')
    latest_cloudwatch_logs_delivery_time = models.DateTimeField(blank=True, null=True, db_comment='Displays the most recent date and time when CloudTrail delivered logs to CloudWatch Logs.')
    latest_delivery_error = models.TextField(blank=True, null=True, db_comment='Displays any Amazon S3 error that CloudTrail encountered when attempting to deliver log files to the designated bucket.')
    latest_delivery_time = models.DateTimeField(blank=True, null=True, db_comment="Specifies the date and time that CloudTrail last delivered log files to an account's Amazon S3 bucket.")
    latest_digest_delivery_error = models.TextField(blank=True, null=True, db_comment='Displays any Amazon S3 error that CloudTrail encountered when attempting to deliver a digest file to the designated bucket.')
    latest_digest_delivery_time = models.DateTimeField(blank=True, null=True, db_comment="Specifies the date and time that CloudTrail last delivered a digest file to an account's Amazon S3 bucket.")
    latest_notification_error = models.TextField(blank=True, null=True, db_comment='Displays any Amazon SNS error that CloudTrail encountered when attempting to send a notification.')
    latest_notification_time = models.DateTimeField(blank=True, null=True, db_comment="Specifies the date and time of the most recent Amazon SNS notification that CloudTrail has written a new log file to an account's Amazon S3 bucket.")
    start_logging_time = models.DateTimeField(blank=True, null=True, db_comment='Specifies the most recent date and time when CloudTrail started recording API calls for an AWS account.')
    stop_logging_time = models.DateTimeField(blank=True, null=True, db_comment='Specifies the most recent date and time when CloudTrail stopped recording API calls for an AWS account.')
    advanced_event_selectors = models.JSONField(blank=True, null=True, db_comment='Describes the advanced event selectors that are configured for the trail.')
    event_selectors = models.JSONField(blank=True, null=True, db_comment='Describes the event selectors that are configured for the trail.')
    insight_selectors = models.JSONField(blank=True, null=True, db_comment='A JSON string that contains the insight types you want to log on a trail.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the trail.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_cloudtrail_trail'
        db_table_comment = 'AWS CloudTrail Trail'
# Unable to inspect table 'aws_cloudtrail_trail_event'
# The error was: rpc error: code = Internal desc = aws: rpc error: code = Internal desc = 'List' call for table 'aws_cloudtrail_trail_event' is missing 1 required qual: column:'log_group_name' operator: =



class AwsCloudwatchAlarm(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the alarm.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the alarm.')
    state_value = models.TextField(blank=True, null=True, db_comment='The state value for the alarm.')
    actions_enabled = models.BooleanField(blank=True, null=True, db_comment='Indicates whether actions should be executed during any changes to the alarm state.')
    alarm_configuration_updated_timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp of the last update to the alarm configuration.')
    alarm_description = models.TextField(blank=True, null=True, db_comment='The description of the alarm.')
    comparison_operator = models.TextField(blank=True, null=True, db_comment='The arithmetic operation to use when comparing the specified statistic and threshold. The specified statistic value is used as the first operand.')
    datapoints_to_alarm = models.BigIntegerField(blank=True, null=True, db_comment='The number of data points that must be breaching to trigger the alarm.')
    evaluate_low_sample_count_percentile = models.TextField(blank=True, null=True, db_comment='Used only for alarms based on percentiles.')
    evaluation_periods = models.BigIntegerField(blank=True, null=True, db_comment='The number of periods over which data is compared to the specified threshold.')
    extended_statistic = models.TextField(blank=True, null=True, db_comment='The percentile statistic for the metric associated with the alarm. Specify a value between p0.0 and p100.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric associated with the alarm, if this is an alarm based on a single metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The namespace of the metric associated with the alarm.')
    period = models.BigIntegerField(blank=True, null=True, db_comment='The period, in seconds, over which the statistic is applied.')
    state_reason = models.TextField(blank=True, null=True, db_comment='An explanation for the alarm state, in text format.')
    state_reason_data = models.TextField(blank=True, null=True, db_comment='An explanation for the alarm state, in JSON format.')
    state_updated_timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp of the last update to the alarm state.')
    statistic = models.TextField(blank=True, null=True, db_comment='The statistic for the metric associated with the alarm, other than percentile.')
    threshold = models.FloatField(blank=True, null=True, db_comment='The value to compare with the specified statistic.')
    threshold_metric_id = models.TextField(blank=True, null=True, db_comment='In an alarm based on an anomaly detection model, this is the ID of the ANOMALY_DETECTION_BAND function used as the threshold for the alarm.')
    treat_missing_data = models.TextField(blank=True, null=True, db_comment='Sets how this alarm is to handle missing data points. If this parameter is omitted, the default behavior of missing is used.')
    unit = models.TextField(blank=True, null=True, db_comment='The unit of the metric associated with the alarm.')
    alarm_actions = models.JSONField(blank=True, null=True, db_comment='The actions to execute when this alarm transitions to the ALARM state from any other state. Each action is specified as an Amazon Resource Name (ARN).')
    dimensions = models.JSONField(blank=True, null=True, db_comment='The dimensions for the metric associated with the alarm.')
    insufficient_data_actions = models.JSONField(blank=True, null=True, db_comment='The actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN).')
    metrics = models.JSONField(blank=True, null=True, db_comment='An array of MetricDataQuery structures, used in an alarm based on a metric math expression.')
    ok_actions = models.JSONField(blank=True, null=True, db_comment='The actions to execute when this alarm transitions to the OK state from any other state. Each action is specified as an Amazon Resource Name (ARN).')
    tags_src = models.JSONField(blank=True, null=True, db_comment='The list of tag keys and values associated with alarm.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_cloudwatch_alarm'
        db_table_comment = 'AWS CloudWatch Alarm'
# Unable to inspect table 'aws_cloudwatch_log_event'
# The error was: rpc error: code = Internal desc = aws: rpc error: code = Internal desc = 'List' call for table 'aws_cloudwatch_log_event' is missing 1 required qual: column:'log_group_name' operator: =



class AwsCloudwatchLogGroup(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the log group.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the log group.')
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='The creation time of the log group.')
    kms_key_id = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the CMK to use when encrypting log data.')
    metric_filter_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of metric filters.')
    retention_in_days = models.BigIntegerField(blank=True, null=True, db_comment='The number of days to retain the log events in the specified log group. Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, and 3653.')
    stored_bytes = models.BigIntegerField(blank=True, null=True, db_comment='The number of bytes stored.')
    data_protection = models.JSONField(blank=True, null=True, db_comment='Log group data protection policy information.')
    data_protection_policy = models.JSONField(blank=True, null=True, db_comment='The data protection policy document for a log group.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_cloudwatch_log_group'
        db_table_comment = 'AWS CloudWatch Log Group'


class AwsCloudwatchLogMetricFilter(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the metric filter')
    log_group_name = models.TextField(blank=True, null=True, db_comment='The name of the log group')
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='The creation time of the metric filter')
    filter_pattern = models.TextField(blank=True, null=True, db_comment='A symbolic description of how CloudWatch Logs should interpret the data in each log event')
    metric_transformation_name = models.TextField(blank=True, null=True, db_comment='The name of the CloudWatch metric')
    metric_transformation_namespace = models.TextField(blank=True, null=True, db_comment='A custom namespace to contain metric in CloudWatch. Namespaces are used to group together metrics that are similar')
    metric_transformation_value = models.TextField(blank=True, null=True, db_comment='The value to publish to the CloudWatch metric when a filter pattern matches a log event')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_cloudwatch_log_metric_filter'
        db_table_comment = 'AWS CloudWatch Log Metric Filter'


class AwsCloudwatchLogResourcePolicy(models.Model):
    policy_name = models.TextField(blank=True, null=True, db_comment='The name of the resource policy.')
    last_updated_time = models.DateTimeField(blank=True, null=True, db_comment='Timestamp showing when this policy was last updated.')
    policy = models.JSONField(blank=True, null=True, db_comment='The details of the policy.')
    policy_std = models.JSONField(blank=True, null=True, db_comment='Contains the policy document in a canonical form for easier searching.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_cloudwatch_log_resource_policy'
        db_table_comment = 'AWS CloudWatch Log Resource Policy'


class AwsCloudwatchLogStream(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the log stream.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the log stream.')
    log_group_name = models.TextField(blank=True, null=True, db_comment='The name of the log group, in which the log stream belongs.')
    log_stream_name_prefix = models.TextField(blank=True, null=True, db_comment='The prefix to match the name of the log stream.')
    descending = models.BooleanField(blank=True, null=True, db_comment='If the value is true, results are returned in descending order. If the value is to false, results are returned in ascending order. The default value is false.')
    order_by = models.TextField(blank=True, null=True, db_comment='If the value is LogStreamName, the results are ordered by log stream name. If the value is LastEventTime, the results are ordered by the event time. The default value is LogStreamName. If you order the results by event time, you cannot specify the logStreamNamePrefix parameter. LastEventTimestamp represents the time of the most recent log event in the log stream in CloudWatch Logs.')
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='The creation time of the log stream.')
    first_event_timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time of the first event.')
    last_event_timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time of the most recent log event in the log stream in CloudWatch Logs.')
    last_ingestion_time = models.DateTimeField(blank=True, null=True, db_comment='Specifies the last log ingestion time.')
    upload_sequence_token = models.TextField(blank=True, null=True, db_comment='Specifies the log upload sequence token.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_cloudwatch_log_stream'
        db_table_comment = 'AWS CloudWatch Log Stream'


class AwsCloudwatchLogSubscriptionFilter(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the subscription filter.')
    log_group_name = models.TextField(blank=True, null=True, db_comment='The name of the log group.')
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='The creation time of the subscription filter.')
    destination_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the destination.')
    distribution = models.TextField(blank=True, null=True, db_comment='The method used to distribute log data to the destination.')
    filter_pattern = models.TextField(blank=True, null=True, db_comment='A symbolic description of how CloudWatch Logs should interpret the data in each log event.')
    role_arn = models.TextField(blank=True, null=True, db_comment='The role associated to the filter.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_cloudwatch_log_subscription_filter'
        db_table_comment = 'AWS CloudWatch Log Subscription Filter'


class AwsCloudwatchMetric(models.Model):
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The namespace for the metric.')
    dimensions_filter = models.JSONField(blank=True, null=True, db_comment='The dimensions to filter against.')
    dimensions = models.JSONField(blank=True, null=True, db_comment='The dimensions for the metric.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_cloudwatch_metric'
        db_table_comment = 'AWS CloudWatch Metric'

class AwsCodeartifactDomain(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the domain.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the domain.')
    asset_size_bytes = models.BigIntegerField(blank=True, null=True, db_comment='The total size of all assets in the domain.')
    created_time = models.DateTimeField(blank=True, null=True, db_comment='A timestamp that contains the date and time the domain was created.')
    encryption_key = models.TextField(blank=True, null=True, db_comment='The key used to encrypt the domain.')
    owner = models.TextField(blank=True, null=True, db_comment='The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces.')
    repository_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of repositories in the domain.')
    s3_bucket_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the Amazon S3 bucket that is used to store package assets in the domain.')
    status = models.TextField(blank=True, null=True, db_comment='A string that contains the status of the domain.')
    policy = models.JSONField(blank=True, null=True, db_comment='An CodeArtifact resource policy that contains a resource ARN, document details, and a revision.')
    policy_std = models.JSONField(blank=True, null=True, db_comment='Contains the contents of the resource-based policy in a canonical form for easier searching.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_codeartifact_domain'
        db_table_comment = 'AWS Code Artifact Domain'


class AwsCodeartifactRepository(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the repository.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the repository.')
    domain_name = models.TextField(blank=True, null=True, db_comment='The name of the domain that contains the repository.')
    administrator_account = models.TextField(blank=True, null=True, db_comment='The Amazon Web Services account ID that manages the repository.')
    description = models.TextField(blank=True, null=True, db_comment='The description of the repository.')
    domain_owner = models.TextField(blank=True, null=True, db_comment='The 12-digit account number of the Amazon Web Services account that owns the repository. It does not include dashes or spaces.')
    external_connections = models.JSONField(blank=True, null=True, db_comment='An array of external connections associated with the repository.')
    policy = models.JSONField(blank=True, null=True, db_comment='An CodeArtifact resource policy that contains a resource ARN, document details, and a revision.')
    policy_std = models.JSONField(blank=True, null=True, db_comment='Contains the contents of the resource-based policy in a canonical form for easier searching.')
    repository_endpoint = models.JSONField(blank=True, null=True, db_comment='A string that specifies the URL of the returned endpoint.')
    upstreams = models.JSONField(blank=True, null=True, db_comment='A list of upstream repositories to associate with the repository.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_codeartifact_repository'
        db_table_comment = 'AWS CodeArtifact Repository'


class AwsCodebuildBuild(models.Model):
    arn = models.TextField(blank=True, null=True, db_comment='The ARN of the build.')
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The unique identifier of the  build.')
    build_batch_arn = models.TextField(blank=True, null=True, db_comment='The ARN of the batch build that this build is a member of, if applicable.')
    build_complete = models.BooleanField(blank=True, null=True, db_comment='Indicates if the build is complete.')
    build_number = models.BigIntegerField(blank=True, null=True, db_comment='The number of the build.')
    build_status = models.JSONField(blank=True, null=True, db_comment='The status of the build.')
    current_phase = models.TextField(blank=True, null=True, db_comment='The current build phase.')
    encryption_key = models.TextField(blank=True, null=True, db_comment='The Key Management Service customer master key (CMK) to be used for encrypting the build output artifacts.')
    end_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time that the build process ended, expressed in Unix time format.')
    initiator = models.TextField(blank=True, null=True, db_comment='The entity that started the build.')
    project_name = models.TextField(blank=True, null=True, db_comment='The name of the build project.')
    queued_timeout_in_minutes = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the amount of time, in minutes, that a build is allowed to be queued before it times out.')
    source_version = models.TextField(blank=True, null=True, db_comment='The identifier of the version of the source code to be built.')
    start_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time that the build started.')
    timeout_in_minutes = models.BigIntegerField(blank=True, null=True, db_comment='How long, in minutes, for CodeBuild to wait before timing out this build if it does not get marked as completed.')
    resolved_source_version = models.TextField(blank=True, null=True, db_comment="The identifier of the resolved version of this build's source code.")
    artifacts = models.JSONField(blank=True, null=True, db_comment='A BuildArtifacts object the defines the build artifacts for this build.')
    cache = models.JSONField(blank=True, null=True, db_comment='Information about the cache for the build.')
    debug_session = models.JSONField(blank=True, null=True, db_comment='Contains information about the debug session for this build.')
    environment = models.JSONField(blank=True, null=True, db_comment='Information about the build environment for this build project.')
    exported_environment_variables = models.JSONField(blank=True, null=True, db_comment='A list of exported environment variables for this build.')
    file_system_locations = models.JSONField(blank=True, null=True, db_comment='An array of ProjectFileSystemLocation objects for a CodeBuild build project.')
    logs = models.JSONField(blank=True, null=True, db_comment="Information about the build's logs in CloudWatch Logs.")
    network_interfaces = models.JSONField(blank=True, null=True, db_comment='Describes a network interface.')
    phases = models.JSONField(blank=True, null=True, db_comment='Information about all previous build phases that are complete and information about any current build phase that is not yet complete.')
    report_arns = models.JSONField(blank=True, null=True, db_comment="An array of the ARNs associated with this build's reports.")
    secondary_artifacts = models.JSONField(blank=True, null=True, db_comment='An array of BuildArtifacts objects the define the build artifacts for this build.')
    secondary_source_versions = models.JSONField(blank=True, null=True, db_comment='An array of ProjectSourceVersion objects.')
    secondary_sources = models.JSONField(blank=True, null=True, db_comment='An array of ProjectSource objects that define the sources for the build.')
    source = models.JSONField(blank=True, null=True, db_comment='Information about the build input source code for the build project.')
    vpc_config = models.JSONField(blank=True, null=True, db_comment='Information about the VPC configuration that CodeBuild accesses.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_codebuild_build'
        db_table_comment = 'AWS CodeBuild Build'


class AwsCodebuildProject(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the build project.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the build project.')
    description = models.TextField(blank=True, null=True, db_comment='A description that makes the build project easy to identify.')
    concurrent_build_limit = models.BigIntegerField(blank=True, null=True, db_comment='The maximum number of concurrent builds that are allowed for this project.')
    created = models.DateTimeField(blank=True, null=True, db_comment='When the build project was created, expressed in Unix time format.')
    last_modified = models.DateTimeField(blank=True, null=True, db_comment="When the build project's settings were last modified, expressed in Unix time format.")
    encryption_key = models.TextField(blank=True, null=True, db_comment='The AWS Key Management Service (AWS KMS) customer master key (CMK) to be.')
    queued_timeout_in_minutes = models.BigIntegerField(blank=True, null=True, db_comment='The number of minutes a build is allowed to be queued before it times out.')
    service_role = models.TextField(blank=True, null=True, db_comment='The ARN of the AWS Identity and Access Management (IAM) role that enables AWS CodeBuild to interact with dependent AWS services on behalf of the AWS account.')
    source_version = models.TextField(blank=True, null=True, db_comment='A version of the build input to be built for this project.')
    timeout_in_minutes = models.BigIntegerField(blank=True, null=True, db_comment='How long, in minutes, from 5 to 480 (8 hours), for AWS CodeBuild to wait before timing out any related build that did not get marked as completed.')
    artifacts = models.JSONField(blank=True, null=True, db_comment='Information about the build output artifacts for the build project.')
    badge = models.JSONField(blank=True, null=True, db_comment='Information about the build badge for the build project.')
    build_batch_config = models.JSONField(blank=True, null=True, db_comment='A ProjectBuildBatchConfig object that defines the batch build options for the project.')
    cache = models.JSONField(blank=True, null=True, db_comment='Information about the cache for the build project.')
    environment = models.JSONField(blank=True, null=True, db_comment='Information about the build environment for this build project.')
    file_system_locations = models.JSONField(blank=True, null=True, db_comment='An array of ProjectFileSystemLocation objects for a CodeBuild build project.')
    logs_config = models.JSONField(blank=True, null=True, db_comment='Information about logs for the build project. A project can create logs in Amazon CloudWatch Logs, an S3 bucket or both.')
    project_visibility = models.TextField(blank=True, null=True, db_comment='Visibility of the build project.')
    secondary_artifacts = models.JSONField(blank=True, null=True, db_comment='An array of ProjectArtifacts objects.')
    secondary_source_versions = models.JSONField(blank=True, null=True, db_comment='An array of ProjectSource objects.')
    secondary_sources = models.JSONField(blank=True, null=True, db_comment='An array of ProjectSource objects.')
    source = models.JSONField(blank=True, null=True, db_comment='Information about the build input source code for this build project.')
    vpc_config = models.JSONField(blank=True, null=True, db_comment='Information about the VPC configuration that AWS CodeBuild accesses.')
    webhook = models.JSONField(blank=True, null=True, db_comment=' Information about a webhook that connects repository events to a build project in AWS CodeBuild.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tag key and value pairs associated with this build project.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_codebuild_project'
        db_table_comment = 'AWS CodeBuild Project'


class AwsCodebuildSourceCredential(models.Model):
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the token.')
    auth_type = models.TextField(blank=True, null=True, db_comment='The type of authentication used by the credentials. Possible values are: OAUTH, BASIC_AUTH, or PERSONAL_ACCESS_TOKEN.')
    server_type = models.TextField(blank=True, null=True, db_comment='The type of source provider. Possible values are: GITHUB, GITHUB_ENTERPRISE, or BITBUCKET.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_codebuild_source_credential'
        db_table_comment = 'AWS CodeBuild Source Credential'


class AwsCodecommitRepository(models.Model):
    repository_name = models.TextField(blank=True, null=True, db_comment="The repository's name.")
    repository_id = models.TextField(blank=True, null=True, db_comment='The ID of the repository.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the repository.')
    description = models.TextField(blank=True, null=True, db_comment='A comment or description about the repository.')
    creation_date = models.DateTimeField(blank=True, null=True, db_comment='The date and time the repository was created.')
    clone_url_http = models.TextField(blank=True, null=True, db_comment='The URL to use for cloning the repository over HTTPS.')
    clone_url_ssh = models.TextField(blank=True, null=True, db_comment='The URL to use for cloning the repository over SSH.')
    default_branch = models.TextField(blank=True, null=True, db_comment="The repository's default branch name.")
    last_modified_date = models.DateTimeField(blank=True, null=True, db_comment='The date and time the repository was last modified.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_codecommit_repository'
        db_table_comment = 'AWS CodeCommit Repository'


class AwsCodedeployApp(models.Model):
    application_id = models.TextField(blank=True, null=True, db_comment='The application ID.')
    application_name = models.TextField(blank=True, null=True, db_comment='The application name.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the application.')
    compute_platform = models.TextField(blank=True, null=True, db_comment='The destination platform type for deployment of the application (Lambda or Server).')
    create_time = models.DateTimeField(blank=True, null=True, db_comment='The time at which the application was created.')
    github_account_name = models.TextField(blank=True, null=True, db_comment='The name for a connection to a GitHub account.')
    linked_to_github = models.BooleanField(blank=True, null=True, db_comment='True if the user has authenticated with GitHub for the specified application. Otherwise, false.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tag key and value pairs associated with this application.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_codedeploy_app'
        db_table_comment = 'AWS CodeDeploy Application'


class AwsCodedeployDeploymentConfig(models.Model):
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the application.')
    create_time = models.DateTimeField(blank=True, null=True, db_comment='The time at which the deployment configuration was created.')
    deployment_config_id = models.TextField(blank=True, null=True, db_comment='The deployment configuration ID.')
    deployment_config_name = models.TextField(blank=True, null=True, db_comment='The deployment configuration name.')
    compute_platform = models.JSONField(blank=True, null=True, db_comment='The destination platform type for the deployment (Lambda, Server, or ECS).')
    minimum_healthy_hosts = models.JSONField(blank=True, null=True, db_comment='Information about the number or percentage of minimum healthy instances.')
    traffic_routing_config = models.JSONField(blank=True, null=True, db_comment='The configuration that specifies how the deployment traffic is routed. Used for deployments with a Lambda or Amazon ECS compute platform only.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_codedeploy_deployment_config'
        db_table_comment = 'AWS CodeDeploy Deployment Config'


class AwsCodedeployDeploymentGroup(models.Model):
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the application.')
    application_name = models.TextField(blank=True, null=True, db_comment='The application name.')
    deployment_config_name = models.TextField(blank=True, null=True, db_comment='The deployment configuration name.')
    deployment_group_id = models.TextField(blank=True, null=True, db_comment='The deployment group ID.')
    deployment_group_name = models.TextField(blank=True, null=True, db_comment='The deployment group name.')
    service_role_arn = models.TextField(blank=True, null=True, db_comment='A service role Amazon Resource Name (ARN) that grants CodeDeploy permission to make calls to Amazon Web Services services on your behalf.')
    alarm_configuration = models.JSONField(blank=True, null=True, db_comment='A list of alarms associated with the deployment group.')
    auto_rollback_configuration = models.JSONField(blank=True, null=True, db_comment='Information about the automatic rollback configuration associated with the deployment group.')
    auto_scaling_groups = models.JSONField(blank=True, null=True, db_comment='A list of associated Auto Scaling groups.')
    blue_green_deployment_configuration = models.JSONField(blank=True, null=True, db_comment='Information about blue/green deployment options for a deployment group.')
    compute_platform = models.JSONField(blank=True, null=True, db_comment='The destination platform type for the deployment (Lambda, Server, or ECS).')
    deployment_style = models.JSONField(blank=True, null=True, db_comment='Information about the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer.')
    ec2_tag_filters = models.JSONField(blank=True, null=True, db_comment='The Amazon EC2 tags on which to filter. The deployment group includes EC2 instances with any of the specified tags.')
    ec2_tag_set = models.JSONField(blank=True, null=True, db_comment='Information about groups of tags applied to an Amazon EC2 instance.')
    ecs_services = models.JSONField(blank=True, null=True, db_comment='The target Amazon ECS services in the deployment group.')
    last_attempted_deployment = models.JSONField(blank=True, null=True, db_comment='Information about the most recent attempted deployment to the deployment group.')
    last_successful_deployment = models.JSONField(blank=True, null=True, db_comment='Information about the most recent successful deployment to the deployment group.')
    load_balancer_info = models.JSONField(blank=True, null=True, db_comment='Information about the load balancer to use in a deployment.')
    on_premises_instance_tag_filters = models.JSONField(blank=True, null=True, db_comment='The on-premises instance tags on which to filter.')
    on_premises_tag_set = models.JSONField(blank=True, null=True, db_comment='Information about groups of tags applied to an on-premises instance.')
    outdated_instances_strategy = models.JSONField(blank=True, null=True, db_comment='Indicates what happens when new Amazon EC2 instances are launched mid-deployment and do not receive the deployed application revision.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags associated with deployment group.')
    target_revision = models.JSONField(blank=True, null=True, db_comment="Information about the deployment group's target revision, including type and location.")
    trigger_configurations = models.JSONField(blank=True, null=True, db_comment='Information about triggers associated with the deployment group.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_codedeploy_deployment_group'
        db_table_comment = 'AWS CodeDeploy Deployment Group'


class AwsCodepipelinePipeline(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the pipeline.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the pipeline.')
    created_at = models.DateTimeField(blank=True, null=True, db_comment='The date and time the pipeline was created.')
    role_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for AWS CodePipeline to use to either perform actions with no actionRoleArn, or to use to assume roles for actions with an actionRoleArn.')
    updated_at = models.DateTimeField(blank=True, null=True, db_comment='The date and time of the last update to the pipeline.')
    version = models.BigIntegerField(blank=True, null=True, db_comment='The version number of the pipeline.')
    encryption_key = models.JSONField(blank=True, null=True, db_comment='The encryption key used to encrypt the data in the artifact store, such as an AWS Key Management Service (AWS KMS) key. If this is undefined, the default key for Amazon S3 is used.')
    artifact_stores = models.JSONField(blank=True, null=True, db_comment='A mapping of artifactStore objects and their corresponding AWS Regions. There must be an artifact store for the pipeline Region and for each cross-region action in the pipeline.')
    stages = models.JSONField(blank=True, null=True, db_comment='The stage in which to perform the action.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tag key and value pairs associated with this pipeline.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_codepipeline_pipeline'
        db_table_comment = 'AWS Codepipeline Pipeline'


class AwsCodestarNotificationRule(models.Model):
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the notification rule.')
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The unique ID of the notification rule.')
    name = models.TextField(blank=True, null=True, db_comment='The name of the notification rule.')
    resource = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the resource associated with the notification rule.')
    detail_type = models.TextField(blank=True, null=True, db_comment='The level of detail included in the notifications for this resource. BASIC will include only the contents of the event as it would appear in Amazon CloudWatch. FULL will include any supplemental information provided by AWS CodeStar Notifications and/or the service for the resource for which the notification is created.')
    status = models.TextField(blank=True, null=True, db_comment='The status of the notification rule. Valid statuses are on (sending notifications) or off (not sending notifications).')
    created_by = models.TextField(blank=True, null=True, db_comment='The name or email alias of the person who created the notification rule.')
    event_type_id = models.TextField(blank=True, null=True, db_comment='Specifies that only notification rules with the given event type enabled are returned.')
    target_address = models.TextField(blank=True, null=True, db_comment='Specifies that only notification rules with a target with the given address are returned.')
    created_timestamp = models.DateTimeField(blank=True, null=True, db_comment='The date and time the notification rule was created.')
    last_modified_timestamp = models.DateTimeField(blank=True, null=True, db_comment='The date and time the notification rule was most recently updated.')
    event_types = models.JSONField(blank=True, null=True, db_comment='A list of the event types associated with the notification rule.')
    targets = models.JSONField(blank=True, null=True, db_comment='A list of targets associated with the notification rule.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_codestar_notification_rule'
        db_table_comment = 'AWS CodeStar Notification Rule'


class AwsCognitoIdentityPool(models.Model):
    identity_pool_id = models.TextField(blank=True, null=True, db_comment='An identity pool ID in the format REGION:GUID.')
    allow_unauthenticated_identities = models.BooleanField(blank=True, null=True, db_comment='TRUE if the identity pool supports unauthenticated logins.')
    identity_pool_name = models.TextField(blank=True, null=True, db_comment='A string that you provide.')
    allow_classic_flow = models.BooleanField(blank=True, null=True, db_comment='Enables or disables the Basic (Classic) authentication flow.')
    cognito_identity_providers = models.JSONField(blank=True, null=True, db_comment='A list representing an Amazon Cognito user pool and its client ID.')
    developer_provider_name = models.TextField(blank=True, null=True, db_comment="The 'domain' by which Cognito will refer to your users.")
    open_id_connect_provider_arns = models.JSONField(blank=True, null=True, db_comment='The ARNs of the OpenID Connect providers.')
    saml_provider_arns = models.JSONField(blank=True, null=True, db_comment='An array of Amazon Resource Names (ARNs) of the SAML provider for your identity pool.')
    supported_login_providers = models.JSONField(blank=True, null=True, db_comment='Optional key:value pairs mapping provider names to provider app IDs.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_cognito_identity_pool'
        db_table_comment = 'AWS Cognito Identity Pool'


class AwsCognitoIdentityProvider(models.Model):
    provider_name = models.TextField(blank=True, null=True, db_comment='The IdP name.')
    user_pool_id = models.TextField(blank=True, null=True, db_comment='The user pool ID.')
    attribute_mapping = models.JSONField(blank=True, null=True, db_comment='A mapping of IdP attributes to standard and custom user pool attributes.')
    creation_date = models.DateTimeField(blank=True, null=True, db_comment='The date the provider was added to the user pool.')
    idp_identifiers = models.JSONField(blank=True, null=True, db_comment='A list of IdP identifiers.')
    last_modified_date = models.DateTimeField(blank=True, null=True, db_comment='The date the provider was last modified.')
    provider_details = models.JSONField(blank=True, null=True, db_comment='The IdP details.')
    provider_type = models.TextField(blank=True, null=True, db_comment='The IdP type.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_cognito_identity_provider'
        db_table_comment = 'AWS Cognito Identity Provider'


class AwsCognitoUserPool(models.Model):
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The ID of the user pool.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the user pool.')
    account_recovery_setting = models.JSONField(blank=True, null=True, db_comment='The available verified method a user can use to recover their password when they call ForgotPassword.')
    admin_create_user_config = models.JSONField(blank=True, null=True, db_comment='The configuration for AdminCreateUser requests.')
    alias_attributes = models.TextField(blank=True, null=True, db_comment='The attributes that are aliased in a user pool.')
    auto_verified_attributes = models.TextField(blank=True, null=True, db_comment='The attributes that are auto-verified in a user pool.')
    creation_date = models.DateTimeField(blank=True, null=True, db_comment='The date the user pool was created.')
    custom_domain = models.TextField(blank=True, null=True, db_comment='A custom domain name that you provide to Amazon Cognito.')
    deletion_protection = models.TextField(blank=True, null=True, db_comment='When active, DeletionProtection prevents accidental deletion of your user pool.')
    device_configuration = models.JSONField(blank=True, null=True, db_comment='The device-remembering configuration for a user pool.')
    domain = models.TextField(blank=True, null=True, db_comment='The domain prefix, if the user pool has a domain associated with it.')
    email_configuration = models.JSONField(blank=True, null=True, db_comment='The email configuration of your user pool.')
    estimated_number_of_users = models.BigIntegerField(blank=True, null=True, db_comment='A number estimating the size of the user pool.')
    lambda_config = models.JSONField(blank=True, null=True, db_comment='The Lambda triggers associated with the user pool.')
    last_modified_date = models.DateTimeField(blank=True, null=True, db_comment='The date the user pool was last modified.')
    mfa_configuration = models.TextField(blank=True, null=True, db_comment='Multi-Factor Authentication (MFA) configuration for the User Pool.')
    name = models.TextField(blank=True, null=True, db_comment='The name of the Cognito User Pool.')
    policies = models.JSONField(blank=True, null=True, db_comment='The policies associated with the user pool.')
    schema_attributes = models.JSONField(blank=True, null=True, db_comment='A container with the schema attributes of a user pool.')
    sms_authentication_message = models.TextField(blank=True, null=True, db_comment='The contents of the SMS authentication message.')
    sms_configuration = models.JSONField(blank=True, null=True, db_comment='The SMS configuration with the settings that your Amazon Cognito user pool must use to send an SMS message from your Amazon Web Services account through Amazon Simple Notification Service.')
    sms_configuration_failure = models.TextField(blank=True, null=True, db_comment="The reason why the SMS configuration can't send the messages to your users.")
    status = models.TextField(blank=True, null=True, db_comment='The status of a user pool.')
    user_attribute_update_settings = models.JSONField(blank=True, null=True, db_comment='The settings for updates to user attributes.')
    user_pool_add_ons = models.JSONField(blank=True, null=True, db_comment='The user pool add-ons.')
    username_attributes = models.JSONField(blank=True, null=True, db_comment='Specifies whether a user can use an email address or phone number as a username when they sign up.')
    username_configuration = models.JSONField(blank=True, null=True, db_comment='Case sensitivity of the username input for the selected sign-in option.')
    verification_message_template = models.JSONField(blank=True, null=True, db_comment='The template for verification messages.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_cognito_user_pool'
        db_table_comment = 'AWS Cognito User Pool'


class AwsConfigAggregateAuthorization(models.Model):
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the aggregation object.')
    authorized_account_id = models.TextField(blank=True, null=True, db_comment='The 12-digit account ID of the account authorized to aggregate data.')
    authorized_aws_region = models.TextField(blank=True, null=True, db_comment='The region authorized to collect aggregated data.')
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='The time stamp when the aggregation authorization was created.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags attached to the Cluster.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_config_aggregate_authorization'
        db_table_comment = 'AWS Config Aggregate Authorization'


class AwsConfigConfigurationRecorder(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the recorder. By default, AWS Config automatically assigns the name default when creating the configuration recorder.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the configuration recorder.')
    recording_group = models.JSONField(blank=True, null=True, db_comment='Specifies the types of AWS resources for which AWS Config records configuration changes.')
    role_arn = models.TextField(blank=True, null=True, db_comment='Amazon Resource Name (ARN) of the IAM role used to describe the AWS resources associated with the account.')
    status_recording = models.BooleanField(blank=True, null=True, db_comment='Specifies whether or not the recorder is currently recording.')
    status = models.JSONField(blank=True, null=True, db_comment='The current status of the configuration recorder.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_config_configuration_recorder'
        db_table_comment = 'AWS Config Configuration Recorder'


class AwsConfigConformancePack(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='Name of the conformance pack.')
    arn = models.TextField(blank=True, null=True, db_comment='Amazon Resource Name (ARN) of the conformance pack.')
    conformance_pack_id = models.TextField(blank=True, null=True, db_comment='ID of the conformance pack.')
    created_by = models.TextField(blank=True, null=True, db_comment='AWS service that created the conformance pack.')
    delivery_s3_bucket = models.TextField(blank=True, null=True, db_comment='Amazon S3 bucket where AWS Config stores conformance pack templates.')
    delivery_s3_key_prefix = models.TextField(blank=True, null=True, db_comment='The prefix for the Amazon S3 delivery bucket.')
    last_update_requested_time = models.DateTimeField(blank=True, null=True, db_comment='Last update to the conformance pack.')
    input_parameters = models.JSONField(blank=True, null=True, db_comment='A list of ConformancePackInputParameter objects.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_config_conformance_pack'
        db_table_comment = 'AWS Config Conformance Pack'


class AwsConfigRetentionConfiguration(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the retention configuration object.')
    retention_period_in_days = models.BigIntegerField(blank=True, null=True, db_comment='Number of days Config stores your historical information.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_config_retention_configuration'
        db_table_comment = 'AWS Config Retention Configuration'


class AwsConfigRule(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name that you assign to the AWS Config rule.')
    rule_id = models.TextField(blank=True, null=True, db_comment='The ID of the AWS Config rule.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the AWS Config rule.')
    rule_state = models.TextField(blank=True, null=True, db_comment='It indicate the evaluation status for the AWS Config rule.')
    created_by = models.TextField(blank=True, null=True, db_comment='Service principal name of the service that created the rule.')
    description = models.TextField(blank=True, null=True, db_comment='The description that you provide for the AWS Config rule.')
    maximum_execution_frequency = models.TextField(blank=True, null=True, db_comment='The maximum frequency with which AWS Config runs evaluations for a rule.')
    compliance_by_config_rule = models.JSONField(blank=True, null=True, db_comment='The compliance information of the config rule.')
    evaluation_modes = models.JSONField(blank=True, null=True, db_comment='The modes the Config rule can be evaluated in. The valid values are distinct objects. By default, the value is Detective evaluation mode only.')
    input_parameters = models.JSONField(blank=True, null=True, db_comment='A string, in JSON format, that is passed to the AWS Config rule Lambda function.')
    scope = models.JSONField(blank=True, null=True, db_comment='Defines which resources can trigger an evaluation for the rule. The scope can include one or more resource types, a combination of one resource type and one resource ID, or a combination of a tag key and value. Specify a scope to constrain the resources that can trigger an evaluation for the rule. If you do not specify a scope, evaluations are triggered when any resource in the recording group changes.')
    source = models.JSONField(blank=True, null=True, db_comment='Provides the rule owner (AWS or customer), the rule identifier, and the notifications that cause the function to evaluate your AWS resources.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the rule.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_config_rule'
        db_table_comment = 'AWS Config Rule'


class AwsCostByAccountDaily(models.Model):
    linked_account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID.')
    period_start = models.DateTimeField(blank=True, null=True, db_comment='Start timestamp for this cost metric.')
    period_end = models.DateTimeField(blank=True, null=True, db_comment='End timestamp for this cost metric.')
    estimated = models.BooleanField(blank=True, null=True, db_comment='Whether the result is estimated.')
    blended_cost_amount = models.FloatField(blank=True, null=True, db_comment='This cost metric reflects the average cost of usage across the consolidated billing family. If you use the consolidated billing feature in AWS Organizations, you can view costs using blended rates.')
    blended_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for blended costs.')
    unblended_cost_amount = models.FloatField(blank=True, null=True, db_comment='Unblended costs represent your usage costs on the day they are charged to you. In finance terms, they represent your costs on a cash basis of accounting.')
    unblended_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for unblended costs.')
    net_unblended_cost_amount = models.FloatField(blank=True, null=True, db_comment='This cost metric reflects the unblended cost after discounts.')
    net_unblended_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for net unblended costs.')
    amortized_cost_amount = models.FloatField(blank=True, null=True, db_comment="This cost metric reflects the effective cost of the upfront and monthly reservation fees spread across the billing period. By default, Cost Explorer shows the fees for Reserved Instances as a spike on the day that you're charged, but if you choose to show costs as amortized costs, the costs are amortized over the billing period. This means that the costs are broken out into the effective daily rate. AWS estimates your amortized costs by combining your unblended costs with the amortized portion of your upfront and recurring reservation fees.")
    amortized_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for amortized costs.')
    net_amortized_cost_amount = models.FloatField(blank=True, null=True, db_comment='This cost metric amortizes the upfront and monthly reservation fees while including discounts such as RI volume discounts.')
    net_amortized_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for net amortized costs.')
    usage_quantity_amount = models.FloatField(blank=True, null=True, db_comment="The amount of usage that you incurred. NOTE: If you return the UsageQuantity metric, the service aggregates all usage numbers without taking into account the units. For example, if you aggregate usageQuantity across all of Amazon EC2, the results aren't meaningful because Amazon EC2 compute hours and data transfer are measured in different units (for example, hours vs. GB).")
    usage_quantity_unit = models.TextField(blank=True, null=True, db_comment='Unit type for usage quantity.')
    normalized_usage_amount = models.FloatField(blank=True, null=True, db_comment='The amount of usage that you incurred, in normalized units, for size-flexible RIs. The NormalizedUsageAmount is equal to UsageAmount multiplied by NormalizationFactor.')
    normalized_usage_unit = models.TextField(blank=True, null=True, db_comment='Unit type for normalized usage.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_cost_by_account_daily'
        db_table_comment = 'AWS Cost Explorer - Cost by Linked Account (Daily)'


class AwsCostByAccountMonthly(models.Model):
    linked_account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID.')
    period_start = models.DateTimeField(blank=True, null=True, db_comment='Start timestamp for this cost metric.')
    period_end = models.DateTimeField(blank=True, null=True, db_comment='End timestamp for this cost metric.')
    estimated = models.BooleanField(blank=True, null=True, db_comment='Whether the result is estimated.')
    blended_cost_amount = models.FloatField(blank=True, null=True, db_comment='This cost metric reflects the average cost of usage across the consolidated billing family. If you use the consolidated billing feature in AWS Organizations, you can view costs using blended rates.')
    blended_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for blended costs.')
    unblended_cost_amount = models.FloatField(blank=True, null=True, db_comment='Unblended costs represent your usage costs on the day they are charged to you. In finance terms, they represent your costs on a cash basis of accounting.')
    unblended_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for unblended costs.')
    net_unblended_cost_amount = models.FloatField(blank=True, null=True, db_comment='This cost metric reflects the unblended cost after discounts.')
    net_unblended_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for net unblended costs.')
    amortized_cost_amount = models.FloatField(blank=True, null=True, db_comment="This cost metric reflects the effective cost of the upfront and monthly reservation fees spread across the billing period. By default, Cost Explorer shows the fees for Reserved Instances as a spike on the day that you're charged, but if you choose to show costs as amortized costs, the costs are amortized over the billing period. This means that the costs are broken out into the effective daily rate. AWS estimates your amortized costs by combining your unblended costs with the amortized portion of your upfront and recurring reservation fees.")
    amortized_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for amortized costs.')
    net_amortized_cost_amount = models.FloatField(blank=True, null=True, db_comment='This cost metric amortizes the upfront and monthly reservation fees while including discounts such as RI volume discounts.')
    net_amortized_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for net amortized costs.')
    usage_quantity_amount = models.FloatField(blank=True, null=True, db_comment="The amount of usage that you incurred. NOTE: If you return the UsageQuantity metric, the service aggregates all usage numbers without taking into account the units. For example, if you aggregate usageQuantity across all of Amazon EC2, the results aren't meaningful because Amazon EC2 compute hours and data transfer are measured in different units (for example, hours vs. GB).")
    usage_quantity_unit = models.TextField(blank=True, null=True, db_comment='Unit type for usage quantity.')
    normalized_usage_amount = models.FloatField(blank=True, null=True, db_comment='The amount of usage that you incurred, in normalized units, for size-flexible RIs. The NormalizedUsageAmount is equal to UsageAmount multiplied by NormalizationFactor.')
    normalized_usage_unit = models.TextField(blank=True, null=True, db_comment='Unit type for normalized usage.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_cost_by_account_monthly'
        db_table_comment = 'AWS Cost Explorer - Cost by Linked Account (Monthly)'


class AwsCostByRecordTypeDaily(models.Model):
    linked_account_id = models.TextField(blank=True, null=True, db_comment='The linked AWS Account ID.')
    record_type = models.TextField(blank=True, null=True, db_comment='The different types of charges such as RI fees, usage, costs, tax refunds, and credits.')
    period_start = models.DateTimeField(blank=True, null=True, db_comment='Start timestamp for this cost metric.')
    period_end = models.DateTimeField(blank=True, null=True, db_comment='End timestamp for this cost metric.')
    estimated = models.BooleanField(blank=True, null=True, db_comment='Whether the result is estimated.')
    blended_cost_amount = models.FloatField(blank=True, null=True, db_comment='This cost metric reflects the average cost of usage across the consolidated billing family. If you use the consolidated billing feature in AWS Organizations, you can view costs using blended rates.')
    blended_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for blended costs.')
    unblended_cost_amount = models.FloatField(blank=True, null=True, db_comment='Unblended costs represent your usage costs on the day they are charged to you. In finance terms, they represent your costs on a cash basis of accounting.')
    unblended_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for unblended costs.')
    net_unblended_cost_amount = models.FloatField(blank=True, null=True, db_comment='This cost metric reflects the unblended cost after discounts.')
    net_unblended_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for net unblended costs.')
    amortized_cost_amount = models.FloatField(blank=True, null=True, db_comment="This cost metric reflects the effective cost of the upfront and monthly reservation fees spread across the billing period. By default, Cost Explorer shows the fees for Reserved Instances as a spike on the day that you're charged, but if you choose to show costs as amortized costs, the costs are amortized over the billing period. This means that the costs are broken out into the effective daily rate. AWS estimates your amortized costs by combining your unblended costs with the amortized portion of your upfront and recurring reservation fees.")
    amortized_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for amortized costs.')
    net_amortized_cost_amount = models.FloatField(blank=True, null=True, db_comment='This cost metric amortizes the upfront and monthly reservation fees while including discounts such as RI volume discounts.')
    net_amortized_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for net amortized costs.')
    usage_quantity_amount = models.FloatField(blank=True, null=True, db_comment="The amount of usage that you incurred. NOTE: If you return the UsageQuantity metric, the service aggregates all usage numbers without taking into account the units. For example, if you aggregate usageQuantity across all of Amazon EC2, the results aren't meaningful because Amazon EC2 compute hours and data transfer are measured in different units (for example, hours vs. GB).")
    usage_quantity_unit = models.TextField(blank=True, null=True, db_comment='Unit type for usage quantity.')
    normalized_usage_amount = models.FloatField(blank=True, null=True, db_comment='The amount of usage that you incurred, in normalized units, for size-flexible RIs. The NormalizedUsageAmount is equal to UsageAmount multiplied by NormalizationFactor.')
    normalized_usage_unit = models.TextField(blank=True, null=True, db_comment='Unit type for normalized usage.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_cost_by_record_type_daily'
        db_table_comment = 'AWS Cost Explorer - Cost by Record Type (Daily)'


class AwsCostByRecordTypeMonthly(models.Model):
    linked_account_id = models.TextField(blank=True, null=True, db_comment='The linked AWS Account ID.')
    record_type = models.TextField(blank=True, null=True, db_comment='The different types of charges such as RI fees, usage, costs, tax refunds, and credits.')
    period_start = models.DateTimeField(blank=True, null=True, db_comment='Start timestamp for this cost metric.')
    period_end = models.DateTimeField(blank=True, null=True, db_comment='End timestamp for this cost metric.')
    estimated = models.BooleanField(blank=True, null=True, db_comment='Whether the result is estimated.')
    blended_cost_amount = models.FloatField(blank=True, null=True, db_comment='This cost metric reflects the average cost of usage across the consolidated billing family. If you use the consolidated billing feature in AWS Organizations, you can view costs using blended rates.')
    blended_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for blended costs.')
    unblended_cost_amount = models.FloatField(blank=True, null=True, db_comment='Unblended costs represent your usage costs on the day they are charged to you. In finance terms, they represent your costs on a cash basis of accounting.')
    unblended_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for unblended costs.')
    net_unblended_cost_amount = models.FloatField(blank=True, null=True, db_comment='This cost metric reflects the unblended cost after discounts.')
    net_unblended_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for net unblended costs.')
    amortized_cost_amount = models.FloatField(blank=True, null=True, db_comment="This cost metric reflects the effective cost of the upfront and monthly reservation fees spread across the billing period. By default, Cost Explorer shows the fees for Reserved Instances as a spike on the day that you're charged, but if you choose to show costs as amortized costs, the costs are amortized over the billing period. This means that the costs are broken out into the effective daily rate. AWS estimates your amortized costs by combining your unblended costs with the amortized portion of your upfront and recurring reservation fees.")
    amortized_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for amortized costs.')
    net_amortized_cost_amount = models.FloatField(blank=True, null=True, db_comment='This cost metric amortizes the upfront and monthly reservation fees while including discounts such as RI volume discounts.')
    net_amortized_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for net amortized costs.')
    usage_quantity_amount = models.FloatField(blank=True, null=True, db_comment="The amount of usage that you incurred. NOTE: If you return the UsageQuantity metric, the service aggregates all usage numbers without taking into account the units. For example, if you aggregate usageQuantity across all of Amazon EC2, the results aren't meaningful because Amazon EC2 compute hours and data transfer are measured in different units (for example, hours vs. GB).")
    usage_quantity_unit = models.TextField(blank=True, null=True, db_comment='Unit type for usage quantity.')
    normalized_usage_amount = models.FloatField(blank=True, null=True, db_comment='The amount of usage that you incurred, in normalized units, for size-flexible RIs. The NormalizedUsageAmount is equal to UsageAmount multiplied by NormalizationFactor.')
    normalized_usage_unit = models.TextField(blank=True, null=True, db_comment='Unit type for normalized usage.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_cost_by_record_type_monthly'
        db_table_comment = 'AWS Cost Explorer - Cost by Record Type (Monthly)'


class AwsCostByServiceDaily(models.Model):
    service = models.TextField(blank=True, null=True, db_comment='The name of the AWS service.')
    period_start = models.DateTimeField(blank=True, null=True, db_comment='Start timestamp for this cost metric.')
    period_end = models.DateTimeField(blank=True, null=True, db_comment='End timestamp for this cost metric.')
    estimated = models.BooleanField(blank=True, null=True, db_comment='Whether the result is estimated.')
    blended_cost_amount = models.FloatField(blank=True, null=True, db_comment='This cost metric reflects the average cost of usage across the consolidated billing family. If you use the consolidated billing feature in AWS Organizations, you can view costs using blended rates.')
    blended_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for blended costs.')
    unblended_cost_amount = models.FloatField(blank=True, null=True, db_comment='Unblended costs represent your usage costs on the day they are charged to you. In finance terms, they represent your costs on a cash basis of accounting.')
    unblended_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for unblended costs.')
    net_unblended_cost_amount = models.FloatField(blank=True, null=True, db_comment='This cost metric reflects the unblended cost after discounts.')
    net_unblended_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for net unblended costs.')
    amortized_cost_amount = models.FloatField(blank=True, null=True, db_comment="This cost metric reflects the effective cost of the upfront and monthly reservation fees spread across the billing period. By default, Cost Explorer shows the fees for Reserved Instances as a spike on the day that you're charged, but if you choose to show costs as amortized costs, the costs are amortized over the billing period. This means that the costs are broken out into the effective daily rate. AWS estimates your amortized costs by combining your unblended costs with the amortized portion of your upfront and recurring reservation fees.")
    amortized_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for amortized costs.')
    net_amortized_cost_amount = models.FloatField(blank=True, null=True, db_comment='This cost metric amortizes the upfront and monthly reservation fees while including discounts such as RI volume discounts.')
    net_amortized_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for net amortized costs.')
    usage_quantity_amount = models.FloatField(blank=True, null=True, db_comment="The amount of usage that you incurred. NOTE: If you return the UsageQuantity metric, the service aggregates all usage numbers without taking into account the units. For example, if you aggregate usageQuantity across all of Amazon EC2, the results aren't meaningful because Amazon EC2 compute hours and data transfer are measured in different units (for example, hours vs. GB).")
    usage_quantity_unit = models.TextField(blank=True, null=True, db_comment='Unit type for usage quantity.')
    normalized_usage_amount = models.FloatField(blank=True, null=True, db_comment='The amount of usage that you incurred, in normalized units, for size-flexible RIs. The NormalizedUsageAmount is equal to UsageAmount multiplied by NormalizationFactor.')
    normalized_usage_unit = models.TextField(blank=True, null=True, db_comment='Unit type for normalized usage.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_cost_by_service_daily'
        db_table_comment = 'AWS Cost Explorer - Cost by Service (Daily)'


class AwsCostByServiceMonthly(models.Model):
    service = models.TextField(blank=True, null=True, db_comment='The name of the AWS service.')
    period_start = models.DateTimeField(blank=True, null=True, db_comment='Start timestamp for this cost metric.')
    period_end = models.DateTimeField(blank=True, null=True, db_comment='End timestamp for this cost metric.')
    estimated = models.BooleanField(blank=True, null=True, db_comment='Whether the result is estimated.')
    blended_cost_amount = models.FloatField(blank=True, null=True, db_comment='This cost metric reflects the average cost of usage across the consolidated billing family. If you use the consolidated billing feature in AWS Organizations, you can view costs using blended rates.')
    blended_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for blended costs.')
    unblended_cost_amount = models.FloatField(blank=True, null=True, db_comment='Unblended costs represent your usage costs on the day they are charged to you. In finance terms, they represent your costs on a cash basis of accounting.')
    unblended_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for unblended costs.')
    net_unblended_cost_amount = models.FloatField(blank=True, null=True, db_comment='This cost metric reflects the unblended cost after discounts.')
    net_unblended_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for net unblended costs.')
    amortized_cost_amount = models.FloatField(blank=True, null=True, db_comment="This cost metric reflects the effective cost of the upfront and monthly reservation fees spread across the billing period. By default, Cost Explorer shows the fees for Reserved Instances as a spike on the day that you're charged, but if you choose to show costs as amortized costs, the costs are amortized over the billing period. This means that the costs are broken out into the effective daily rate. AWS estimates your amortized costs by combining your unblended costs with the amortized portion of your upfront and recurring reservation fees.")
    amortized_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for amortized costs.')
    net_amortized_cost_amount = models.FloatField(blank=True, null=True, db_comment='This cost metric amortizes the upfront and monthly reservation fees while including discounts such as RI volume discounts.')
    net_amortized_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for net amortized costs.')
    usage_quantity_amount = models.FloatField(blank=True, null=True, db_comment="The amount of usage that you incurred. NOTE: If you return the UsageQuantity metric, the service aggregates all usage numbers without taking into account the units. For example, if you aggregate usageQuantity across all of Amazon EC2, the results aren't meaningful because Amazon EC2 compute hours and data transfer are measured in different units (for example, hours vs. GB).")
    usage_quantity_unit = models.TextField(blank=True, null=True, db_comment='Unit type for usage quantity.')
    normalized_usage_amount = models.FloatField(blank=True, null=True, db_comment='The amount of usage that you incurred, in normalized units, for size-flexible RIs. The NormalizedUsageAmount is equal to UsageAmount multiplied by NormalizationFactor.')
    normalized_usage_unit = models.TextField(blank=True, null=True, db_comment='Unit type for normalized usage.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_cost_by_service_monthly'
        db_table_comment = 'AWS Cost Explorer - Cost by Service (Monthly)'


class AwsCostByServiceUsageTypeDaily(models.Model):
    service = models.TextField(blank=True, null=True, db_comment='The name of the AWS service.')
    usage_type = models.TextField(blank=True, null=True, db_comment='The usage type of this metric.')
    period_start = models.DateTimeField(blank=True, null=True, db_comment='Start timestamp for this cost metric.')
    period_end = models.DateTimeField(blank=True, null=True, db_comment='End timestamp for this cost metric.')
    estimated = models.BooleanField(blank=True, null=True, db_comment='Whether the result is estimated.')
    blended_cost_amount = models.FloatField(blank=True, null=True, db_comment='This cost metric reflects the average cost of usage across the consolidated billing family. If you use the consolidated billing feature in AWS Organizations, you can view costs using blended rates.')
    blended_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for blended costs.')
    unblended_cost_amount = models.FloatField(blank=True, null=True, db_comment='Unblended costs represent your usage costs on the day they are charged to you. In finance terms, they represent your costs on a cash basis of accounting.')
    unblended_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for unblended costs.')
    net_unblended_cost_amount = models.FloatField(blank=True, null=True, db_comment='This cost metric reflects the unblended cost after discounts.')
    net_unblended_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for net unblended costs.')
    amortized_cost_amount = models.FloatField(blank=True, null=True, db_comment="This cost metric reflects the effective cost of the upfront and monthly reservation fees spread across the billing period. By default, Cost Explorer shows the fees for Reserved Instances as a spike on the day that you're charged, but if you choose to show costs as amortized costs, the costs are amortized over the billing period. This means that the costs are broken out into the effective daily rate. AWS estimates your amortized costs by combining your unblended costs with the amortized portion of your upfront and recurring reservation fees.")
    amortized_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for amortized costs.')
    net_amortized_cost_amount = models.FloatField(blank=True, null=True, db_comment='This cost metric amortizes the upfront and monthly reservation fees while including discounts such as RI volume discounts.')
    net_amortized_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for net amortized costs.')
    usage_quantity_amount = models.FloatField(blank=True, null=True, db_comment="The amount of usage that you incurred. NOTE: If you return the UsageQuantity metric, the service aggregates all usage numbers without taking into account the units. For example, if you aggregate usageQuantity across all of Amazon EC2, the results aren't meaningful because Amazon EC2 compute hours and data transfer are measured in different units (for example, hours vs. GB).")
    usage_quantity_unit = models.TextField(blank=True, null=True, db_comment='Unit type for usage quantity.')
    normalized_usage_amount = models.FloatField(blank=True, null=True, db_comment='The amount of usage that you incurred, in normalized units, for size-flexible RIs. The NormalizedUsageAmount is equal to UsageAmount multiplied by NormalizationFactor.')
    normalized_usage_unit = models.TextField(blank=True, null=True, db_comment='Unit type for normalized usage.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_cost_by_service_usage_type_daily'
        db_table_comment = 'AWS Cost Explorer - Cost by Service and Usage Type (Daily)'


class AwsCostByServiceUsageTypeMonthly(models.Model):
    service = models.TextField(blank=True, null=True, db_comment='The name of the AWS service.')
    usage_type = models.TextField(blank=True, null=True, db_comment='The usage type of this metric.')
    period_start = models.DateTimeField(blank=True, null=True, db_comment='Start timestamp for this cost metric.')
    period_end = models.DateTimeField(blank=True, null=True, db_comment='End timestamp for this cost metric.')
    estimated = models.BooleanField(blank=True, null=True, db_comment='Whether the result is estimated.')
    blended_cost_amount = models.FloatField(blank=True, null=True, db_comment='This cost metric reflects the average cost of usage across the consolidated billing family. If you use the consolidated billing feature in AWS Organizations, you can view costs using blended rates.')
    blended_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for blended costs.')
    unblended_cost_amount = models.FloatField(blank=True, null=True, db_comment='Unblended costs represent your usage costs on the day they are charged to you. In finance terms, they represent your costs on a cash basis of accounting.')
    unblended_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for unblended costs.')
    net_unblended_cost_amount = models.FloatField(blank=True, null=True, db_comment='This cost metric reflects the unblended cost after discounts.')
    net_unblended_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for net unblended costs.')
    amortized_cost_amount = models.FloatField(blank=True, null=True, db_comment="This cost metric reflects the effective cost of the upfront and monthly reservation fees spread across the billing period. By default, Cost Explorer shows the fees for Reserved Instances as a spike on the day that you're charged, but if you choose to show costs as amortized costs, the costs are amortized over the billing period. This means that the costs are broken out into the effective daily rate. AWS estimates your amortized costs by combining your unblended costs with the amortized portion of your upfront and recurring reservation fees.")
    amortized_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for amortized costs.')
    net_amortized_cost_amount = models.FloatField(blank=True, null=True, db_comment='This cost metric amortizes the upfront and monthly reservation fees while including discounts such as RI volume discounts.')
    net_amortized_cost_unit = models.TextField(blank=True, null=True, db_comment='Unit type for net amortized costs.')
    usage_quantity_amount = models.FloatField(blank=True, null=True, db_comment="The amount of usage that you incurred. NOTE: If you return the UsageQuantity metric, the service aggregates all usage numbers without taking into account the units. For example, if you aggregate usageQuantity across all of Amazon EC2, the results aren't meaningful because Amazon EC2 compute hours and data transfer are measured in different units (for example, hours vs. GB).")
    usage_quantity_unit = models.TextField(blank=True, null=True, db_comment='Unit type for usage quantity.')
    normalized_usage_amount = models.FloatField(blank=True, null=True, db_comment='The amount of usage that you incurred, in normalized units, for size-flexible RIs. The NormalizedUsageAmount is equal to UsageAmount multiplied by NormalizationFactor.')
    normalized_usage_unit = models.TextField(blank=True, null=True, db_comment='Unit type for normalized usage.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_cost_by_service_usage_type_monthly'
        db_table_comment = 'AWS Cost Explorer - Cost by Service and Usage Type (Monthly)'



class AwsDaxCluster(models.Model):
    cluster_name = models.TextField(blank=True, null=True, db_comment='The name of the DAX cluster.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) that uniquely identifies the cluster.')
    description = models.TextField(blank=True, null=True, db_comment='The description of the cluster.')
    active_nodes = models.BigIntegerField(blank=True, null=True, db_comment='The number of nodes in the cluster that are active.')
    iam_role_arn = models.TextField(blank=True, null=True, db_comment='A valid Amazon Resource Name (ARN) that identifies an IAM role.')
    node_type = models.TextField(blank=True, null=True, db_comment='The node type for the nodes in the cluster.')
    preferred_maintenance_window = models.TextField(blank=True, null=True, db_comment='A range of time when maintenance of DAX cluster software will be performed.')
    status = models.TextField(blank=True, null=True, db_comment='The current status of the cluster.')
    subnet_group = models.TextField(blank=True, null=True, db_comment='The subnet group where the DAX cluster is running.')
    total_nodes = models.TextField(blank=True, null=True, db_comment='The total number of nodes in the cluster.')
    cluster_discovery_endpoint = models.JSONField(blank=True, null=True, db_comment='The configuration endpoint for this DAX cluster, consisting of a DNS name and a port number.')
    node_ids_to_remove = models.JSONField(blank=True, null=True, db_comment='A list of nodes to be removed from the cluster.')
    nodes = models.JSONField(blank=True, null=True, db_comment='A list of nodes that are currently in the cluster.')
    notification_configuration = models.JSONField(blank=True, null=True, db_comment='Describes a notification topic and its status.')
    parameter_group = models.JSONField(blank=True, null=True, db_comment='The parameter group being used by nodes in the cluster.')
    sse_description = models.JSONField(blank=True, null=True, db_comment='The description of the server-side encryption status on the specified DAX cluster.')
    security_groups = models.JSONField(blank=True, null=True, db_comment='A list of security groups, and the status of each, for the nodes in the cluster.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags currently associated with the DAX cluster.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_dax_cluster'
        db_table_comment = 'AWS DAX Cluster'


class AwsDaxParameter(models.Model):
    parameter_name = models.TextField(blank=True, null=True, db_comment='The name of the parameter.')
    parameter_group_name = models.TextField(blank=True, null=True, db_comment='The name of the parameter group.')
    parameter_value = models.TextField(blank=True, null=True, db_comment='The value of the parameter.')
    description = models.TextField(blank=True, null=True, db_comment='Description of the parameter.')
    allowed_values = models.TextField(blank=True, null=True, db_comment='A range of values within which the parameter can be set.')
    change_type = models.TextField(blank=True, null=True, db_comment="The conditions under which changes to this parameter can be applied. Possible values are 'IMMEDIATE', 'REQUIRES_REBOOT'.")
    data_type = models.TextField(blank=True, null=True, db_comment='The data type of the parameter.')
    is_modifiable = models.TextField(blank=True, null=True, db_comment="Whether the customer is allowed to modify the parameter. Possible values are 'TRUE', 'FALSE' 'CONDITIONAL'.")
    parameter_type = models.TextField(blank=True, null=True, db_comment="Determines whether the parameter can be applied to any node or only nodes of a particular type. Possible values are 'DEFAULT', 'NODE_TYPE_SPECIFIC'.")
    source = models.TextField(blank=True, null=True, db_comment='How the parameter is defined. For example, system denotes a system-defined parameter.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_dax_parameter'
        db_table_comment = 'AWS DAX Parameter'


class AwsDaxParameterGroup(models.Model):
    parameter_group_name = models.TextField(blank=True, null=True, db_comment='The name of the parameter group.')
    description = models.TextField(blank=True, null=True, db_comment='Description of the parameter group.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_dax_parameter_group'
        db_table_comment = 'AWS DAX Parameter Group'


class AwsDaxSubnetGroup(models.Model):
    subnet_group_name = models.TextField(blank=True, null=True, db_comment='The name of the subnet group.')
    description = models.TextField(blank=True, null=True, db_comment='The description of the subnet group.')
    vpc_id = models.TextField(blank=True, null=True, db_comment='The Amazon Virtual Private Cloud identifier (VPC ID) of the subnet group.')
    subnets = models.JSONField(blank=True, null=True, db_comment='A list of subnets associated with the subnet group.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_dax_subnet_group'
        db_table_comment = 'AWS DAX Subnet Group'


class AwsDirectoryServiceCertificate(models.Model):
    directory_id = models.TextField(blank=True, null=True, db_comment='The directory identifier.')
    certificate_id = models.TextField(blank=True, null=True, db_comment='The identifier of the certificate.')
    common_name = models.TextField(blank=True, null=True, db_comment='The common name for the certificate.')
    type = models.TextField(blank=True, null=True, db_comment='The function that the registered certificate performs. Valid values include ClientLDAPS or ClientCertAuth. The default value is ClientLDAPS.')
    state = models.TextField(blank=True, null=True, db_comment='The state of the certificate. Valid values: Registering | Registered | RegisterFailed | Deregistering | Deregistered | DeregisterFailed.')
    expiry_date_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time when the certificate will expire.')
    registered_date_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time that the certificate was registered.')
    state_reason = models.TextField(blank=True, null=True, db_comment='Describes a state change for the certificate.')
    client_cert_auth_settings = models.JSONField(blank=True, null=True, db_comment='A ClientCertAuthSettings object that contains client certificate authentication settings.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_directory_service_certificate'
        db_table_comment = 'AWS Directory Service Certificate'


class AwsDirectoryServiceDirectory(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The fully qualified name of the directory.')
    directory_id = models.TextField(blank=True, null=True, db_comment='The directory identifier.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) that uniquely identifies the directory.')
    stage = models.TextField(blank=True, null=True, db_comment='The current stage of the directory.')
    type = models.TextField(blank=True, null=True, db_comment='The directory type.')
    access_url = models.TextField(blank=True, null=True, db_comment='The access URL for the directory, such as http://<alias>.awsapps.com.')
    alias = models.TextField(blank=True, null=True, db_comment='The alias for the directory.')
    description = models.TextField(blank=True, null=True, db_comment='The description for the directory.')
    desired_number_of_domain_controllers = models.BigIntegerField(blank=True, null=True, db_comment='The desired number of domain controllers in the directory if the directory is Microsoft AD.')
    edition = models.TextField(blank=True, null=True, db_comment='The edition associated with this directory.')
    launch_time = models.DateTimeField(blank=True, null=True, db_comment='Specifies when the directory was created.')
    radius_status = models.TextField(blank=True, null=True, db_comment='The status of the RADIUS MFA server connection.')
    share_method = models.TextField(blank=True, null=True, db_comment='The method used when sharing a directory to determine whether the directory should be shared within your AWS organization (ORGANIZATIONS) or with any AWS account by sending a shared directory request (HANDSHAKE).')
    share_notes = models.TextField(blank=True, null=True, db_comment='A directory share request that is sent by the directory owner to the directory consumer.')
    share_status = models.TextField(blank=True, null=True, db_comment='Current directory status of the shared AWS Managed Microsoft AD directory.')
    short_name = models.TextField(blank=True, null=True, db_comment='The short name of the directory.')
    size = models.TextField(blank=True, null=True, db_comment='The directory size.')
    sso_enabled = models.BooleanField(blank=True, null=True, db_comment='Indicates if single sign-on is enabled for the directory. For more information, see EnableSso and DisableSso.')
    stage_last_updated_date_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time that the stage was last updated.')
    stage_reason = models.TextField(blank=True, null=True, db_comment='Additional information about the directory stage.')
    connect_settings = models.JSONField(blank=True, null=True, db_comment='A DirectoryConnectSettingsDescription object that contains additional information about an AD Connector directory.')
    dns_ip_addrs = models.JSONField(blank=True, null=True, db_comment='The IP addresses of the DNS servers for the directory.')
    event_topics = models.JSONField(blank=True, null=True, db_comment='Amazon SNS topic names that receive status messages from the specified Directory ID.')
    snapshot_limit = models.JSONField(blank=True, null=True, db_comment='Obtains the manual snapshot limits for a directory.')
    owner_directory_description = models.JSONField(blank=True, null=True, db_comment='Describes the AWS Managed Microsoft AD directory in the directory owner account.')
    radius_settings = models.JSONField(blank=True, null=True, db_comment='A RadiusSettings object that contains information about the RADIUS server.')
    regions_info = models.JSONField(blank=True, null=True, db_comment='Lists the Regions where the directory has replicated.')
    shared_directories = models.JSONField(blank=True, null=True, db_comment='Details about the shared directory in the directory owner account for which the share request in the directory consumer account has been accepted.')
    vpc_settings = models.JSONField(blank=True, null=True, db_comment='A DirectoryVpcSettingsDescription object that contains additional information about a directory.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags currently associated with the Directory Service Directory.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_directory_service_directory'
        db_table_comment = 'AWS Directory Service Directory'


class AwsDirectoryServiceLogSubscription(models.Model):
    directory_id = models.TextField(blank=True, null=True, db_comment='Identifier (ID) of the directory that you want to associate with the log subscription.')
    log_group_name = models.TextField(blank=True, null=True, db_comment='The name of the log group.')
    subscription_created_date_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time that the log subscription was created.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_directory_service_log_subscription'
        db_table_comment = 'AWS Directory Service Log Subscription'


class AwsDlmLifecyclePolicy(models.Model):
    policy_id = models.TextField(blank=True, null=True, db_comment='The identifier of the lifecycle policy.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the policy.')
    description = models.TextField(blank=True, null=True, db_comment='The description of the lifecycle policy.')
    date_created = models.DateTimeField(blank=True, null=True, db_comment='The local date and time when the lifecycle policy was created.')
    date_modified = models.DateTimeField(blank=True, null=True, db_comment='The local date and time when the lifecycle policy was last modified.')
    execution_role_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy.')
    policy_type = models.TextField(blank=True, null=True, db_comment='The type of policy.')
    state = models.TextField(blank=True, null=True, db_comment='The activation state of the lifecycle policy.')
    status_message = models.TextField(blank=True, null=True, db_comment='The description of the status.')
    policy_details = models.JSONField(blank=True, null=True, db_comment='The configuration of the lifecycle policy.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_dlm_lifecycle_policy'
        db_table_comment = 'AWS DLM Lifecycle Policy'


class AwsDmsCertificate(models.Model):
    certificate_identifier = models.TextField(blank=True, null=True, db_comment="A customer-assigned name for the certificate. Identifiers must begin with a letter and must contain only ASCII letters, digits, and hyphens. They can't end with a hyphen or contain two consecutive hyphens.")
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the certificate.')
    certificate_creation_date = models.DateTimeField(blank=True, null=True, db_comment='The date that the certificate was created.')
    certificate_owner = models.TextField(blank=True, null=True, db_comment='The owner of the certificate.')
    certificate_pem = models.TextField(blank=True, null=True, db_comment='The contents of a .pem file, which contains an X.509 certificate.')
    certificate_wallet = models.TextField(blank=True, null=True, db_comment='The location of an imported Oracle Wallet certificate for use with SSL.')
    key_length = models.BigIntegerField(blank=True, null=True, db_comment='The key length of the cryptographic algorithm being used.')
    signing_algorithm = models.TextField(blank=True, null=True, db_comment='The signing algorithm for the certificate.')
    valid_from_date = models.DateTimeField(blank=True, null=True, db_comment='The beginning date that the certificate is valid.')
    valid_to_date = models.DateTimeField(blank=True, null=True, db_comment='The final date that the certificate is valid.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags currently associated with the certificate.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_dms_certificate'
        db_table_comment = 'AWS DMS Certificate'


class AwsDmsEndpoint(models.Model):
    endpoint_identifier = models.TextField(blank=True, null=True, db_comment='The database endpoint identifier.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.')
    certificate_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) used for SSL connection to the endpoint.')
    database_name = models.TextField(blank=True, null=True, db_comment='The name of the database at the endpoint.')
    endpoint_type = models.TextField(blank=True, null=True, db_comment='The type of endpoint. Valid values are source and target.')
    engine_display_name = models.TextField(blank=True, null=True, db_comment="The expanded name for the engine name. For example, if the EngineName parameter is 'aurora', this value would be 'Amazon Aurora MySQL'.")
    engine_name = models.TextField(blank=True, null=True, db_comment="The database engine name. Valid values, depending on the EndpointType, include 'mysql', 'oracle', 'postgres', 'mariadb', 'aurora', 'aurora-postgresql', 'redshift', 's3', 'db2', 'db2-zos', 'azuredb', 'sybase', 'dynamodb', 'mongodb', 'kinesis', 'kafka', 'elasticsearch', 'documentdb', 'sqlserver', 'neptune', and 'babelfish'.")
    external_id = models.TextField(blank=True, null=True, db_comment='Value returned by a call to CreateEndpoint that can be used for cross-account validation.')
    external_table_definition = models.TextField(blank=True, null=True, db_comment='The external table definition.')
    extra_connection_attributes = models.TextField(blank=True, null=True, db_comment='Additional connection attributes used to connect to the endpoint.')
    kms_key_id = models.TextField(blank=True, null=True, db_comment='An KMS key identifier that is used to encrypt the connection parameters for the endpoint.')
    server_name = models.TextField(blank=True, null=True, db_comment='The name of the server at the endpoint.')
    service_access_role_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) used by the service to access the IAM role.')
    ssl_mode = models.TextField(blank=True, null=True, db_comment='The SSL mode used to connect to the endpoint. The default value is none.')
    status = models.TextField(blank=True, null=True, db_comment='The status of the endpoint.')
    username = models.TextField(blank=True, null=True, db_comment='The user name used to connect to the endpoint.')
    port = models.BigIntegerField(blank=True, null=True, db_comment='The port value used to access the endpoint.')
    dms_transfer_settings = models.JSONField(blank=True, null=True, db_comment='The settings for the DMS Transfer type source.')
    doc_db_settings = models.JSONField(blank=True, null=True, db_comment='Provides information that defines a DocumentDB endpoint.')
    dynamo_db_settings = models.JSONField(blank=True, null=True, db_comment='The settings for the DynamoDB target endpoint.')
    elasticsearch_settings = models.JSONField(blank=True, null=True, db_comment='The settings for the OpenSearch source endpoint.')
    gcp_my_sql_settings = models.JSONField(blank=True, null=True, db_comment='Settings in JSON format for the source GCP MySQL endpoint.')
    ibm_db2_settings = models.JSONField(blank=True, null=True, db_comment='The settings for the IBM Db2 LUW source endpoint.')
    kafka_settings = models.JSONField(blank=True, null=True, db_comment='The settings for the Apache Kafka target endpoint.')
    kinesis_settings = models.JSONField(blank=True, null=True, db_comment='The settings for the Amazon Kinesis target endpoint.')
    microsoft_sql_server_settings = models.JSONField(blank=True, null=True, db_comment='The settings for the Microsoft SQL Server source and target endpoint.')
    mongo_db_settings = models.JSONField(blank=True, null=True, db_comment='The settings for the MongoDB source endpoint.')
    my_sql_settings = models.JSONField(blank=True, null=True, db_comment='The settings for the MySQL source and target endpoint.')
    neptune_settings = models.JSONField(blank=True, null=True, db_comment='The settings for the Amazon Neptune target endpoint.')
    oracle_settings = models.JSONField(blank=True, null=True, db_comment='The settings for the Oracle source and target endpoint.')
    postgre_sql_settings = models.JSONField(blank=True, null=True, db_comment='The settings for the PostgreSQL source and target endpoint.')
    redis_settings = models.JSONField(blank=True, null=True, db_comment='The settings for the Redis target endpoint.')
    redshift_settings = models.JSONField(blank=True, null=True, db_comment='Settings for the Amazon Redshift endpoint.')
    s3_settings = models.JSONField(blank=True, null=True, db_comment='The settings for the S3 target endpoint.')
    sybase_settings = models.JSONField(blank=True, null=True, db_comment='The settings for the SAP ASE source and target endpoint.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags currently associated with the replication instance.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_dms_endpoint'
        db_table_comment = 'AWS DMS Endpoint'


class AwsDmsReplicationInstance(models.Model):
    replication_instance_identifier = models.TextField(blank=True, null=True, db_comment='The identifier of the replication instance.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the replication instance.')
    replication_instance_class = models.TextField(blank=True, null=True, db_comment='The compute and memory capacity of the replication instance as defined for the specified replication instance class.')
    engine_version = models.TextField(blank=True, null=True, db_comment='The engine version number of the replication instance.')
    publicly_accessible = models.BooleanField(blank=True, null=True, db_comment='Specifies the accessibility options for the replication instance.')
    allocated_storage = models.BigIntegerField(blank=True, null=True, db_comment='The amount of storage (in gigabytes) that is allocated for the replication instance.')
    auto_minor_version_upgrade = models.BooleanField(blank=True, null=True, db_comment='Boolean value indicating if minor version upgrades will be automatically applied to the instance.')
    availability_zone = models.TextField(blank=True, null=True, db_comment='The Availability Zone for the instance.')
    dns_name_servers = models.TextField(blank=True, null=True, db_comment='The DNS name servers supported for the replication instance to access your on-premise source or target database.')
    free_until = models.DateTimeField(blank=True, null=True, db_comment='The expiration date of the free replication instance that is part of the Free DMS program.')
    instance_create_time = models.DateTimeField(blank=True, null=True, db_comment='The time the replication instance was created.')
    kms_key_id = models.TextField(blank=True, null=True, db_comment='An AWS KMS key identifier that is used to encrypt the data on the replication instance.')
    multi_az = models.BooleanField(blank=True, null=True, db_comment='Specifies whether the replication instance is a Multi-AZ deployment.')
    preferred_maintenance_window = models.TextField(blank=True, null=True, db_comment='The maintenance window times for the replication instance.')
    replication_instance_private_ip_address = models.TextField(blank=True, null=True, db_comment='The private IP address of the replication instance.')
    replication_instance_public_ip_address = models.TextField(blank=True, null=True, db_comment='The public IP address of the replication instance.')
    replication_instance_status = models.TextField(blank=True, null=True, db_comment='The status of the replication instance.')
    secondary_availability_zone = models.TextField(blank=True, null=True, db_comment='The Availability Zone of the standby replication instance in a Multi-AZ deployment.')
    pending_modified_values = models.JSONField(blank=True, null=True, db_comment='The pending modification values.')
    replication_instance_private_ip_addresses = models.JSONField(blank=True, null=True, db_comment='One or more private IP addresses for the replication instance.')
    replication_instance_public_ip_addresses = models.JSONField(blank=True, null=True, db_comment='One or more public IP addresses for the replication instance.')
    replication_subnet_group = models.JSONField(blank=True, null=True, db_comment='The subnet group for the replication instance.')
    vpc_security_groups = models.JSONField(blank=True, null=True, db_comment='The VPC security group for the instance.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags currently associated with the replication instance.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_dms_replication_instance'
        db_table_comment = 'AWS DMS Replication Instance'


class AwsDmsReplicationTask(models.Model):
    replication_task_identifier = models.TextField(blank=True, null=True, db_comment='The user-assigned replication task identifier or name.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the replication task.')
    cdc_start_position = models.TextField(blank=True, null=True, db_comment='Indicates when you want a change data capture (CDC) operation to start.')
    cdc_stop_position = models.TextField(blank=True, null=True, db_comment='Indicates when you want a change data capture (CDC) operation to stop.')
    last_failure_message = models.TextField(blank=True, null=True, db_comment='The last error (failure) message generated for the replication task.')
    migration_type = models.TextField(blank=True, null=True, db_comment='The type of migration.')
    recovery_checkpoint = models.TextField(blank=True, null=True, db_comment='Indicates the last checkpoint that occurred during a change data capture (CDC) operation.')
    replication_instance_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the replication instance.')
    replication_task_creation_date = models.DateTimeField(blank=True, null=True, db_comment='The date the replication task was created.')
    replication_task_start_date = models.DateTimeField(blank=True, null=True, db_comment='The date the replication task is scheduled to start.')
    source_endpoint_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) that uniquely identifies the endpoint.')
    status = models.TextField(blank=True, null=True, db_comment='The status of the replication task.')
    stop_reason = models.TextField(blank=True, null=True, db_comment='The reason the replication task was stopped.')
    table_mappings = models.TextField(blank=True, null=True, db_comment='Table mappings specified in the task.')
    target_endpoint_arn = models.TextField(blank=True, null=True, db_comment='The ARN that uniquely identifies the endpoint.')
    target_replication_instance_arn = models.TextField(blank=True, null=True, db_comment='The ARN of the replication instance to which this task is moved in response to running the MoveReplicationTask operation.')
    task_data = models.TextField(blank=True, null=True, db_comment='Supplemental information that the task requires to migrate the data for certain source and target endpoints.')
    replication_task_settings = models.JSONField(blank=True, null=True, db_comment='The settings for the replication task.')
    replication_task_stats = models.JSONField(blank=True, null=True, db_comment='The statistics for the task, including elapsed time, tables loaded, and table errors.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags currently associated with the replication instance.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_dms_replication_task'
        db_table_comment = 'AWS DMS Replication Task'


class AwsDocdbCluster(models.Model):
    db_cluster_identifier = models.TextField(blank=True, null=True, db_comment='Contains a user-supplied cluster identifier. This identifier is the unique key that identifies a cluster.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the Cluster.')
    status = models.TextField(blank=True, null=True, db_comment='Specifies the current state of this cluster.')
    cluster_create_time = models.DateTimeField(blank=True, null=True, db_comment='Specifies the time when the cluster was created.')
    backup_retention_period = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the number of days for which automatic snapshots are retained.')
    clone_group_id = models.TextField(blank=True, null=True, db_comment='Identifies the clone group to which the DB cluster is associated.')
    db_cluster_parameter_group = models.TextField(blank=True, null=True, db_comment='Specifies the name of the cluster parameter group for the cluster.')
    db_cluster_resource_id = models.TextField(blank=True, null=True, db_comment='The Region-unique, immutable identifier for the cluster.')
    db_subnet_group = models.TextField(blank=True, null=True, db_comment='Specifies information on the subnet group associated with the cluster.')
    deletion_protection = models.BooleanField(blank=True, null=True, db_comment='Specifies whether the cluster has deletion protection enabled, or not.')
    earliest_restorable_time = models.DateTimeField(blank=True, null=True, db_comment='The earliest time to which a database can be restored with point-in-time restore.')
    endpoint = models.TextField(blank=True, null=True, db_comment='Specifies the connection endpoint for the primary instance of the DB cluster.')
    engine = models.TextField(blank=True, null=True, db_comment='The name of the database engine to be used for this DB cluster.')
    engine_version = models.TextField(blank=True, null=True, db_comment='Indicates the database engine version.')
    hosted_zone_id = models.TextField(blank=True, null=True, db_comment='Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.')
    kms_key_id = models.TextField(blank=True, null=True, db_comment='The AWS KMS key identifier for the encrypted cluster.')
    latest_restorable_time = models.DateTimeField(blank=True, null=True, db_comment='Specifies the latest time to which a database can be restored with point-in-time restore.')
    master_user_name = models.TextField(blank=True, null=True, db_comment='Contains the master username for the cluster.')
    multi_az = models.BooleanField(blank=True, null=True, db_comment='Specifies whether the cluster has instances in multiple Availability Zones, or not.')
    percent_progress = models.TextField(blank=True, null=True, db_comment='Specifies the progress of the operation as a percentage.')
    port = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the port that the database engine is listening on.')
    preferred_backup_window = models.TextField(blank=True, null=True, db_comment='Specifies the daily time range during which automated backups are created.')
    preferred_maintenance_window = models.TextField(blank=True, null=True, db_comment='Specifies the weekly time range during which system maintenance can occur')
    reader_endpoint = models.TextField(blank=True, null=True, db_comment='The reader endpoint for the DB cluster.')
    replication_source_identifier = models.TextField(blank=True, null=True, db_comment='Contains the identifier of the source cluster if this cluster is a secondary cluster.')
    storage_encrypted = models.BooleanField(blank=True, null=True, db_comment='Specifies whether the cluster is encrypted, or not.')
    associated_roles = models.JSONField(blank=True, null=True, db_comment='A list of AWS IAM roles that are associated with the cluster.')
    availability_zones = models.JSONField(blank=True, null=True, db_comment='A list of Availability Zones (AZs) where instances in the cluster can be created.')
    enabled_cloudwatch_logs_exports = models.JSONField(blank=True, null=True, db_comment='A list of log types that this cluster is configured to export to Amazon CloudWatch Logs.')
    members = models.JSONField(blank=True, null=True, db_comment='A list of instances that make up the cluster.')
    read_replica_identifiers = models.JSONField(blank=True, null=True, db_comment='A list of identifiers of the read replicas associated with this cluster.')
    vpc_security_groups = models.JSONField(blank=True, null=True, db_comment='A list of VPC security groups that the DB cluster belongs to.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags attached to the Cluster.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_docdb_cluster'
        db_table_comment = 'AWS DocumentDB Cluster'


class AwsDocdbClusterInstance(models.Model):
    db_instance_identifier = models.TextField(blank=True, null=True, db_comment='Contains a user-provided database identifier. This identifier is the unique key that identifies an instance.')
    db_instance_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the instance.')
    db_cluster_identifier = models.TextField(blank=True, null=True, db_comment='Contains the name of the cluster that the instance is a member of if the instance is a member of a cluster.')
    db_instance_status = models.TextField(blank=True, null=True, db_comment='Specifies the current state of this database.')
    db_instance_class = models.TextField(blank=True, null=True, db_comment='Contains the name of the compute and memory capacity class of the instance.')
    dbi_resource_id = models.TextField(blank=True, null=True, db_comment='The Amazon Web Services Region-unique, immutable identifier for the instance.')
    availability_zone = models.TextField(blank=True, null=True, db_comment='Specifies the name of the availability zone the instance is located in.')
    backup_retention_period = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the number of days for which automatic snapshots are retained.')
    ca_certificate_identifier = models.TextField(blank=True, null=True, db_comment='The identifier of the CA certificate for this DB instance.')
    copy_tags_to_snapshot = models.BooleanField(blank=True, null=True, db_comment='Specifies whether tags are copied from the DB instance to snapshots of the DB instance, or not.')
    db_subnet_group_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the DB subnet group.')
    db_subnet_group_description = models.TextField(blank=True, null=True, db_comment='Provides the description of the DB subnet group.')
    db_subnet_group_name = models.TextField(blank=True, null=True, db_comment='The name of the DB subnet group.')
    db_subnet_group_status = models.TextField(blank=True, null=True, db_comment='Provides the status of the DB subnet group.')
    endpoint_address = models.TextField(blank=True, null=True, db_comment='Specifies the DNS address of the instance.')
    endpoint_hosted_zone_id = models.TextField(blank=True, null=True, db_comment='Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.')
    endpoint_port = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the port that the database engine is listening on.')
    engine = models.TextField(blank=True, null=True, db_comment='The name of the database engine to be used for this instance.')
    engine_version = models.TextField(blank=True, null=True, db_comment='Indicates the database engine version.')
    instance_create_time = models.DateTimeField(blank=True, null=True, db_comment='Provides the date and time the instance was created.')
    kms_key_id = models.TextField(blank=True, null=True, db_comment='If StorageEncrypted is true, the KMS key identifier for the encrypted instance.')
    latest_restorable_time = models.DateTimeField(blank=True, null=True, db_comment='Specifies the latest time to which a database can be restored with point-in-time restore.')
    preferred_backup_window = models.TextField(blank=True, null=True, db_comment='Specifies the daily time range during which automated backups are created.')
    preferred_maintenance_window = models.TextField(blank=True, null=True, db_comment='Specifies the weekly time range during which system maintenance can occur.')
    promotion_tier = models.BigIntegerField(blank=True, null=True, db_comment='A value that specifies the order in which an Amazon DocumentDB replica is promoted to the primary instance after a failure of the existing primary instance.')
    publicly_accessible = models.BooleanField(blank=True, null=True, db_comment='Specifies the accessibility options for the DB instance.')
    storage_encrypted = models.BooleanField(blank=True, null=True, db_comment='Specifies whether or not the instance is encrypted.')
    vpc_id = models.TextField(blank=True, null=True, db_comment='Provides the VpcId of the DB subnet group.')
    enabled_cloudwatch_logs_exports = models.JSONField(blank=True, null=True, db_comment='A list of log types that this instance is configured to export to CloudWatch Logs.')
    pending_modified_values = models.JSONField(blank=True, null=True, db_comment='Specifies that changes to the instance are pending.')
    status_infos = models.JSONField(blank=True, null=True, db_comment='The status of a read replica.')
    subnets = models.JSONField(blank=True, null=True, db_comment='A list of subnet elements.')
    vpc_security_groups = models.JSONField(blank=True, null=True, db_comment='A list of VPC security group elements that the instance belongs to.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags attached to the Instance.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_docdb_cluster_instance'
        db_table_comment = 'AWS DocumentDB Cluster Instance'


class AwsDocdbClusterSnapshot(models.Model):
    db_cluster_snapshot_identifier = models.TextField(blank=True, null=True, db_comment='The friendly name to identify the cluster snapshot.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the cluster snapshot.')
    snapshot_type = models.TextField(blank=True, null=True, db_comment='The type of the cluster snapshot.')
    status = models.TextField(blank=True, null=True, db_comment='Specifies the status of this cluster snapshot.')
    include_public = models.BooleanField(blank=True, null=True, db_comment='Set to true to include manual cluster snapshots that are public and can be copied or restored by any Amazon Web Services account, and otherwise false.')
    include_shared = models.BooleanField(blank=True, null=True, db_comment='Set to true to include shared manual cluster snapshots from other Amazon Web Services accounts that this Amazon Web Services account has been given permission to copy or restore, and otherwise false.')
    db_cluster_identifier = models.TextField(blank=True, null=True, db_comment='The friendly name to identify the cluster, that the snapshot snapshot was created from.')
    snapshot_create_time = models.DateTimeField(blank=True, null=True, db_comment='The time when the snapshot was taken.')
    cluster_create_time = models.DateTimeField(blank=True, null=True, db_comment='Specifies the time when the cluster was created.')
    engine = models.TextField(blank=True, null=True, db_comment='Specifies the name of the database engine.')
    engine_version = models.TextField(blank=True, null=True, db_comment='Specifies the version of the database engine for this cluster snapshot.')
    kms_key_id = models.TextField(blank=True, null=True, db_comment='The AWS KMS key identifier for the AWS KMS customer master key (CMK).')
    master_user_name = models.TextField(blank=True, null=True, db_comment='Provides the master username for the cluster snapshot.')
    percent_progress = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the percentage of the estimated data that has been transferred.')
    port = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the port that the cluster was listening on at the time of the snapshot.')
    source_db_cluster_snapshot_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the source cluster snapshot, if the cluster snapshot was copied from a source cluster snapshot.')
    storage_encrypted = models.BooleanField(blank=True, null=True, db_comment='Specifies whether the cluster snapshot is encrypted, or not.')
    vpc_id = models.TextField(blank=True, null=True, db_comment='Provides the VPC ID associated with the cluster snapshot.')
    availability_zones = models.JSONField(blank=True, null=True, db_comment='A list of Availability Zones (AZs) where instances in the cluster snapshot can be restored.')
    db_cluster_snapshot_attributes = models.JSONField(blank=True, null=True, db_comment='A list of DB cluster snapshot attribute names and values for a manual cluster snapshot.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags attached to the cluster snapshot.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_docdb_cluster_snapshot'
        db_table_comment = 'AWS DocumentDB Cluster Snapshot'


class AwsDrsJob(models.Model):
    job_id = models.TextField(blank=True, null=True, db_comment='The ID of the job.')
    arn = models.TextField(blank=True, null=True, db_comment='The ARN of a Job.')
    initiated_by = models.TextField(blank=True, null=True, db_comment='A string representing who initiated the Job.')
    status = models.TextField(blank=True, null=True, db_comment='The status of the Job.')
    type = models.TextField(blank=True, null=True, db_comment='The type of the Job.')
    creation_date_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time of when the Job was created.')
    end_date_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time of when the Job ended.')
    participating_servers = models.JSONField(blank=True, null=True, db_comment='A list of servers that the Job is acting upon.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_drs_job'
        db_table_comment = 'AWS DRS Job'


class AwsDrsRecoveryInstance(models.Model):
    recovery_instance_id = models.TextField(blank=True, null=True, db_comment='The ID of the recovery instance.')
    arn = models.TextField(blank=True, null=True, db_comment='The ARN of the recovery instance.')
    source_server_id = models.TextField(blank=True, null=True, db_comment='The source server ID that this recovery instance is associated with.')
    ec2_instance_id = models.TextField(blank=True, null=True, db_comment='The EC2 instance ID of the recovery instance.')
    ec2_instance_state = models.TextField(blank=True, null=True, db_comment='The state of the EC2 instance for this recovery instance.')
    is_drill = models.BooleanField(blank=True, null=True, db_comment='Whether this recovery instance was created for a drill or for an actual recovery event.')
    job_id = models.TextField(blank=True, null=True, db_comment='The ID of the Job that created the recovery instance.')
    origin_environment = models.TextField(blank=True, null=True, db_comment='Environment (On Premises/AWS) of the instance that the recovery instance originated from.')
    point_in_time_snapshot_date_time = models.TextField(blank=True, null=True, db_comment='The date and time of the Point in Time (PIT) snapshot that this recovery instance was launched from.')
    data_replication_info = models.JSONField(blank=True, null=True, db_comment='The Data Replication Info of the recovery instance.')
    failback = models.JSONField(blank=True, null=True, db_comment='An object representing failback related information of the recovery instance.')
    recovery_instance_properties = models.JSONField(blank=True, null=True, db_comment='Properties of the recovery instance machine.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_drs_recovery_instance'
        db_table_comment = 'AWS DRS recovery instance'


class AwsDrsRecoverySnapshot(models.Model):
    snapshot_id = models.TextField(blank=True, null=True, db_comment='The ID of the snapshot.')
    source_server_id = models.TextField(blank=True, null=True, db_comment='The ID of the source server that the snapshot was taken for.')
    expected_timestamp = models.DateTimeField(blank=True, null=True, db_comment='The timestamp of when we expect the snapshot to be taken.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The actual timestamp when the snapshot was taken.')
    ebs_snapshots = models.JSONField(blank=True, null=True, db_comment='A list of EBS snapshots.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_drs_recovery_snapshot'
        db_table_comment = 'AWS DRS Recovery Snapshot'


class AwsDrsSourceServer(models.Model):
    source_server_id = models.TextField(blank=True, null=True, db_comment='The ID of the Source Server.')
    arn = models.TextField(blank=True, null=True, db_comment='The ARN of the Source Server.')
    recovery_instance_id = models.TextField(blank=True, null=True, db_comment='The ID of the Recovery Instance associated with this Source Server.')
    source_properties = models.JSONField(blank=True, null=True, db_comment='The source properties of the Source Server.')
    data_replication_info = models.JSONField(blank=True, null=True, db_comment='The Data Replication Info of the Source Server.')
    last_launch_result = models.TextField(blank=True, null=True, db_comment='The status of the last recovery launch of this Source Server.')
    life_cycle = models.JSONField(blank=True, null=True, db_comment='The lifecycle information of this Source Server.')
    replication_direction = models.TextField(blank=True, null=True, db_comment='Replication direction of the Source Server.')
    reversed_direction_source_server_arn = models.TextField(blank=True, null=True, db_comment='For EC2-originated Source Servers which have been failed over and then failed back, this value will mean the ARN of the Source Server on the opposite replication direction.')
    source_cloud_properties = models.JSONField(blank=True, null=True, db_comment='Source cloud properties of the Source Server.')
    staging_area = models.JSONField(blank=True, null=True, db_comment='The staging area of the source server.')
    staging_account_id = models.TextField(blank=True, null=True, db_comment='The staging account ID that extended source servers belong to.')
    launch_configuration = models.JSONField(blank=True, null=True, db_comment='The launch configuration settings of the source server.')
    hardware_id = models.TextField(blank=True, null=True, db_comment='An ID that describes the hardware of the Source Server. This is either an EC2 instance id, a VMware uuid or a mac address.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_drs_source_server'
        db_table_comment = 'AWS DRS Source Server'


class AwsDynamodbBackup(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='Name of the backup.')
    arn = models.TextField(blank=True, null=True, db_comment='Amazon Resource Name associated with the backup.')
    table_name = models.TextField(blank=True, null=True, db_comment='Unique identifier for the table to which backup belongs.')
    table_arn = models.TextField(blank=True, null=True, db_comment='Name of the table to which backup belongs.')
    table_id = models.TextField(blank=True, null=True, db_comment='ARN associated with the table to which backup belongs.')
    backup_status = models.TextField(blank=True, null=True, db_comment='Current status of the backup. Backup can be in one of the following states: CREATING, ACTIVE, DELETED.')
    backup_type = models.TextField(blank=True, null=True, db_comment='Backup type (USER | SYSTEM | AWS_BACKUP).')
    backup_creation_datetime = models.DateTimeField(blank=True, null=True, db_comment='Time at which the backup was created.')
    backup_expiry_datetime = models.DateTimeField(blank=True, null=True, db_comment='Time at which the automatic on-demand backup created by DynamoDB will expire.')
    backup_size_bytes = models.BigIntegerField(blank=True, null=True, db_comment='Size of the backup in bytes.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_dynamodb_backup'
        db_table_comment = 'AWS DynamoDB Backup'


class AwsDynamodbGlobalTable(models.Model):
    global_table_name = models.TextField(blank=True, null=True, db_comment='The global table name.')
    global_table_arn = models.TextField(blank=True, null=True, db_comment='The unique identifier of the global table.')
    global_table_status = models.TextField(blank=True, null=True, db_comment='The current state of the global table.')
    creation_date_time = models.DateTimeField(blank=True, null=True, db_comment='The creation time of the global table.')
    replication_group = models.JSONField(blank=True, null=True, db_comment='The Regions where the global table has replicas.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_dynamodb_global_table'
        db_table_comment = 'AWS DynamoDB Global Table'


class AwsDynamodbMetricAccountProvisionedReadCapacityUtil(models.Model):
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_dynamodb_metric_account_provisioned_read_capacity_util'
        db_table_comment = 'AWS DynamoDB Metric Account Provisioned Read Capacity Utilization'


class AwsDynamodbMetricAccountProvisionedWriteCapacityUtil(models.Model):
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_dynamodb_metric_account_provisioned_write_capacity_util'
        db_table_comment = 'AWS DynamoDB Metric Account Provisioned Write Capacity Utilization'


class AwsDynamodbTable(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the table.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) that uniquely identifies the table.')
    table_id = models.TextField(blank=True, null=True, db_comment='Unique identifier for the table.')
    creation_date_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time when the table was created.')
    table_class = models.TextField(blank=True, null=True, db_comment='The table class of the specified table. Valid values are STANDARD and STANDARD_INFREQUENT_ACCESS.')
    table_status = models.TextField(blank=True, null=True, db_comment='The current state of the table.')
    billing_mode = models.TextField(blank=True, null=True, db_comment='Controls how AWS charges for read and write throughput and manage capacity.')
    item_count = models.BigIntegerField(blank=True, null=True, db_comment='Number of items in the table. Note that this is an approximate value.')
    global_table_version = models.TextField(blank=True, null=True, db_comment='Represents the version of global tables (https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GlobalTables.html) in use, if the table is replicated across AWS Regions.')
    read_capacity = models.BigIntegerField(blank=True, null=True, db_comment='The maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException.')
    write_capacity = models.BigIntegerField(blank=True, null=True, db_comment='The maximum number of writes consumed per second before DynamoDB returns a ThrottlingException.')
    latest_stream_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) that uniquely identifies the latest stream for this table.')
    latest_stream_label = models.TextField(blank=True, null=True, db_comment='A timestamp, in ISO 8601 format, for this stream.')
    table_size_bytes = models.BigIntegerField(blank=True, null=True, db_comment='Size of the table in bytes. Note that this is an approximate value.')
    archival_summary = models.JSONField(blank=True, null=True, db_comment='Contains information about the table archive.')
    attribute_definitions = models.JSONField(blank=True, null=True, db_comment='An array of AttributeDefinition objects. Each of these objects describes one attribute in the table and index key schema.')
    key_schema = models.JSONField(blank=True, null=True, db_comment='The primary key structure for the table.')
    sse_description = models.JSONField(blank=True, null=True, db_comment='The description of the server-side encryption status on the specified table.')
    deletion_protection_enabled = models.BooleanField(blank=True, null=True, db_comment='Indicates whether deletion protection is enabled (true) or disabled (false) on the table.')
    continuous_backups_status = models.TextField(blank=True, null=True, db_comment='The continuous backups status of the table. ContinuousBackupsStatus can be one of the following states: ENABLED, DISABLED.')
    streaming_destination = models.JSONField(blank=True, null=True, db_comment='Provides information about the status of Kinesis streaming.')
    point_in_time_recovery_description = models.JSONField(blank=True, null=True, db_comment='The description of the point in time recovery settings applied to the table.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the table.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_dynamodb_table'
        db_table_comment = 'AWS DynamoDB Table'


class AwsDynamodbTableExport(models.Model):
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the export.')
    export_status = models.TextField(blank=True, null=True, db_comment='Export can be in one of the following states: IN_PROGRESS, COMPLETED, or FAILED.')
    billed_size_bytes = models.BigIntegerField(blank=True, null=True, db_comment='The billable size of the table export.')
    client_token = models.TextField(blank=True, null=True, db_comment='The client token that was provided for the export task. A client token makes calls to ExportTableToPointInTimeInput idempotent, meaning that multiple identical calls have the same effect as one single call.')
    end_time = models.DateTimeField(blank=True, null=True, db_comment='The time at which the export task completed.')
    export_format = models.TextField(blank=True, null=True, db_comment='The format of the exported data. Valid values for ExportFormat are DYNAMODB_JSON or ION.')
    export_manifest = models.TextField(blank=True, null=True, db_comment='The name of the manifest file for the export task.')
    export_time = models.DateTimeField(blank=True, null=True, db_comment='Point in time from which table data was exported.')
    failure_code = models.TextField(blank=True, null=True, db_comment='Status code for the result of the failed export.')
    failure_message = models.TextField(blank=True, null=True, db_comment='Export failure reason description.')
    item_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of items exported.')
    s3_bucket = models.TextField(blank=True, null=True, db_comment='The name of the Amazon S3 bucket containing the export.')
    s3_bucket_owner = models.TextField(blank=True, null=True, db_comment='The ID of the Amazon Web Services account that owns the bucket containing the export.')
    s3_prefix = models.TextField(blank=True, null=True, db_comment='The Amazon S3 bucket prefix used as the file name and path of the exported snapshot.')
    s3_sse_algorithm = models.TextField(blank=True, null=True, db_comment='Type of encryption used on the bucket where export data is stored.')
    s3_sse_kms_key_id = models.TextField(blank=True, null=True, db_comment='The ID of the KMS managed key used to encrypt the S3 bucket where export data is stored (if applicable).')
    start_time = models.DateTimeField(blank=True, null=True, db_comment='The time at which the export task began.')
    table_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the table that was exported.')
    table_id = models.TextField(blank=True, null=True, db_comment='Unique ID of the table that was exported.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_dynamodb_table_export'
        db_table_comment = 'AWS DynamoDB Table Export'


class AwsEbsSnapshot(models.Model):
    snapshot_id = models.TextField(blank=True, null=True, db_comment='The ID of the snapshot. Each snapshot receives a unique identifier when it is created.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the snapshot.')
    state = models.TextField(blank=True, null=True, db_comment='The snapshot state.')
    volume_size = models.BigIntegerField(blank=True, null=True, db_comment='The size of the volume, in GiB.')
    volume_id = models.TextField(blank=True, null=True, db_comment='The ID of the volume that was used to create the snapshot. Snapshots created by the CopySnapshot action have an arbitrary volume ID that should not be used for any purpose.')
    encrypted = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the snapshot is encrypted.')
    start_time = models.DateTimeField(blank=True, null=True, db_comment='The time stamp when the snapshot was initiated.')
    description = models.TextField(blank=True, null=True, db_comment='The description for the snapshot.')
    kms_key_id = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to protect the volume encryption key for the parent volume.')
    data_encryption_key_id = models.TextField(blank=True, null=True, db_comment='The data encryption key identifier for the snapshot. This value is a unique identifier that corresponds to the data encryption key that was used to encrypt the original volume or snapshot copy. Because data encryption keys are inherited by volumes created from snapshots, and vice versa, if snapshots share the same data encryption key identifier, then they belong to the same volume/snapshot lineage.')
    progress = models.TextField(blank=True, null=True, db_comment='The progress of the snapshot, as a percentage.')
    state_message = models.TextField(blank=True, null=True, db_comment='Encrypted Amazon EBS snapshots are copied asynchronously. If a snapshot copy operation fails this field displays error state details to help you diagnose why the error occurred.')
    owner_alias = models.TextField(blank=True, null=True, db_comment='The AWS owner alias, from an Amazon-maintained list (amazon). This is not the user-configured AWS account alias set using the IAM console.')
    owner_id = models.TextField(blank=True, null=True, db_comment='The AWS account ID of the EBS snapshot owner.')
    create_volume_permissions = models.JSONField(blank=True, null=True, db_comment='The users and groups that have the permissions for creating volumes from the snapshot.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the snapshot.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ebs_snapshot'
        db_table_comment = 'AWS EBS Snapshot'


class AwsEbsVolume(models.Model):
    volume_id = models.TextField(blank=True, null=True, db_comment='The ID of the volume.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the volume.')
    volume_type = models.TextField(blank=True, null=True, db_comment='The volume type. This can be gp2 for General Purpose SSD, io1 or io2 for Provisioned IOPS SSD, st1 for Throughput Optimized HDD, sc1 for Cold HDD, or standard for Magnetic volumes.')
    state = models.TextField(blank=True, null=True, db_comment='The volume state.')
    create_time = models.DateTimeField(blank=True, null=True, db_comment='The time stamp when volume creation was initiated.')
    auto_enable_io = models.BooleanField(blank=True, null=True, db_comment='The state of autoEnableIO attribute.')
    availability_zone = models.TextField(blank=True, null=True, db_comment='The Availability Zone for the volume.')
    encrypted = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the volume is encrypted.')
    fast_restored = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the volume was created using fast snapshot restore.')
    iops = models.BigIntegerField(blank=True, null=True, db_comment='The number of I/O operations per second (IOPS) that the volume supports.')
    kms_key_id = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to protect the volume encryption key for the volume.')
    multi_attach_enabled = models.BooleanField(blank=True, null=True, db_comment='Indicates whether Amazon EBS Multi-Attach is enabled.')
    outpost_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the Outpost.')
    size = models.BigIntegerField(blank=True, null=True, db_comment='The size of the volume, in GiBs.')
    snapshot_id = models.TextField(blank=True, null=True, db_comment='The snapshot from which the volume was created, if applicable.')
    attachments = models.JSONField(blank=True, null=True, db_comment='Information about the volume attachments.')
    product_codes = models.JSONField(blank=True, null=True, db_comment='A list of product codes.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the volume.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ebs_volume'
        db_table_comment = 'AWS EBS Volume'


class AwsEbsVolumeMetricReadOps(models.Model):
    volume_id = models.TextField(blank=True, null=True, db_comment='The EBS Volume ID.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ebs_volume_metric_read_ops'
        db_table_comment = 'AWS EBS Volume Cloudwatch Metrics - Read Ops'


class AwsEbsVolumeMetricReadOpsDaily(models.Model):
    volume_id = models.TextField(blank=True, null=True, db_comment='The EBS Volume ID.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ebs_volume_metric_read_ops_daily'
        db_table_comment = 'AWS EBS Volume Cloudwatch Metrics - Read Ops (Daily)'


class AwsEbsVolumeMetricReadOpsHourly(models.Model):
    volume_id = models.TextField(blank=True, null=True, db_comment='The EBS Volume ID.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ebs_volume_metric_read_ops_hourly'
        db_table_comment = 'AWS EBS Volume Cloudwatch Metrics - Read Ops (Hourly)'


class AwsEbsVolumeMetricWriteOps(models.Model):
    volume_id = models.TextField(blank=True, null=True, db_comment='The EBS Volume ID.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ebs_volume_metric_write_ops'
        db_table_comment = 'AWS EBS Volume Cloudwatch Metrics - Write Ops'


class AwsEbsVolumeMetricWriteOpsDaily(models.Model):
    volume_id = models.TextField(blank=True, null=True, db_comment='The EBS Volume ID.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ebs_volume_metric_write_ops_daily'
        db_table_comment = 'AWS EBS Volume Cloudwatch Metrics - Write Ops (Daily)'


class AwsEbsVolumeMetricWriteOpsHourly(models.Model):
    volume_id = models.TextField(blank=True, null=True, db_comment='The EBS Volume ID.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ebs_volume_metric_write_ops_hourly'
        db_table_comment = 'AWS EBS Volume Cloudwatch Metrics - Write Ops (Hourly)'


class AwsEc2Ami(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the AMI that was provided during image creation.')
    image_id = models.TextField(blank=True, null=True, db_comment='The ID of the AMI.')
    state = models.TextField(blank=True, null=True, db_comment='The current state of the AMI. If the state is available, the image is successfully registered and can be used to launch an instance.')
    image_type = models.TextField(blank=True, null=True, db_comment='The type of image.')
    image_location = models.TextField(blank=True, null=True, db_comment='The location of the AMI.')
    creation_date = models.DateTimeField(blank=True, null=True, db_comment='The date and time when the image was created.')
    architecture = models.TextField(blank=True, null=True, db_comment='The architecture of the image.')
    description = models.TextField(blank=True, null=True, db_comment='The description of the AMI that was provided during image creation.')
    ena_support = models.BooleanField(blank=True, null=True, db_comment='Specifies whether enhanced networking with ENA is enabled.')
    hypervisor = models.TextField(blank=True, null=True, db_comment='The hypervisor type of the image.')
    image_owner_alias = models.TextField(blank=True, null=True, db_comment='The AWS account alias (for example, amazon, self) or the AWS account ID of the AMI owner.')
    imds_support = models.TextField(blank=True, null=True, db_comment='If v2.0, it indicates that IMDSv2 is specified in the AMI.')
    kernel_id = models.TextField(blank=True, null=True, db_comment='The kernel associated with the image, if any. Only applicable for machine images.')
    owner_id = models.TextField(blank=True, null=True, db_comment='The AWS account ID of the image owner.')
    platform = models.TextField(blank=True, null=True, db_comment='This value is set to windows for Windows AMIs; otherwise, it is blank.')
    platform_details = models.TextField(blank=True, null=True, db_comment='The platform details associated with the billing code of the AMI. For more information, see Obtaining Billing Information (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-billing-info.html) in the Amazon Elastic Compute Cloud User Guide.')
    public = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the image has public launch permissions. The value is true if this image has public launch permissions or false if it has only implicit and explicit launch permissions.')
    ramdisk_id = models.TextField(blank=True, null=True, db_comment='The RAM disk associated with the image, if any. Only applicable for machine images.')
    root_device_name = models.TextField(blank=True, null=True, db_comment='The device name of the root device volume (for example, /dev/sda1).')
    root_device_type = models.TextField(blank=True, null=True, db_comment='The type of root device used by the AMI. The AMI can use an EBS volume or an instance store volume.')
    sriov_net_support = models.TextField(blank=True, null=True, db_comment='Specifies whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.')
    usage_operation = models.TextField(blank=True, null=True, db_comment='The operation of the Amazon EC2 instance and the billing code that is associated with the AMI. For the list of UsageOperation codes, see Platform Details and [Usage Operation Billing Codes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-billing-info.html#billing-info) in the Amazon Elastic Compute Cloud User Guide.')
    virtualization_type = models.TextField(blank=True, null=True, db_comment='The type of virtualization of the AMI.')
    block_device_mappings = models.JSONField(blank=True, null=True, db_comment='Any block device mapping entries.')
    product_codes = models.JSONField(blank=True, null=True, db_comment='Any product codes associated with the AMI.')
    launch_permissions = models.JSONField(blank=True, null=True, db_comment='The users and groups that have the permissions for creating instances from the AMI.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags attached to the AMI.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ec2_ami'
        db_table_comment = 'AWS EC2 AMI'
# Unable to inspect table 'aws_ec2_ami_shared'
# The error was: rpc error: code = Unknown desc = aws: please provide either owner_id or image_id


class AwsEc2ApplicationLoadBalancer(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The friendly name of the Load Balancer that was provided during resource creation.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the load balancer.')
    type = models.TextField(blank=True, null=True, db_comment='The type of load balancer.')
    scheme = models.TextField(blank=True, null=True, db_comment='The load balancing scheme of load balancer.')
    canonical_hosted_zone_id = models.TextField(blank=True, null=True, db_comment='The ID of the Amazon Route 53 hosted zone associated with the load balancer.')
    vpc_id = models.TextField(blank=True, null=True, db_comment='The ID of the VPC for the load balancer.')
    created_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time the load balancer was created.')
    customer_owned_ipv4_pool = models.TextField(blank=True, null=True, db_comment='The ID of the customer-owned address pool.')
    dns_name = models.TextField(blank=True, null=True, db_comment='The public DNS name of the load balancer.')
    ip_address_type = models.TextField(blank=True, null=True, db_comment='The type of IP addresses used by the subnets for your load balancer.')
    state_code = models.TextField(blank=True, null=True, db_comment='Current state of the load balancer.')
    state_reason = models.TextField(blank=True, null=True, db_comment='A description of the state.')
    availability_zones = models.JSONField(blank=True, null=True, db_comment='The subnets for the load balancer.')
    security_groups = models.JSONField(blank=True, null=True, db_comment='The IDs of the security groups for the load balancer.')
    load_balancer_attributes = models.JSONField(blank=True, null=True, db_comment='The AWS account ID of the image owner.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags attached to the load balancer.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ec2_application_load_balancer'
        db_table_comment = 'AWS EC2 Application Load Balancer'


class AwsEc2ApplicationLoadBalancerMetricRequestCount(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The friendly name of the Load Balancer that was provided during resource creation.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ec2_application_load_balancer_metric_request_count'
        db_table_comment = 'AWS EC2 Application Load Balancer Metrics - Request Count'


class AwsEc2ApplicationLoadBalancerMetricRequestCountDaily(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The friendly name of the Load Balancer that was provided during resource creation.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ec2_application_load_balancer_metric_request_count_daily'
        db_table_comment = 'AWS EC2 Application Load Balancer Metrics - Request Count (Daily)'


class AwsEc2AutoscalingGroup(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the Auto Scaling group.')
    autoscaling_group_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the Auto Scaling group.')
    status = models.TextField(blank=True, null=True, db_comment='The current state of the group when the DeleteAutoScalingGroup operation is in progress.')
    created_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time group was created.')
    new_instances_protected_from_scale_in = models.BooleanField(blank=True, null=True, db_comment='Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.')
    launch_configuration_name = models.TextField(blank=True, null=True, db_comment='The name of the associated launch configuration.')
    default_cooldown = models.BigIntegerField(blank=True, null=True, db_comment='The duration of the default cooldown period, in seconds.')
    desired_capacity = models.BigIntegerField(blank=True, null=True, db_comment='The desired size of the group.')
    max_instance_lifetime = models.BigIntegerField(blank=True, null=True, db_comment='The maximum amount of time, in seconds, that an instance can be in service.')
    max_size = models.BigIntegerField(blank=True, null=True, db_comment='The maximum size of the group.')
    min_size = models.BigIntegerField(blank=True, null=True, db_comment='The minimum size of the group.')
    health_check_grace_period = models.BigIntegerField(blank=True, null=True, db_comment='The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service.')
    health_check_type = models.TextField(blank=True, null=True, db_comment='The service to use for the health checks. The valid values are EC2 and ELB. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.')
    placement_group = models.TextField(blank=True, null=True, db_comment='The name of the placement group into which to launch your instances, if any.')
    service_linked_role_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf.')
    vpc_zone_identifier = models.TextField(blank=True, null=True, db_comment='One or more subnet IDs, if applicable, separated by commas.')
    launch_template_name = models.TextField(blank=True, null=True, db_comment='The launch template name for the group.')
    launch_template_id = models.TextField(blank=True, null=True, db_comment='The ID of the launch template.')
    launch_template_version = models.TextField(blank=True, null=True, db_comment='The version number, $Latest, or $Default.')
    on_demand_allocation_strategy = models.TextField(blank=True, null=True, db_comment='Indicates how to allocate instance types to fulfill On-Demand capacity. The only valid value is prioritized, which is also the default value. This strategy uses the order of instance types in the overrides to define the launch priority of each instance type.')
    on_demand_base_capacity = models.BigIntegerField(blank=True, null=True, db_comment="The minimum amount of the Auto Scaling group's capacity that must be fulfilled by On-Demand Instances. This base portion is provisioned first as group scales. Defaults to 0 if not specified.")
    on_demand_percentage_above_base_capacity = models.BigIntegerField(blank=True, null=True, db_comment='Controls the percentages of On-Demand Instances and Spot Instances for your additional capacity beyond OnDemandBaseCapacity. Expressed as a number (for example, 20 specifies 20% On-Demand Instances, 80% Spot Instances). Defaults to 100 if not specified. If set to 100, only On-Demand Instances are provisioned.')
    spot_allocation_strategy = models.TextField(blank=True, null=True, db_comment='Indicates how to allocate instances across Spot Instance pools. If the allocation strategy is lowest-price, the Auto Scaling group launches instances using the Spot pools with the lowest price, and evenly allocates your instances across the number of Spot pools that you specify. If the allocation strategy is capacity-optimized, the Auto Scaling group launches instances using Spot pools that are optimally chosen based on the available Spot capacity. Defaults to lowest-price if not specified.')
    spot_instance_pools = models.BigIntegerField(blank=True, null=True, db_comment='The number of Spot Instance pools across which to allocate your Spot Instances.')
    spot_max_price = models.TextField(blank=True, null=True, db_comment='The maximum price per unit hour that user is willing to pay for a Spot Instance. If the value of this parameter is blank (which is the default), the maximum Spot price is set at the On-Demand price.')
    mixed_instances_policy_launch_template_name = models.TextField(blank=True, null=True, db_comment='The ID of the launch template for mixed instances policy.')
    mixed_instances_policy_launch_template_id = models.TextField(blank=True, null=True, db_comment='The name of the launch template for mixed instances policy.')
    mixed_instances_policy_launch_template_version = models.TextField(blank=True, null=True, db_comment='The version of the launch template for mixed instances policy.')
    mixed_instances_policy_launch_template_overrides = models.JSONField(blank=True, null=True, db_comment='Any parameters that is specified in the list override the same parameters in the launch template.')
    availability_zones = models.JSONField(blank=True, null=True, db_comment='One or more Availability Zones for the group.')
    load_balancer_names = models.JSONField(blank=True, null=True, db_comment='One or more load balancers associated with the group.')
    target_group_arns = models.JSONField(blank=True, null=True, db_comment='The Amazon Resource Names (ARN) of the target groups for your load balancer.')
    instances = models.JSONField(blank=True, null=True, db_comment='The EC2 instances associated with the group.')
    enabled_metrics = models.JSONField(blank=True, null=True, db_comment='The metrics enabled for the group.')
    policies = models.JSONField(blank=True, null=True, db_comment='A set of scaling policies for the specified Auto Scaling group.')
    termination_policies = models.JSONField(blank=True, null=True, db_comment='The termination policies for the group.')
    suspended_processes = models.JSONField(blank=True, null=True, db_comment='The suspended processes associated with the group.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the Auto Scaling Group.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ec2_autoscaling_group'
        db_table_comment = 'AWS EC2 Autoscaling Group'


class AwsEc2CapacityReservation(models.Model):
    capacity_reservation_id = models.TextField(blank=True, null=True, db_comment='The ID of the capacity reservation.')
    capacity_reservation_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the capacity reservation.')
    instance_type = models.TextField(blank=True, null=True, db_comment='The type of instance for which the capacity reservation reserves capacity.')
    state = models.TextField(blank=True, null=True, db_comment="The current state of the capacity reservation. A capacity reservation can be in one of the following states: 'active', 'expired', 'cancelled', 'pending', 'failed'.")
    availability_zone = models.TextField(blank=True, null=True, db_comment='The availability zone in which the capacity is reserved.')
    availability_zone_id = models.TextField(blank=True, null=True, db_comment='The availability zone ID of the capacity reservation.')
    available_instance_count = models.BigIntegerField(blank=True, null=True, db_comment='The remaining capacity. Indicates the number of instances that can be launched in the capacity reservation.')
    create_date = models.DateTimeField(blank=True, null=True, db_comment='The date and time at which the capacity reservation was created.')
    ebs_optimized = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the capacity reservation supports EBS-optimized instances.')
    end_date = models.DateTimeField(blank=True, null=True, db_comment='The date and time at which the capacity reservation expires.')
    end_date_type = models.TextField(blank=True, null=True, db_comment="Indicates the way in which the capacity reservation ends. A capacity reservation can have one of the following end types: 'unlimited', 'limited'.")
    ephemeral_storage = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the capacity reservation supports instances with temporary, block-level storage.')
    instance_match_criteria = models.TextField(blank=True, null=True, db_comment="Indicates the type of instance launches that the capacity reservation accepts. The options include: 'open', 'targeted'.")
    instance_platform = models.TextField(blank=True, null=True, db_comment='The type of operating system for which the capacity reservation reserves capacity.')
    owner_id = models.TextField(blank=True, null=True, db_comment='The ID of the AWS account that owns the capacity reservation.')
    start_date = models.DateTimeField(blank=True, null=True, db_comment='The date and time at which the capacity reservation was started.')
    tenancy = models.TextField(blank=True, null=True, db_comment="Indicates the tenancy of the capacity reservation. A capacity reservation can have one of the following tenancy settings: 'default', 'dedicated'.")
    total_instance_count = models.BigIntegerField(blank=True, null=True, db_comment='The total number of instances for which the capacity reservation reserves capacity.')
    capacity_allocations = models.JSONField(blank=True, null=True, db_comment='Information about instance capacity usage.')
    tag_src = models.JSONField(blank=True, null=True, db_comment='Any tags assigned to the capacity reservation.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ec2_capacity_reservation'
        db_table_comment = 'AWS EC2 Capacity Reservation'


class AwsEc2ClassicLoadBalancer(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The friendly name of the Load Balancer.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the classic load balancer.')
    scheme = models.TextField(blank=True, null=True, db_comment='The load balancing scheme of load balancer.')
    created_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time the load balancer was created.')
    vpc_id = models.TextField(blank=True, null=True, db_comment='The ID of the VPC for the load balancer.')
    access_log_emit_interval = models.BigIntegerField(blank=True, null=True, db_comment='The interval for publishing the access logs.')
    access_log_enabled = models.BooleanField(blank=True, null=True, db_comment='Specifies whether access logs are enabled for the load balancer.')
    access_log_s3_bucket_name = models.TextField(blank=True, null=True, db_comment='The name of the Amazon S3 bucket where the access logs are stored.')
    access_log_s3_bucket_prefix = models.TextField(blank=True, null=True, db_comment='The logical hierarchy you created for your Amazon S3 bucket.')
    canonical_hosted_zone_name = models.TextField(blank=True, null=True, db_comment='The name of the Amazon Route 53 hosted zone for the load balancer.')
    canonical_hosted_zone_name_id = models.TextField(blank=True, null=True, db_comment='The ID of the Amazon Route 53 hosted zone for the load balancer.')
    connection_draining_enabled = models.BooleanField(blank=True, null=True, db_comment='Specifies whether connection draining is enabled for the load balancer.')
    connection_draining_timeout = models.BigIntegerField(blank=True, null=True, db_comment='The maximum time, in seconds, to keep the existing connections open before deregistering the instances.')
    connection_settings_idle_timeout = models.BigIntegerField(blank=True, null=True, db_comment='The time, in seconds, that the connection is allowed to be idle (no data has been sent over the connection) before it is closed by the load balancer.')
    cross_zone_load_balancing_enabled = models.BooleanField(blank=True, null=True, db_comment='Specifies whether cross-zone load balancing is enabled for the load balancer.')
    dns_name = models.TextField(blank=True, null=True, db_comment='The DNS name of the load balancer.')
    health_check_interval = models.BigIntegerField(blank=True, null=True, db_comment='The approximate interval, in seconds, between health checks of an individual instance.')
    health_check_timeout = models.BigIntegerField(blank=True, null=True, db_comment='The amount of time, in seconds, during which no response means a failed health check.')
    healthy_threshold = models.BigIntegerField(blank=True, null=True, db_comment='The number of consecutive health checks successes required before moving the instance to the Healthy state.')
    health_check_target = models.TextField(blank=True, null=True, db_comment='The instance being checked. The protocol is either TCP, HTTP, HTTPS, or SSL. The range of valid ports is one (1) through 65535.')
    source_security_group_name = models.TextField(blank=True, null=True, db_comment='The name of the security group.')
    source_security_group_owner_alias = models.TextField(blank=True, null=True, db_comment='The owner of the security group.')
    unhealthy_threshold = models.BigIntegerField(blank=True, null=True, db_comment='The number of consecutive health check failures required before moving the instance to the Unhealthy state.')
    additional_attributes = models.JSONField(blank=True, null=True, db_comment='A list of additional attributes.')
    app_cookie_stickiness_policies = models.JSONField(blank=True, null=True, db_comment='A list of the stickiness policies created using CreateAppCookieStickinessPolicy.')
    availability_zones = models.JSONField(blank=True, null=True, db_comment='A list of the Availability Zones for the load balancer.')
    backend_server_descriptions = models.JSONField(blank=True, null=True, db_comment='A list of information about your EC2 instances.')
    instances = models.JSONField(blank=True, null=True, db_comment='A list of the IDs of the instances for the load balancer.')
    lb_cookie_stickiness_policies = models.JSONField(blank=True, null=True, db_comment='A list of the stickiness policies created using CreateLBCookieStickinessPolicy.')
    listener_descriptions = models.JSONField(blank=True, null=True, db_comment='A list of the listeners for the load balancer')
    other_policies = models.JSONField(blank=True, null=True, db_comment='A list of policies other than the stickiness policies.')
    security_groups = models.JSONField(blank=True, null=True, db_comment='A list of the security groups for the load balancer.')
    subnets = models.JSONField(blank=True, null=True, db_comment='A list of the IDs of the subnets for the load balancer.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags attached to the load balancer.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ec2_classic_load_balancer'
        db_table_comment = 'AWS EC2 Classic Load Balancer'


class AwsEc2ClientVpnEndpoint(models.Model):
    client_vpn_endpoint_id = models.TextField(blank=True, null=True, db_comment='The ID of the client VPN endpoint.')
    transport_protocol = models.TextField(blank=True, null=True, db_comment='The transport protocol.')
    client_cidr_block = models.TextField(blank=True, null=True, db_comment='The IPv4 address range, in CIDR notation, from which client IP addresses are assigned.')  # This field type is a guess.
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time when the Client VPN endpoint was created.')
    deletion_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time when the Client VPN endpoint was deleted.')
    description = models.TextField(blank=True, null=True, db_comment='A brief description of the endpoint.')
    dns_name = models.TextField(blank=True, null=True, db_comment='The DNS name to be used by clients when connecting to the Client VPN endpoint.')
    self_service_portal_url = models.TextField(blank=True, null=True, db_comment='The URL of the self-service portal.')
    server_certificate_arn = models.TextField(blank=True, null=True, db_comment='The ARN of the server certificate.')
    session_timeout_hours = models.BigIntegerField(blank=True, null=True, db_comment='The maximum VPN session duration time in hours. Valid values: 8, 10, 12, 24. Defaults to 24.')
    split_tunnel = models.BooleanField(blank=True, null=True, db_comment='Indicates whether split-tunnel is enabled in the Client VPN endpoint.')
    vpc_id = models.TextField(blank=True, null=True, db_comment='The ID of the VPC.')
    vpn_port = models.BigIntegerField(blank=True, null=True, db_comment='The port number for the Client VPN endpoint.')
    authentication_options = models.JSONField(blank=True, null=True, db_comment='Information about the authentication method used by the Client VPN endpoint.')
    client_connect_options = models.JSONField(blank=True, null=True, db_comment='The options for managing connection authorization for new client connections.')
    connection_log_options = models.JSONField(blank=True, null=True, db_comment='Information about the client connection logging options for the Client VPN endpoint.')
    client_login_banner_options = models.JSONField(blank=True, null=True, db_comment='Options for enabling a customizable text banner that will be displayed on Amazon Web Services provided clients when a VPN session is established.')
    dns_servers = models.JSONField(blank=True, null=True, db_comment='Information about the DNS servers to be used for DNS resolution.')
    security_group_ids = models.JSONField(blank=True, null=True, db_comment='The IDs of the security groups for the target network.')
    status = models.JSONField(blank=True, null=True, db_comment='The current state of the Client VPN endpoint.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='Any tags assigned to the Client VPN endpoint.')
    vpn_protocol = models.JSONField(blank=True, null=True, db_comment='The protocol used by the VPN session.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ec2_client_vpn_endpoint'
        db_table_comment = 'AWS EC2 Client VPN Endpoint'


class AwsEc2GatewayLoadBalancer(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the load balancer.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the load balancer.')
    type = models.TextField(blank=True, null=True, db_comment='The type of load balancer.')
    state_code = models.TextField(blank=True, null=True, db_comment='The state of the load balancer.')
    scheme = models.TextField(blank=True, null=True, db_comment='The load balancing scheme of gateway load balancer.')
    dns_name = models.TextField(blank=True, null=True, db_comment='The public DNS name of the gateway load balancer.')
    vpc_id = models.TextField(blank=True, null=True, db_comment='The ID of the VPC for the gateway load balancer.')
    created_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time the load balancer was created.')
    ip_address_type = models.TextField(blank=True, null=True, db_comment='The type of IP addresses used by the subnets for your load balancer.')
    availability_zones = models.JSONField(blank=True, null=True, db_comment='The subnets for the gateway load balancer.')
    canonical_hosted_zone_id = models.TextField(blank=True, null=True, db_comment='The ID of the Amazon Route 53 hosted zone associated with the gateway load balancer.')
    customer_owned_ipv4_pool = models.TextField(blank=True, null=True, db_comment='The ID of the customer-owned address pool.')
    security_groups = models.JSONField(blank=True, null=True, db_comment='The IDs of the security groups for the gateway load balancer.')
    load_balancer_attributes = models.JSONField(blank=True, null=True, db_comment='Attributes deletion protection and cross_zone of gateway load balancer.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags attached to the load balancer.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ec2_gateway_load_balancer'
        db_table_comment = 'AWS EC2 Gateway Load Balancer'


class AwsEc2Instance(models.Model):
    instance_id = models.TextField(blank=True, null=True, db_comment='The ID of the instance.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the instance.')
    instance_type = models.TextField(blank=True, null=True, db_comment='The instance type.')
    instance_state = models.TextField(blank=True, null=True, db_comment='The state of the instance (pending | running | shutting-down | terminated | stopping | stopped).')
    monitoring_state = models.TextField(blank=True, null=True, db_comment='Indicates whether detailed monitoring is enabled (disabled | enabled).')
    disable_api_termination = models.BooleanField(blank=True, null=True, db_comment="If the value is true, instance can't be terminated through the Amazon EC2 console, CLI, or API.")
    ami_launch_index = models.BigIntegerField(blank=True, null=True, db_comment='The AMI launch index, which can be used to find this instance in the launch group.')
    architecture = models.TextField(blank=True, null=True, db_comment='The architecture of the image.')
    boot_mode = models.TextField(blank=True, null=True, db_comment='The boot mode of the instance.')
    capacity_reservation_id = models.TextField(blank=True, null=True, db_comment='The ID of the Capacity Reservation.')
    capacity_reservation_specification = models.JSONField(blank=True, null=True, db_comment='Information about the Capacity Reservation targeting option.')
    client_token = models.TextField(blank=True, null=True, db_comment='The idempotency token you provided when you launched the instance, if applicable.')
    cpu_options_core_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of CPU cores for the instance.')
    cpu_options_threads_per_core = models.BigIntegerField(blank=True, null=True, db_comment='The number of threads per CPU core.')
    ebs_optimized = models.BooleanField(blank=True, null=True, db_comment="Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types.")
    ena_support = models.BooleanField(blank=True, null=True, db_comment='Specifies whether enhanced networking with ENA is enabled.')
    hypervisor = models.TextField(blank=True, null=True, db_comment='The hypervisor type of the instance. The value xen is used for both Xen and Nitro hypervisors.')
    iam_instance_profile_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of IAM instance profile associated with the instance, if applicable.')
    iam_instance_profile_id = models.TextField(blank=True, null=True, db_comment='The ID of the instance profile associated with the instance, if applicable.')
    image_id = models.TextField(blank=True, null=True, db_comment='The ID of the AMI used to launch the instance.')
    instance_initiated_shutdown_behavior = models.TextField(blank=True, null=True, db_comment='Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).')
    instance_lifecycle = models.TextField(blank=True, null=True, db_comment='Indicates whether this is a spot instance or a scheduled instance.')
    kernel_id = models.TextField(blank=True, null=True, db_comment='The kernel ID')
    key_name = models.TextField(blank=True, null=True, db_comment='The name of the key pair, if this instance was launched with an associated key pair.')
    launch_time = models.DateTimeField(blank=True, null=True, db_comment='The time the instance was launched.')
    outpost_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the Outpost, if applicable.')
    placement_affinity = models.TextField(blank=True, null=True, db_comment='The affinity setting for the instance on the Dedicated Host.')
    placement_availability_zone = models.TextField(blank=True, null=True, db_comment='The Availability Zone of the instance.')
    placement_group_id = models.TextField(blank=True, null=True, db_comment='The ID of the placement group that the instance is in.')
    placement_group_name = models.TextField(blank=True, null=True, db_comment='The name of the placement group the instance is in.')
    placement_host_id = models.TextField(blank=True, null=True, db_comment='The ID of the Dedicated Host on which the instance resides.')
    placement_host_resource_group_arn = models.TextField(blank=True, null=True, db_comment='The ARN of the host resource group in which to launch the instances.')
    placement_partition_number = models.BigIntegerField(blank=True, null=True, db_comment='The ARN of the host resource group in which to launch the instances.')
    placement_tenancy = models.TextField(blank=True, null=True, db_comment='The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware.')
    platform = models.TextField(blank=True, null=True, db_comment="The value is 'Windows' for Windows instances; otherwise blank.")
    platform_details = models.TextField(blank=True, null=True, db_comment='The platform details value for the instance.')
    private_ip_address = models.GenericIPAddressField(blank=True, null=True, db_comment='The private IPv4 address assigned to the instance.')
    private_dns_name = models.TextField(blank=True, null=True, db_comment='The private DNS hostname name assigned to the instance. This DNS hostname can only be used inside the Amazon EC2 network. This name is not available until the instance enters the running state.')
    public_dns_name = models.TextField(blank=True, null=True, db_comment='The public DNS name assigned to the instance. This name is not available until the instance enters the running state.')
    public_ip_address = models.GenericIPAddressField(blank=True, null=True, db_comment='The public IPv4 address, or the Carrier IP address assigned to the instance, if applicable.')
    ram_disk_id = models.TextField(blank=True, null=True, db_comment='The RAM disk ID.')
    root_device_name = models.TextField(blank=True, null=True, db_comment='The device name of the root device volume (for example, /dev/sda1).')
    root_device_type = models.TextField(blank=True, null=True, db_comment='The root device type used by the AMI. The AMI can use an EBS volume or an instance store volume.')
    source_dest_check = models.BooleanField(blank=True, null=True, db_comment='Specifies whether to enable an instance launched in a VPC to perform NAT. This controls whether source/destination checking is enabled on the instance.')
    spot_instance_request_id = models.TextField(blank=True, null=True, db_comment='If the request is a Spot Instance request, the ID of the request.')
    sriov_net_support = models.TextField(blank=True, null=True, db_comment='Indicates whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.')
    state_code = models.BigIntegerField(blank=True, null=True, db_comment='The reason code for the state change.')
    state_transition_reason = models.TextField(blank=True, null=True, db_comment='The reason for the most recent state transition.')
    state_transition_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time, the instance state was last modified.')
    subnet_id = models.TextField(blank=True, null=True, db_comment='The ID of the subnet in which the instance is running.')
    tpm_support = models.TextField(blank=True, null=True, db_comment='If the instance is configured for NitroTPM support, the value is v2.0.')
    usage_operation = models.TextField(blank=True, null=True, db_comment='The usage operation value for the instance.')
    usage_operation_update_time = models.TextField(blank=True, null=True, db_comment='The time that the usage operation was last updated.')
    user_data = models.TextField(blank=True, null=True, db_comment='The user data of the instance.')
    virtualization_type = models.TextField(blank=True, null=True, db_comment='The virtualization type of the instance.')
    vpc_id = models.TextField(blank=True, null=True, db_comment='The ID of the VPC in which the instance is running.')
    block_device_mappings = models.JSONField(blank=True, null=True, db_comment='Block device mapping entries for the instance.')
    elastic_gpu_associations = models.JSONField(blank=True, null=True, db_comment='The Elastic GPU associated with the instance.')
    elastic_inference_accelerator_associations = models.JSONField(blank=True, null=True, db_comment='The elastic inference accelerator associated with the instance.')
    enclave_options = models.JSONField(blank=True, null=True, db_comment='Indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves.')
    hibernation_options = models.JSONField(blank=True, null=True, db_comment='Indicates whether the instance is enabled for hibernation.')
    launch_template_data = models.JSONField(blank=True, null=True, db_comment='The configuration data of the specified instance.')
    licenses = models.JSONField(blank=True, null=True, db_comment='The license configurations for the instance.')
    maintenance_options = models.JSONField(blank=True, null=True, db_comment='The metadata options for the instance.')
    metadata_options = models.JSONField(blank=True, null=True, db_comment='The metadata options for the instance.')
    network_interfaces = models.JSONField(blank=True, null=True, db_comment='The network interfaces for the instance.')
    private_dns_name_options = models.JSONField(blank=True, null=True, db_comment='The options for the instance hostname.')
    product_codes = models.JSONField(blank=True, null=True, db_comment='The product codes attached to this instance, if applicable.')
    security_groups = models.JSONField(blank=True, null=True, db_comment='The security groups for the instance.')
    instance_status = models.JSONField(blank=True, null=True, db_comment='The status of an instance. Instance status includes scheduled events, status checks and instance state information.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the instance.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ec2_instance'
        db_table_comment = 'AWS EC2 Instance'


class AwsEc2InstanceAvailability(models.Model):
    instance_type = models.TextField(blank=True, null=True, db_comment='The instance type. For more information, see [ Instance Types ](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) in the Amazon Elastic Compute Cloud User Guide.')
    location = models.TextField(blank=True, null=True, db_comment='The identifier for the location. This depends on the location type. For example, if the location type is region, the location is the Region code (for example, us-east-2.)')
    location_type = models.TextField(blank=True, null=True, db_comment='The type of location.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ec2_instance_availability'
        db_table_comment = 'AWS EC2 Instance Availability'


class AwsEc2InstanceMetricCpuUtilization(models.Model):
    instance_id = models.TextField(blank=True, null=True, db_comment='The ID of the instance.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ec2_instance_metric_cpu_utilization'
        db_table_comment = 'AWS EC2 Instance Cloudwatch Metrics - CPU Utilization'


class AwsEc2InstanceMetricCpuUtilizationDaily(models.Model):
    instance_id = models.TextField(blank=True, null=True, db_comment='The ID of the instance.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ec2_instance_metric_cpu_utilization_daily'
        db_table_comment = 'AWS EC2 Instance Cloudwatch Metrics - CPU Utilization (Daily)'


class AwsEc2InstanceMetricCpuUtilizationHourly(models.Model):
    instance_id = models.TextField(blank=True, null=True, db_comment='The ID of the instance.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ec2_instance_metric_cpu_utilization_hourly'
        db_table_comment = 'AWS EC2 Instance Cloudwatch Metrics - CPU Utilization (Hourly)'


class AwsEc2InstanceType(models.Model):
    instance_type = models.TextField(blank=True, null=True, db_comment='The instance type. For more information, see [ Instance Types ](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) in the Amazon Elastic Compute Cloud User Guide.')
    auto_recovery_supported = models.BooleanField(blank=True, null=True, db_comment='Indicates whether auto recovery is supported.')
    bare_metal = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the instance is a bare metal instance type.')
    burstable_performance_supported = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the instance type is a burstable performance instance type.')
    current_generation = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the instance type is current generation.')
    dedicated_hosts_supported = models.BooleanField(blank=True, null=True, db_comment='Indicates whether Dedicated Hosts are supported on the instance type.')
    free_tier_eligible = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the instance type is eligible for the free tier.')
    hibernation_supported = models.BooleanField(blank=True, null=True, db_comment='Indicates whether On-Demand hibernation is supported.')
    hypervisor = models.TextField(blank=True, null=True, db_comment='The hypervisor for the instance type.')
    instance_storage_supported = models.TextField(blank=True, null=True, db_comment='Describes the instance storage for the instance type.')
    ebs_info = models.JSONField(blank=True, null=True, db_comment='Describes the Amazon EBS settings for the instance type.')
    memory_info = models.JSONField(blank=True, null=True, db_comment='Describes the memory for the instance type.')
    network_info = models.JSONField(blank=True, null=True, db_comment='Describes the network settings for the instance type.')
    placement_group_info = models.JSONField(blank=True, null=True, db_comment='Describes the placement group settings for the instance type.')
    processor_info = models.JSONField(blank=True, null=True, db_comment='Describes the processor.')
    supported_root_device_types = models.JSONField(blank=True, null=True, db_comment='The supported root device types.')
    supported_usage_classes = models.JSONField(blank=True, null=True, db_comment='Indicates whether the instance type is offered for spot or On-Demand.')
    supported_virtualization_types = models.JSONField(blank=True, null=True, db_comment='The supported virtualization types.')
    v_cpu_info = models.JSONField(blank=True, null=True, db_comment='Describes the vCPU configurations for the instance type.')
    gpu_info = models.JSONField(blank=True, null=True, db_comment='Describes the GPU accelerator settings for the instance type.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ec2_instance_type'
        db_table_comment = 'AWS EC2 Instance Type'


class AwsEc2KeyPair(models.Model):
    key_name = models.TextField(blank=True, null=True, db_comment='The name of the key pair')
    key_pair_id = models.TextField(blank=True, null=True, db_comment='The ID of the key pair')
    key_fingerprint = models.TextField(blank=True, null=True, db_comment='If key pair was created using CreateKeyPair, this is the SHA-1 digest of the DER encoded private key. If key pair was created using ImportKeyPair to provide AWS the public key, this is the MD5 public key fingerprint as specified in section 4 of RFC4716')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the key pair')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    create_time = models.DateTimeField(blank=True, null=True, db_comment='The time that the keypair was created or imported')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ec2_key_pair'
        db_table_comment = 'AWS EC2 Key Pair'


class AwsEc2LaunchConfiguration(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the launch configuration.')
    launch_configuration_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the launch configuration.')
    created_time = models.DateTimeField(blank=True, null=True, db_comment='The creation date and time for the launch configuration.')
    image_id = models.TextField(blank=True, null=True, db_comment='The ID of the Amazon Machine Image (AMI) to use to launch EC2 instances.')
    instance_type = models.TextField(blank=True, null=True, db_comment='The instance type for the instances.')
    associate_public_ip_address = models.BooleanField(blank=True, null=True, db_comment="For Auto Scaling groups that are running in a VPC, specifies whether to assign a public IP address to the group's instances.")
    kernel_id = models.TextField(blank=True, null=True, db_comment='The ID of the kernel associated with the AMI.')
    key_name = models.TextField(blank=True, null=True, db_comment='The name of the key pair to be associated with instances.')
    ramdisk_id = models.TextField(blank=True, null=True, db_comment='The ID of the RAM disk associated with the AMI.')
    ebs_optimized = models.BooleanField(blank=True, null=True, db_comment='Specifies whether the launch configuration is optimized for EBS I/O (true) or not (false).')
    classic_link_vpc_id = models.TextField(blank=True, null=True, db_comment='The ID of a ClassicLink-enabled VPC to link EC2-Classic instances to.')
    spot_price = models.TextField(blank=True, null=True, db_comment='The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specified exceeds the current Spot price.')
    user_data = models.TextField(blank=True, null=True, db_comment='The Base64-encoded user data to make available to the launched EC2 instances.')
    placement_tenancy = models.TextField(blank=True, null=True, db_comment='The tenancy of the instance, either default or dedicated. An instance with dedicated tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC.')
    iam_instance_profile = models.TextField(blank=True, null=True, db_comment='The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance.')
    instance_monitoring_enabled = models.BooleanField(blank=True, null=True, db_comment='Describes whether detailed monitoring is enabled for the Auto Scaling instances.')
    metadata_options_http_endpoint = models.TextField(blank=True, null=True, db_comment='This parameter enables or disables the HTTP metadata endpoint on instances. If the parameter is not specified, the default state is enabled.')
    metadata_options_put_response_hop_limit = models.BigIntegerField(blank=True, null=True, db_comment='The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel.')
    metadata_options_http_tokens = models.TextField(blank=True, null=True, db_comment='The state of token usage for your instance metadata requests. If the parameter is not specified in the request, the default state is optional.')
    block_device_mappings = models.JSONField(blank=True, null=True, db_comment='A block device mapping, which specifies the block devices for the instance.')
    classic_link_vpc_security_groups = models.JSONField(blank=True, null=True, db_comment='The IDs of one or more security groups for the VPC specified in ClassicLinkVPCId.')
    security_groups = models.JSONField(blank=True, null=True, db_comment='A list that contains the security groups to assign to the instances in the Auto Scaling group.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ec2_launch_configuration'
        db_table_comment = 'AWS EC2 Launch Configuration'


class AwsEc2LaunchTemplate(models.Model):
    launch_template_name = models.TextField(blank=True, null=True, db_comment='The name of the launch template.')
    launch_template_id = models.TextField(blank=True, null=True, db_comment='The ID of the launch template.')
    create_time = models.DateTimeField(blank=True, null=True, db_comment='The time launch template was created.')
    created_by = models.TextField(blank=True, null=True, db_comment='The principal that created the launch template.')
    default_version_number = models.BigIntegerField(blank=True, null=True, db_comment='The version number of the default version of the launch template.')
    latest_version_number = models.BigIntegerField(blank=True, null=True, db_comment='The name of the Application-Layer Protocol Negotiation (ALPN) policy.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='The tags for the launch template.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ec2_launch_template'
        db_table_comment = 'AWS EC2 Launch Template'


class AwsEc2LaunchTemplateVersion(models.Model):
    launch_template_name = models.TextField(blank=True, null=True, db_comment='The name of the launch template.')
    launch_template_id = models.TextField(blank=True, null=True, db_comment='The ID of the launch template.')
    create_time = models.DateTimeField(blank=True, null=True, db_comment='The time the version was created.')
    created_by = models.TextField(blank=True, null=True, db_comment='The principal that created the version.')
    default_version = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the version is the default version.')
    disable_api_stop = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the instance is enabled for stop protection.')
    disable_api_termination = models.BooleanField(blank=True, null=True, db_comment='If set to true, indicates that the instance cannot be terminated using the Amazon EC2 console, command line tool, or API.')
    ebs_optimized = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the instance is optimized for Amazon EBS I/O.')
    image_id = models.TextField(blank=True, null=True, db_comment='The ID of the AMI or a Systems Manager parameter.')
    instance_type = models.TextField(blank=True, null=True, db_comment='The instance type.')
    kernel_id = models.TextField(blank=True, null=True, db_comment='The ID of the kernel, if applicable.')
    key_name = models.TextField(blank=True, null=True, db_comment='The name of the key pair.')
    ram_disk_id = models.TextField(blank=True, null=True, db_comment='The ID of the RAM disk, if applicable.')
    security_groups = models.TextField(blank=True, null=True, db_comment='The security group names.')
    security_group_ids = models.TextField(blank=True, null=True, db_comment='The security group IDs.')
    version_description = models.TextField(blank=True, null=True, db_comment='The description for the version.')
    version_number = models.BigIntegerField(blank=True, null=True, db_comment='The version number.')
    user_data = models.TextField(blank=True, null=True, db_comment='The user data of the launch template.')
    launch_template_data = models.JSONField(blank=True, null=True, db_comment='Information about the launch template.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ec2_launch_template_version'
        db_table_comment = 'AWS EC2 Launch Template Version'


class AwsEc2LoadBalancerListener(models.Model):
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the listener.')
    load_balancer_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the load balancer.')
    port = models.BigIntegerField(blank=True, null=True, db_comment='The port on which the load balancer is listening.')
    protocol = models.TextField(blank=True, null=True, db_comment='The protocol for connections from clients to the load balancer.')
    ssl_policy = models.TextField(blank=True, null=True, db_comment='The security policy that defines which protocols and ciphers are supported.')
    alpn_policy = models.JSONField(blank=True, null=True, db_comment='The name of the Application-Layer Protocol Negotiation (ALPN) policy.')
    certificates = models.JSONField(blank=True, null=True, db_comment='The default certificate for the listener.')
    default_actions = models.JSONField(blank=True, null=True, db_comment='The default actions for the listener.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ec2_load_balancer_listener'
        db_table_comment = 'AWS EC2 Load Balancer Listener'


class AwsEc2ManagedPrefixList(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the prefix list.')
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The ID of the prefix list.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the prefix list.')
    state = models.TextField(blank=True, null=True, db_comment='The current state of the prefix list.')
    address_family = models.TextField(blank=True, null=True, db_comment='The IP address version of the prefix list.')
    max_entries = models.BigIntegerField(blank=True, null=True, db_comment='The maximum number of entries for the prefix list.')
    owner_id = models.TextField(blank=True, null=True, db_comment='The ID of the owner of the prefix list.')
    state_message = models.TextField(blank=True, null=True, db_comment='The message regarding the current state of the prefix list.')
    version = models.BigIntegerField(blank=True, null=True, db_comment='The version of the prefix list.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='The tags for the prefix list.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ec2_managed_prefix_list'
        db_table_comment = 'AWS EC2 Managed Prefix List'


class AwsEc2ManagedPrefixListEntry(models.Model):
    prefix_list_id = models.TextField(blank=True, null=True, db_comment='The ID of the prefix list.')
    cidr = models.TextField(blank=True, null=True, db_comment='The CIDR block.')
    description = models.TextField(blank=True, null=True, db_comment='The description of the entry.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ec2_managed_prefix_list_entry'
        db_table_comment = 'AWS EC2 Managed Prefix List Entry'


class AwsEc2NetworkInterface(models.Model):
    network_interface_id = models.TextField(blank=True, null=True, db_comment='The ID of the network interface.')
    status = models.TextField(blank=True, null=True, db_comment='The status of the network interface.')
    interface_type = models.TextField(blank=True, null=True, db_comment='The type of network interface.')
    description = models.TextField(blank=True, null=True, db_comment='A description.')
    availability_zone = models.TextField(blank=True, null=True, db_comment='The Availability Zone.')
    owner_id = models.TextField(blank=True, null=True, db_comment='The AWS account ID of the owner of the network interface.')
    association_allocation_id = models.TextField(blank=True, null=True, db_comment='Allocation id for the association. Association can be an Elastic IP address (IPv4 only), or a Carrier IP address.')
    association_carrier_ip = models.GenericIPAddressField(blank=True, null=True, db_comment='The carrier IP address associated with the network interface.')
    association_customer_owned_ip = models.GenericIPAddressField(blank=True, null=True, db_comment='The customer-owned IP address associated with the network interface.')
    association_id = models.TextField(blank=True, null=True, db_comment='The association ID.')
    association_ip_owner_id = models.TextField(blank=True, null=True, db_comment='The ID of the Elastic IP address owner.')
    association_public_dns_name = models.TextField(blank=True, null=True, db_comment='The public DNS name of the association.')
    association_public_ip = models.GenericIPAddressField(blank=True, null=True, db_comment='The address of the Elastic IP address bound to the network interface.')
    attached_instance_id = models.TextField(blank=True, null=True, db_comment='The ID of the attached instance.')
    attached_instance_owner_id = models.TextField(blank=True, null=True, db_comment='The AWS account ID of the owner of the attached instance.')
    attachment_id = models.TextField(blank=True, null=True, db_comment='The ID of the network interface attachment.')
    attachment_status = models.TextField(blank=True, null=True, db_comment='The attachment state.')
    attachment_time = models.DateTimeField(blank=True, null=True, db_comment='The timestamp indicating when the attachment initiated.')
    delete_on_instance_termination = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the network interface is deleted when the instance is terminated.')
    device_index = models.BigIntegerField(blank=True, null=True, db_comment='The device index of the network interface attachment on the instance.')
    mac_address = models.TextField(blank=True, null=True, db_comment='The MAC address of the interface.')
    outpost_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the Outpost, if applicable.')
    private_dns_name = models.TextField(blank=True, null=True, db_comment='The private DNS name')
    private_ip_address = models.GenericIPAddressField(blank=True, null=True, db_comment='The IPv4 address of the network interface within the subnet.')
    requester_id = models.TextField(blank=True, null=True, db_comment='The ID of the entity that launched the instance on your behalf (for example, AWS Management Console or Auto Scaling).')
    requester_managed = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the network interface is being managed by AWS.')
    source_dest_check = models.BooleanField(blank=True, null=True, db_comment='Indicates whether traffic to or from the instance is validated.')
    subnet_id = models.TextField(blank=True, null=True, db_comment='The ID of the subnet.')
    vpc_id = models.TextField(blank=True, null=True, db_comment='The ID of the VPC.')
    groups = models.JSONField(blank=True, null=True, db_comment='Any security groups for the network interface.')
    ipv6_addresses = models.JSONField(blank=True, null=True, db_comment='The IPv6 addresses associated with the network interface.')
    private_ip_addresses = models.JSONField(blank=True, null=True, db_comment='The IPv4 address of the network interface within the subnet.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags that are attached to the network interface.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ec2_network_interface'
        db_table_comment = 'AWS EC2 Network Interface'


class AwsEc2NetworkLoadBalancer(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The friendly name of the Load Balancer')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the load balancer')
    type = models.TextField(blank=True, null=True, db_comment='The type of load balancer')
    scheme = models.TextField(blank=True, null=True, db_comment='The load balancing scheme of load balancer')
    canonical_hosted_zone_id = models.TextField(blank=True, null=True, db_comment='The ID of the Amazon Route 53 hosted zone associated with the load balancer')
    created_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time the load balancer was created')
    customer_owned_ipv4_pool = models.TextField(blank=True, null=True, db_comment='The ID of the customer-owned address pool')
    dns_name = models.TextField(blank=True, null=True, db_comment='The public DNS name of the load balancer')
    ip_address_type = models.TextField(blank=True, null=True, db_comment='The type of IP addresses used by the subnets for your load balancer')
    state_code = models.TextField(blank=True, null=True, db_comment='Current state of the load balancer')
    state_reason = models.TextField(blank=True, null=True, db_comment='A description of the state')
    vpc_id = models.TextField(blank=True, null=True, db_comment='The ID of the VPC for the load balancer')
    availability_zones = models.JSONField(blank=True, null=True, db_comment='The subnets for the load balancer')
    security_groups = models.JSONField(blank=True, null=True, db_comment='The IDs of the security groups for the load balancer')
    load_balancer_attributes = models.JSONField(blank=True, null=True, db_comment='The AWS account ID of the image owner')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags attached to the load balancer')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ec2_network_load_balancer'
        db_table_comment = 'AWS EC2 Network Load Balancer'


class AwsEc2NetworkLoadBalancerMetricNetFlowCount(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The friendly name of the Load Balancer.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ec2_network_load_balancer_metric_net_flow_count'
        db_table_comment = 'AWS EC2 Network Load Balancer Metrics - Net Flow Count'


class AwsEc2NetworkLoadBalancerMetricNetFlowCountDaily(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The friendly name of the Load Balancer.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ec2_network_load_balancer_metric_net_flow_count_daily'
        db_table_comment = 'AWS EC2 Network Load Balancer Metrics - Net Flow Count (Daily)'


class AwsEc2RegionalSettings(models.Model):
    default_ebs_encryption_enabled = models.BooleanField(blank=True, null=True, db_comment='Indicates whether encryption by default is enabled.')
    default_ebs_encryption_key = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) or alias of the default CMK for encryption by default.')
    snapshot_block_public_access_state = models.TextField(blank=True, null=True, db_comment='Gets the current state of block public access for snapshots setting for the account and Region.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ec2_regional_settings'
        db_table_comment = 'AWS EC2 Regional Settings'


class AwsEc2ReservedInstance(models.Model):
    reserved_instance_id = models.TextField(blank=True, null=True, db_comment='The ID of the Reserved instance.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the instance.')
    instance_type = models.TextField(blank=True, null=True, db_comment='The instance type on which the Reserved Instance can be used.')
    instance_state = models.TextField(blank=True, null=True, db_comment='The state of the Reserved Instance purchase.')
    availability_zone = models.TextField(blank=True, null=True, db_comment='The Availability Zone in which the Reserved Instance can be used.')
    currency_code = models.TextField(blank=True, null=True, db_comment="The currency of the Reserved Instance. It's specified using ISO 4217 standard currency codes. At this time, the only supported currency is USD.")
    duration = models.BigIntegerField(blank=True, null=True, db_comment='The duration of the Reserved Instance, in seconds.')
    end_time = models.DateTimeField(blank=True, null=True, db_comment='The time when the Reserved Instance expires.')
    fixed_price = models.FloatField(blank=True, null=True, db_comment='The purchase price of the Reserved Instance.')
    instance_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of reservations purchased.')
    instance_tenancy = models.TextField(blank=True, null=True, db_comment='The tenancy of the instance.')
    offering_class = models.TextField(blank=True, null=True, db_comment='The offering class of the Reserved Instance.')
    offering_type = models.TextField(blank=True, null=True, db_comment='The Reserved Instance offering type.')
    product_description = models.TextField(blank=True, null=True, db_comment='The Reserved Instance product platform description.')
    scope = models.TextField(blank=True, null=True, db_comment='The scope of the Reserved Instance.')
    start_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time the Reserved Instance started.')
    usage_price = models.FloatField(blank=True, null=True, db_comment='The usage price of the Reserved Instance, per hour.')
    reserved_instances_modifications = models.JSONField(blank=True, null=True, db_comment='The Reserved Instance modification information.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the reserved instance.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ec2_reserved_instance'
        db_table_comment = 'AWS EC2 Reserved Instance'


class AwsEc2SpotPrice(models.Model):
    availability_zone = models.TextField(blank=True, null=True, db_comment='The Availability Zone.')
    instance_type = models.TextField(blank=True, null=True, db_comment='The instance type.')
    product_description = models.TextField(blank=True, null=True, db_comment='A general description of the AMI.')
    spot_price = models.TextField(blank=True, null=True, db_comment='The maximum price per unit hour that you are willing to pay for a Spot Instance.')
    create_timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp of the Spot price history.')
    start_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time, up to the past 90 days, from which to start retrieving the price history data.')
    end_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time, up to the current date, from which to stop retrieving the price history data.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ec2_spot_price'
        db_table_comment = 'AWS EC2 Spot Price History'


class AwsEc2SslPolicy(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the policy.')
    ciphers = models.JSONField(blank=True, null=True, db_comment='A list of ciphers.')
    ssl_protocols = models.JSONField(blank=True, null=True, db_comment='A list of protocols.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ec2_ssl_policy'
        db_table_comment = 'AWS EC2 SSL Policy'


class AwsEc2TargetGroup(models.Model):
    target_group_name = models.TextField(blank=True, null=True, db_comment='The name of the target group.')
    target_group_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the target group.')
    target_type = models.TextField(blank=True, null=True, db_comment='The type of target that is specified when registering targets with this target group. The possible values are instance (register targets by instance ID), ip (register targets by IP address), or lambda (register a single Lambda function as a target).')
    load_balancer_arns = models.JSONField(blank=True, null=True, db_comment='The Amazon Resource Names (ARN) of the load balancers that route traffic to this target group.')
    port = models.BigIntegerField(blank=True, null=True, db_comment='The port on which the targets are listening. Not used if the target is a Lambda function.')
    vpc_id = models.TextField(blank=True, null=True, db_comment='The ID of the VPC for the target.')
    protocol = models.TextField(blank=True, null=True, db_comment='The protocol to use for routing traffic to the target.')
    matcher_http_code = models.TextField(blank=True, null=True, db_comment='The HTTP codes to use when checking for a successful response from a target.')
    matcher_grpc_code = models.TextField(blank=True, null=True, db_comment='The gRPC codes to use when checking for a successful response from a target.')
    healthy_threshold_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of consecutive health checks successes required before considering an unhealthy target healthy.')
    unhealthy_threshold_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of consecutive health checks successes required before considering an unhealthy target healthy.')
    health_check_enabled = models.BooleanField(blank=True, null=True, db_comment='Indicates whether health checks are enabled.')
    health_check_interval_seconds = models.BigIntegerField(blank=True, null=True, db_comment='The approximate amount of time, in seconds, between health checks of an individual target.')
    health_check_path = models.TextField(blank=True, null=True, db_comment='The destination for health checks on the target.')
    health_check_port = models.TextField(blank=True, null=True, db_comment='The port to use to connect with the target.')
    health_check_protocol = models.TextField(blank=True, null=True, db_comment='The protocol to use to connect with the target. The GENEVE, TLS, UDP, and TCP_UDP protocols are not supported for health checks.')
    health_check_timeout_seconds = models.BigIntegerField(blank=True, null=True, db_comment='The amount of time, in seconds, during which no response means a failed health check.')
    target_health_descriptions = models.JSONField(blank=True, null=True, db_comment='Contains information about the health of the target.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags associated with target group.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ec2_target_group'
        db_table_comment = 'AWS EC2 Target Group'


class AwsEc2TransitGateway(models.Model):
    transit_gateway_id = models.TextField(blank=True, null=True, db_comment='The ID of the transit gateway.')
    transit_gateway_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the transit gateway.')
    state = models.TextField(blank=True, null=True, db_comment='The state of the transit gateway.')
    owner_id = models.TextField(blank=True, null=True, db_comment='The ID of the AWS account ID that owns the transit gateway.')
    description = models.TextField(blank=True, null=True, db_comment='The description of the transit gateway.')
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time when transit gateway was created.')
    amazon_side_asn = models.BigIntegerField(blank=True, null=True, db_comment='A private Autonomous System Number (ASN) for the Amazon side of a BGP session. The range is 64512 to 65534 for 16-bit ASNs and 4200000000 to 4294967294 for 32-bit ASNs.')
    association_default_route_table_id = models.TextField(blank=True, null=True, db_comment='The ID of the default association route table.')
    auto_accept_shared_attachments = models.TextField(blank=True, null=True, db_comment='Indicates whether attachment requests are automatically accepted.')
    default_route_table_association = models.TextField(blank=True, null=True, db_comment='Indicates whether resource attachments are automatically associated with the default association route table.')
    default_route_table_propagation = models.TextField(blank=True, null=True, db_comment='Indicates whether resource attachments are automatically associated with the default association route table.')
    dns_support = models.TextField(blank=True, null=True, db_comment='Indicates whether DNS support is enabled.')
    multicast_support = models.TextField(blank=True, null=True, db_comment='Indicates whether multicast is enabled on the transit gateway.')
    propagation_default_route_table_id = models.TextField(blank=True, null=True, db_comment='The ID of the default propagation route table.')
    vpn_ecmp_support = models.TextField(blank=True, null=True, db_comment='Indicates whether Equal Cost Multipath Protocol support is enabled.')
    cidr_blocks = models.JSONField(blank=True, null=True, db_comment='A list of transit gateway CIDR blocks.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags that are assigned to the transit gateway.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ec2_transit_gateway'
        db_table_comment = 'AWS EC2 Transit Gateway'


class AwsEc2TransitGatewayRoute(models.Model):
    transit_gateway_route_table_id = models.TextField(blank=True, null=True, db_comment='The ID of the transit gateway route table.')
    destination_cidr_block = models.TextField(blank=True, null=True, db_comment='The CIDR block used for destination matches.')  # This field type is a guess.
    prefix_list_id = models.TextField(blank=True, null=True, db_comment='The ID of the prefix list used for destination matches.')
    state = models.TextField(blank=True, null=True, db_comment='The state of the route.')
    type = models.TextField(blank=True, null=True, db_comment='The route type.')
    transit_gateway_attachments = models.JSONField(blank=True, null=True, db_comment='The attachments.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ec2_transit_gateway_route'
        db_table_comment = 'AWS EC2 Transit Gateway Route'


class AwsEc2TransitGatewayRouteTable(models.Model):
    transit_gateway_route_table_id = models.TextField(blank=True, null=True, db_comment='The ID of the transit gateway route table.')
    transit_gateway_id = models.TextField(blank=True, null=True, db_comment='The ID of the transit gateway.')
    state = models.TextField(blank=True, null=True, db_comment='The state of the transit gateway route table.')
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='The creation time of transit gateway route table.')
    default_association_route_table = models.BooleanField(blank=True, null=True, db_comment='Indicates whether this is the default association route table for the transit gateway.')
    default_propagation_route_table = models.BooleanField(blank=True, null=True, db_comment='Indicates whether this is the default propagation route table for the transit gateway.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ec2_transit_gateway_route_table'
        db_table_comment = 'AWS EC2 Transit Gateway Route Table'


class AwsEc2TransitGatewayVpcAttachment(models.Model):
    transit_gateway_attachment_id = models.TextField(blank=True, null=True, db_comment='The ID of the transit gateway attachment.')
    transit_gateway_id = models.TextField(blank=True, null=True, db_comment='The ID of the transit gateway.')
    transit_gateway_owner_id = models.TextField(blank=True, null=True, db_comment='The ID of the AWS account that owns the transit gateway.')
    state = models.TextField(blank=True, null=True, db_comment='The attachment state of the transit gateway attachment.')
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='The creation time of the transit gateway attachment.')
    resource_id = models.TextField(blank=True, null=True, db_comment='The ID of the resource.')
    resource_type = models.TextField(blank=True, null=True, db_comment='The resource type of the transit gateway attachment.')
    resource_owner_id = models.TextField(blank=True, null=True, db_comment='The ID of the AWS account that owns the resource.')
    association_state = models.TextField(blank=True, null=True, db_comment='The state of the association.')
    association_transit_gateway_route_table_id = models.TextField(blank=True, null=True, db_comment='The ID of the route table for the transit gateway.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ec2_transit_gateway_vpc_attachment'


class AwsEcrImage(models.Model):
    repository_name = models.TextField(blank=True, null=True, db_comment='The name of the repository.')
    artifact_media_type = models.TextField(blank=True, null=True, db_comment='The artifact media type of the image.')
    image_digest = models.TextField(blank=True, null=True, db_comment='The sha256 digest of the image manifest.')
    image_uri = models.TextField(blank=True, null=True, db_comment='The URI for the image.')
    image_manifest_media_type = models.TextField(blank=True, null=True, db_comment='The media type of the image manifest.')
    image_pushed_at = models.DateTimeField(blank=True, null=True, db_comment='The date and time, expressed in standard JavaScript date format, at which the current image was pushed to the repository.')
    image_size_in_bytes = models.BigIntegerField(blank=True, null=True, db_comment='The size, in bytes, of the image in the repository.')
    last_recorded_pull_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time, expressed in standard JavaScript date format, when Amazon ECR recorded the last image pull.')
    registry_id = models.TextField(blank=True, null=True, db_comment='The Amazon Web Services account ID associated with the registry to which this image belongs.')
    image_scan_findings_summary = models.JSONField(blank=True, null=True, db_comment='A summary of the last completed image scan.')
    image_scan_status = models.JSONField(blank=True, null=True, db_comment='The current state of the scan.')
    image_tags = models.JSONField(blank=True, null=True, db_comment='The list of tags associated with this image.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ecr_image'
        db_table_comment = 'AWS ECR Image'



class AwsEcrRegistryScanningConfiguration(models.Model):
    registry_id = models.TextField(blank=True, null=True, db_comment='The ID of the registry.')
    scanning_configuration = models.JSONField(blank=True, null=True, db_comment='The scanning configuration for the registry.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ecr_registry_scanning_configuration'
        db_table_comment = 'AWS ECR Registry Scanning Configuration'


class AwsEcrRepository(models.Model):
    repository_name = models.TextField(blank=True, null=True, db_comment='The name of the repository.')
    registry_id = models.TextField(blank=True, null=True, db_comment='The AWS account ID associated with the registry that contains the repositories to be described.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) that identifies the repository.')
    repository_uri = models.TextField(blank=True, null=True, db_comment='The URI for the repository.')
    created_at = models.DateTimeField(blank=True, null=True, db_comment='The date and time, in JavaScript date format, when the repository was created.')
    image_tag_mutability = models.TextField(blank=True, null=True, db_comment='The tag mutability setting for the repository.')
    last_evaluated_at = models.DateTimeField(blank=True, null=True, db_comment='The time stamp of the last time that the lifecycle policy was run.')
    max_results = models.BigIntegerField(blank=True, null=True, db_comment='The maximum number of repository results returned by DescribeRepositories.')
    encryption_configuration = models.JSONField(blank=True, null=True, db_comment='The encryption configuration for the repository.')
    image_details = models.JSONField(blank=True, null=True, db_comment='[DEPRECATED] This column has been deprecated and will be removed in a future release, use the aws_ecr_image table instead. A list of ImageDetail objects that contain data about the image.')
    repository_scanning_configuration = models.JSONField(blank=True, null=True, db_comment='Gets the scanning configuration for one or more repositories.')
    image_scanning_configuration = models.JSONField(blank=True, null=True, db_comment='The image scanning configuration for a repository.')
    image_scanning_findings = models.JSONField(blank=True, null=True, db_comment='[DEPRECATED] This column has been deprecated and will be removed in a future release, use the aws_ecr_image_scan_finding table instead. Scan findings for an image.')
    lifecycle_policy = models.JSONField(blank=True, null=True, db_comment='The JSON lifecycle policy text.')
    policy = models.JSONField(blank=True, null=True, db_comment='The JSON repository policy text associated with the repository.')
    policy_std = models.JSONField(blank=True, null=True, db_comment='Contains the policy in a canonical form for easier searching.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the Repository.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ecr_repository'
        db_table_comment = 'AWS ECR Repository'


class AwsEcrpublicRepository(models.Model):
    repository_name = models.TextField(blank=True, null=True, db_comment='The name of the repository.')
    registry_id = models.TextField(blank=True, null=True, db_comment='The AWS account ID associated with the public registry that contains the repository.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) that identifies the repository.')
    repository_uri = models.TextField(blank=True, null=True, db_comment='The URI for the repository.')
    created_at = models.DateTimeField(blank=True, null=True, db_comment='The date and time, in JavaScript date format, when the repository was created.')
    image_details = models.JSONField(blank=True, null=True, db_comment='A list of ImageDetail objects that contain data about the image.')
    policy = models.JSONField(blank=True, null=True, db_comment='The JSON repository policy text associated with the repository.')
    policy_std = models.JSONField(blank=True, null=True, db_comment='Contains the policy in a canonical form for easier searching.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the repository.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ecrpublic_repository'
        db_table_comment = 'AWS ECR Public Repository'


class AwsEcsCluster(models.Model):
    cluster_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) that identifies the cluster.')
    cluster_name = models.TextField(blank=True, null=True, db_comment='A user-generated string that you use to identify your cluster.')
    active_services_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of services that are running on the cluster in an ACTIVE state.')
    pending_tasks_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of tasks in the cluster that are in the PENDING state.')
    registered_container_instances_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of container instances registered into the cluster. This includes container instances in both ACTIVE and DRAINING status.')
    running_tasks_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of tasks in the cluster that are in the RUNNING state.')
    status = models.TextField(blank=True, null=True, db_comment='The status of the cluster.')
    attachments_status = models.TextField(blank=True, null=True, db_comment='The status of the capacity providers associated with the cluster.')
    attachments = models.JSONField(blank=True, null=True, db_comment='The resources attached to a cluster. When using a capacity provider with a cluster, the Auto Scaling plan that is created will be returned as a cluster attachment.')
    capacity_providers = models.JSONField(blank=True, null=True, db_comment='The capacity providers associated with the cluster.')
    default_capacity_provider_strategy = models.JSONField(blank=True, null=True, db_comment='The default capacity provider strategy for the cluster.')
    settings = models.JSONField(blank=True, null=True, db_comment='The settings for the cluster. This parameter indicates whether CloudWatch Container Insights is enabled or disabled for a cluster.')
    statistics = models.JSONField(blank=True, null=True, db_comment='Additional information about your clusters that are separated by launch type.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags attached to the cluster.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ecs_cluster'
        db_table_comment = 'AWS ECS Cluster'


class AwsEcsClusterMetricCpuUtilization(models.Model):
    cluster_name = models.TextField(blank=True, null=True, db_comment='A user-generated string that you use to identify your cluster.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ecs_cluster_metric_cpu_utilization'
        db_table_comment = 'AWS ECS Cluster Cloudwatch Metrics - CPU Utilization'


class AwsEcsClusterMetricCpuUtilizationDaily(models.Model):
    cluster_name = models.TextField(blank=True, null=True, db_comment='A user-generated string that you use to identify your cluster.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ecs_cluster_metric_cpu_utilization_daily'
        db_table_comment = 'AWS ECS Cluster Cloudwatch Metrics - CPU Utilization (Daily)'


class AwsEcsClusterMetricCpuUtilizationHourly(models.Model):
    cluster_name = models.TextField(blank=True, null=True, db_comment='A user-generated string that you use to identify your cluster.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ecs_cluster_metric_cpu_utilization_hourly'
        db_table_comment = 'AWS ECS Cluster Cloudwatch Metrics - CPU Utilization (Hourly)'


class AwsEcsContainerInstance(models.Model):
    arn = models.TextField(blank=True, null=True, db_comment='The namespace Amazon Resource Name (ARN) of the container instance.')
    ec2_instance_id = models.TextField(blank=True, null=True, db_comment='The EC2 instance ID of the container instance.')
    cluster_arn = models.TextField(blank=True, null=True, db_comment='The ARN of the cluster.')
    agent_connected = models.BooleanField(blank=True, null=True, db_comment='True if the agent is connected to Amazon ECS.')
    agent_update_status = models.TextField(blank=True, null=True, db_comment='The status of the most recent agent update.')
    attachments = models.JSONField(blank=True, null=True, db_comment='The resources attached to a container instance, such as elastic network interfaces.')
    attributes = models.JSONField(blank=True, null=True, db_comment='The attributes set for the container instance.')
    capacity_provider_name = models.TextField(blank=True, null=True, db_comment='The capacity provider associated with the container instance.')
    pending_tasks_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of tasks on the container instance that are in the PENDING status.')
    registered_at = models.DateTimeField(blank=True, null=True, db_comment='The Unix timestamp for when the container instance was registered.')
    registered_resources = models.JSONField(blank=True, null=True, db_comment='CPU and memory that can be allocated on this container instance to tasks.')
    remaining_resources = models.JSONField(blank=True, null=True, db_comment='CPU and memory that is available for new tasks.')
    running_tasks_count = models.BigIntegerField(blank=True, null=True, db_comment='CPU and memory that is available for new tasks.')
    status = models.TextField(blank=True, null=True, db_comment='The status of the container instance.')
    status_reason = models.TextField(blank=True, null=True, db_comment='The reason that the container instance reached its current status.')
    version = models.BigIntegerField(blank=True, null=True, db_comment='The reason that the container instance reached its current status.')
    version_info = models.JSONField(blank=True, null=True, db_comment='Version information for the Amazon ECS container agent and Docker daemon running on the container instance.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ecs_container_instance'
        db_table_comment = 'AWS ECS Container Instance'


class AwsEcsService(models.Model):
    service_name = models.TextField(blank=True, null=True, db_comment='The name of the service.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the service.')
    status = models.TextField(blank=True, null=True, db_comment='The status of the service. Valid values are: ACTIVE, DRAINING, or INACTIVE.')
    cluster_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the cluster that hosts the service.')
    task_definition = models.TextField(blank=True, null=True, db_comment='The task definition to use for tasks in the service.')
    created_at = models.DateTimeField(blank=True, null=True, db_comment='The date and time when the service was created.')
    created_by = models.TextField(blank=True, null=True, db_comment='The principal that created the service.')
    deployment_controller_type = models.TextField(blank=True, null=True, db_comment='The deployment controller type to use. Possible values are: ECS, CODE_DEPLOY, and EXTERNAL.')
    desired_count = models.BigIntegerField(blank=True, null=True, db_comment='The desired number of instantiations of the task definition to keep running on the service.')
    enable_ecs_managed_tags = models.BooleanField(blank=True, null=True, db_comment='Specifies whether to enable Amazon ECS managed tags for the tasks in the service.')
    enable_execute_command = models.BooleanField(blank=True, null=True, db_comment='Indicates whether or not the execute command functionality is enabled for the service.')
    health_check_grace_period_seconds = models.BigIntegerField(blank=True, null=True, db_comment='The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy Elastic Load Balancing target health checks after a task has first started.')
    launch_type = models.TextField(blank=True, null=True, db_comment='The launch type on which your service is running. If no value is specified, it will default to EC2.')
    pending_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of tasks in the cluster that are in the PENDING state.')
    platform_family = models.TextField(blank=True, null=True, db_comment='The operating system that your tasks in the service run on.')
    platform_version = models.TextField(blank=True, null=True, db_comment='The platform version on which to run your service.')
    propagate_tags = models.TextField(blank=True, null=True, db_comment='Specifies whether to propagate the tags from the task definition or the service to the task. If no value is specified, the tags are not propagated.')
    role_arn = models.TextField(blank=True, null=True, db_comment='The ARN of the IAM role associated with the service that allows the Amazon ECS container agent to register container instances with an Elastic Load Balancing load balancer.')
    running_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of tasks in the cluster that are in the RUNNING state.')
    scheduling_strategy = models.TextField(blank=True, null=True, db_comment='The scheduling strategy to use for the service.')
    capacity_provider_strategy = models.JSONField(blank=True, null=True, db_comment='The capacity provider strategy associated with the service.')
    deployment_configuration = models.JSONField(blank=True, null=True, db_comment='Optional deployment parameters that control how many tasks run during the deployment and the ordering of stopping and starting tasks.')
    deployments = models.JSONField(blank=True, null=True, db_comment='The current state of deployments for the service.')
    events = models.JSONField(blank=True, null=True, db_comment='The event stream for your service. A maximum of 100 of the latest events are displayed.')
    load_balancers = models.JSONField(blank=True, null=True, db_comment='A list of Elastic Load Balancing load balancer objects, containing the load balancer name, the container name (as it appears in a container definition), and the container port to access from the load balancer.')
    network_configuration = models.JSONField(blank=True, null=True, db_comment='The VPC subnet and security group configuration for tasks that receive their own elastic network interface by using the awsvpc networking mode.')
    placement_constraints = models.JSONField(blank=True, null=True, db_comment='The placement constraints for the tasks in the service.')
    placement_strategy = models.JSONField(blank=True, null=True, db_comment='The placement strategy that determines how tasks for the service are placed.')
    service_registries = models.JSONField(blank=True, null=True, db_comment='The details of the service discovery registries to assign to this service.')
    task_sets = models.JSONField(blank=True, null=True, db_comment='Information about a set of Amazon ECS tasks in either an AWS CodeDeploy or an EXTERNAL deployment.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='The metadata that you apply to the service to help you categorize and organize them.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ecs_service'
        db_table_comment = 'AWS ECS Service'


class AwsEcsTask(models.Model):
    task_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the task.')
    container_instance_arn = models.TextField(blank=True, null=True, db_comment='The ARN of the container instances that host the task.')
    cluster_name = models.TextField(blank=True, null=True, db_comment='A user-generated string that you use to identify your cluster.')
    desired_status = models.TextField(blank=True, null=True, db_comment='The desired status of the task.')
    launch_type = models.TextField(blank=True, null=True, db_comment='The infrastructure on which your task is running.')
    availability_zone = models.TextField(blank=True, null=True, db_comment='The availability zone of the task.')
    capacity_provider_name = models.TextField(blank=True, null=True, db_comment='The capacity provider associated with the task.')
    cluster_arn = models.TextField(blank=True, null=True, db_comment='The ARN of the cluster that hosts the task.')
    connectivity = models.TextField(blank=True, null=True, db_comment='The connectivity status of a task.')
    connectivity_at = models.DateTimeField(blank=True, null=True, db_comment='The Unix timestamp for when the task last went into CONNECTED status.')
    cpu = models.BigIntegerField(blank=True, null=True, db_comment='The number of CPU units used by the task as expressed in a task definition.')
    created_at = models.DateTimeField(blank=True, null=True, db_comment='The Unix timestamp for when the task was created.')
    enable_execute_command = models.BooleanField(blank=True, null=True, db_comment='Whether or not execute command functionality is enabled for this task. If true, this enables execute command functionality on all containers in the task.')
    execution_stopped_at = models.DateTimeField(blank=True, null=True, db_comment='The Unix timestamp for when the task execution stopped.')
    group = models.TextField(blank=True, null=True, db_comment='The name of the task group associated with the task.')
    health_status = models.TextField(blank=True, null=True, db_comment='The health status for the task, which is determined by the health of the essential containers in the task. If all essential containers in the task are reporting as HEALTHY, then the task status also reports as HEALTHY.')
    last_status = models.TextField(blank=True, null=True, db_comment='The last known status of the task.')
    memory = models.BigIntegerField(blank=True, null=True, db_comment='The amount of memory (in MiB) used by the task as expressed in a task definition.')
    platform_version = models.TextField(blank=True, null=True, db_comment='The platform version on which your task is running.')
    pull_started_at = models.DateTimeField(blank=True, null=True, db_comment='The Unix timestamp for when the container image pull began.')
    pull_stopped_at = models.DateTimeField(blank=True, null=True, db_comment='The Unix timestamp for when the container image pull completed.')
    service_name = models.TextField(blank=True, null=True, db_comment='The name of the service.')
    started_at = models.DateTimeField(blank=True, null=True, db_comment='The Unix timestamp for when the task started.')
    started_by = models.TextField(blank=True, null=True, db_comment='The tag specified when a task is started.')
    stop_code = models.TextField(blank=True, null=True, db_comment='The stop code indicating why a task was stopped.')
    stopped_at = models.DateTimeField(blank=True, null=True, db_comment='The Unix timestamp for when the task was stopped.')
    stopped_reason = models.TextField(blank=True, null=True, db_comment='The reason that the task was stopped.')
    stopping_at = models.DateTimeField(blank=True, null=True, db_comment='The Unix timestamp for when the task stops.')
    task_definition_arn = models.TextField(blank=True, null=True, db_comment='The ARN of the task definition that creates the task.')
    version = models.BigIntegerField(blank=True, null=True, db_comment='The version counter for the task.')
    attachments = models.JSONField(blank=True, null=True, db_comment='The Elastic Network Adapter associated with the task if the task uses the awsvpc network mode.')
    attributes = models.JSONField(blank=True, null=True, db_comment='The attributes of the task.')
    containers = models.JSONField(blank=True, null=True, db_comment='The containers associated with the task.')
    ephemeral_storage = models.JSONField(blank=True, null=True, db_comment='The ephemeral storage settings for the task.')
    inference_accelerators = models.JSONField(blank=True, null=True, db_comment='The Elastic Inference accelerator associated with the task.')
    overrides = models.JSONField(blank=True, null=True, db_comment='One or more container overrides.')
    protection = models.JSONField(blank=True, null=True, db_comment='Protection status of task in an Amazon ECS service.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags associated with task.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ecs_task'
        db_table_comment = 'AWS ECS Task'


class AwsEcsTaskDefinition(models.Model):
    task_definition_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) that identifies the task definition.')
    cpu = models.BigIntegerField(blank=True, null=True, db_comment='The number of cpu units used by the task.')
    status = models.TextField(blank=True, null=True, db_comment='The status of the task definition.')
    execution_role_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the task execution role that grants the Amazon ECS container agent permission to make AWS API calls on your behalf.')
    family = models.TextField(blank=True, null=True, db_comment='The name of a family that this task definition is registered to.')
    ipc_mode = models.TextField(blank=True, null=True, db_comment='The IPC resource namespace to use for the containers in the task.')
    memory = models.BigIntegerField(blank=True, null=True, db_comment='The amount (in MiB) of memory used by the task.')
    network_mode = models.TextField(blank=True, null=True, db_comment='The Docker networking mode to use for the containers in the task.')
    pid_mode = models.TextField(blank=True, null=True, db_comment='The process namespace to use for the containers in the task.')
    revision = models.BigIntegerField(blank=True, null=True, db_comment='The revision of the task in a particular family.')
    task_role_arn = models.TextField(blank=True, null=True, db_comment='The short name or full Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants containers in the task permission to call AWS APIs on your behalf.')
    registered_at = models.TextField(blank=True, null=True, db_comment='The Unix timestamp for when the task definition was registered.')
    registered_by = models.TextField(blank=True, null=True, db_comment='The principal that registered the task definition.')
    container_definitions = models.JSONField(blank=True, null=True, db_comment='A list of container definitions in JSON format that describe the different containers that make up your task.')
    compatibilities = models.JSONField(blank=True, null=True, db_comment='The launch type to use with your task.')
    inference_accelerators = models.JSONField(blank=True, null=True, db_comment='The Elastic Inference accelerator associated with the task.')
    placement_constraints = models.JSONField(blank=True, null=True, db_comment='An array of placement constraint objects to use for tasks.')
    proxy_configuration = models.JSONField(blank=True, null=True, db_comment='The configuration details for the App Mesh proxy.')
    requires_attributes = models.JSONField(blank=True, null=True, db_comment='The container instance attributes required by your task.')
    requires_compatibilities = models.JSONField(blank=True, null=True, db_comment='The launch type the task requires. If no value is specified, it will default to EC2. Valid values include EC2 and FARGATE.')
    volumes = models.JSONField(blank=True, null=True, db_comment='The list of volume definitions for the task.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags associated with task.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ecs_task_definition'
        db_table_comment = 'AWS ECS Task Definition'


class AwsEfsAccessPoint(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the access point. This is the value of the Name tag.')
    access_point_id = models.TextField(blank=True, null=True, db_comment='The ID of the access point, assigned by Amazon EFS.')
    access_point_arn = models.TextField(blank=True, null=True, db_comment='The unique Amazon Resource Name (ARN) associated with the access point.')
    life_cycle_state = models.TextField(blank=True, null=True, db_comment='Identifies the lifecycle phase of the access point.')
    file_system_id = models.TextField(blank=True, null=True, db_comment='The ID of the EFS file system that the access point applies to.')
    client_token = models.TextField(blank=True, null=True, db_comment='The opaque string specified in the request to ensure idempotent creation.')
    owner_id = models.TextField(blank=True, null=True, db_comment='Identified the AWS account that owns the access point resource.')
    posix_user = models.JSONField(blank=True, null=True, db_comment='The full POSIX identity, including the user ID, group ID, and secondary group IDs on the access point that is used for all file operations by NFS clients using the access point.')
    root_directory = models.JSONField(blank=True, null=True, db_comment='The directory on the Amazon EFS file system that the access point exposes as the root directory to NFS clients using the access point.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='The tags associated with the access point, presented as an array of Tag objects.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_efs_access_point'
        db_table_comment = 'AWS EFS Access Point'


class AwsEfsFileSystem(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='Name of the file system provided by the user.')
    file_system_id = models.TextField(blank=True, null=True, db_comment='The ID of the file system, assigned by Amazon EFS.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the EFS file system.')
    owner_id = models.TextField(blank=True, null=True, db_comment='The AWS account that created the file system.')
    creation_token = models.TextField(blank=True, null=True, db_comment='The opaque string specified in the request.')
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='The time that the file system was created.')
    automatic_backups = models.TextField(blank=True, null=True, db_comment='Automatic backups use a default backup plan with the AWS Backup recommended settings for automatic backups.')
    life_cycle_state = models.TextField(blank=True, null=True, db_comment='The lifecycle phase of the file system.')
    number_of_mount_targets = models.BigIntegerField(blank=True, null=True, db_comment='The current number of mount targets that the file system has.')
    performance_mode = models.TextField(blank=True, null=True, db_comment='The performance mode of the file system.')
    encrypted = models.BooleanField(blank=True, null=True, db_comment='A Boolean value that, if true, indicates that the file system is encrypted.')
    kms_key_id = models.TextField(blank=True, null=True, db_comment='The ID of an AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to protect the encrypted file system.')
    throughput_mode = models.TextField(blank=True, null=True, db_comment='The throughput mode for a file system.')
    provisioned_throughput_in_mibps = models.FloatField(blank=True, null=True, db_comment='The throughput, measured in MiB/s, that you want to provision for a file system.')
    size_in_bytes = models.JSONField(blank=True, null=True, db_comment='The latest known metered size (in bytes) of data stored in the file system.')
    policy = models.JSONField(blank=True, null=True, db_comment='The JSON formatted FileSystemPolicy for the EFS file system.')
    policy_std = models.JSONField(blank=True, null=True, db_comment='Contains the policy in a canonical form for easier searching.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags associated with Filesystem.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_efs_file_system'
        db_table_comment = 'AWS Elastic File System'


class AwsEfsMountTarget(models.Model):
    mount_target_id = models.TextField(blank=True, null=True, db_comment='The ID of the mount target.')
    file_system_id = models.TextField(blank=True, null=True, db_comment='The ID of the file system for which the mount target is intended.')
    life_cycle_state = models.TextField(blank=True, null=True, db_comment='Lifecycle state of the mount target.')
    availability_zone_id = models.TextField(blank=True, null=True, db_comment='The unique and consistent identifier of the Availability Zone that the mount target resides in.')
    availability_zone_name = models.TextField(blank=True, null=True, db_comment='The name of the Availability Zone in which the mount target is located.')
    ip_address = models.GenericIPAddressField(blank=True, null=True, db_comment='Address at which the file system can be mounted by using the mount target.')
    network_interface_id = models.TextField(blank=True, null=True, db_comment='The ID of the network interface that Amazon EFS created when it created the mount target.')
    owner_id = models.TextField(blank=True, null=True, db_comment='AWS account ID that owns the resource.')
    subnet_id = models.TextField(blank=True, null=True, db_comment="The ID of the mount target's subnet.")
    vpc_id = models.TextField(blank=True, null=True, db_comment='The virtual private cloud (VPC) ID that the mount target is configured in.')
    security_groups = models.JSONField(blank=True, null=True, db_comment='Specifies the security groups currently in effect for a mount target.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_efs_mount_target'
        db_table_comment = 'AWS EFS Mount Target'


class AwsEksAddon(models.Model):
    addon_name = models.TextField(blank=True, null=True, db_comment='The name of the add-on.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the add-on.')
    cluster_name = models.TextField(blank=True, null=True, db_comment='The name of the cluster.')
    addon_version = models.TextField(blank=True, null=True, db_comment='The version of the add-on.')
    status = models.TextField(blank=True, null=True, db_comment='The status of the add-on.')
    created_at = models.DateTimeField(blank=True, null=True, db_comment='The date and time that the add-on was created.')
    modified_at = models.DateTimeField(blank=True, null=True, db_comment='The date and time that the add-on was last modified.')
    service_account_role_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the IAM role that is bound to the Kubernetes service account used by the add-on.')
    health_issues = models.JSONField(blank=True, null=True, db_comment="An object that represents the add-on's health issues.")
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='The metadata that you apply to the cluster to assist with categorization and organization.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_eks_addon'
        db_table_comment = 'AWS EKS Addon'


class AwsEksAddonVersion(models.Model):
    addon_name = models.TextField(blank=True, null=True, db_comment='The name of the add-on.')
    addon_version = models.TextField(blank=True, null=True, db_comment='The version of the add-on.')
    type = models.TextField(blank=True, null=True, db_comment='The type of the add-on.')
    addon_configuration = models.JSONField(blank=True, null=True, db_comment='The configuration for the add-on.')
    architecture = models.JSONField(blank=True, null=True, db_comment='The architectures that the version supports.')
    compatibilities = models.JSONField(blank=True, null=True, db_comment='An object that represents the compatibilities of a version.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_eks_addon_version'
        db_table_comment = 'AWS EKS Addon Version'


class AwsEksCluster(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the cluster.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the cluster.')
    created_at = models.DateTimeField(blank=True, null=True, db_comment='The Unix epoch timestamp in seconds for when the cluster was created.')
    version = models.TextField(blank=True, null=True, db_comment='The Kubernetes server version for the cluster.')
    endpoint = models.TextField(blank=True, null=True, db_comment='The endpoint for your Kubernetes API server.')
    role_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the IAM role that provides permissions for the Kubernetes control plane to make calls to AWS API operations on your behalf.')
    encryption_config = models.JSONField(blank=True, null=True, db_comment='The encryption configuration for the cluster.')
    resources_vpc_config = models.JSONField(blank=True, null=True, db_comment='The VPC configuration used by the cluster control plane.')
    kubernetes_network_config = models.JSONField(blank=True, null=True, db_comment='The Kubernetes network configuration for the cluster.')
    logging = models.JSONField(blank=True, null=True, db_comment='The logging configuration for the cluster.')
    identity = models.JSONField(blank=True, null=True, db_comment='The identity provider information for the cluster.')
    status = models.TextField(blank=True, null=True, db_comment='The current status of the cluster.')
    certificate_authority = models.JSONField(blank=True, null=True, db_comment='The certificate-authority-data for the cluster.')
    platform_version = models.TextField(blank=True, null=True, db_comment='The platform version of your Amazon EKS cluster.')
    tags = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the table')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_eks_cluster'
        db_table_comment = 'AWS Elastic Kubernetes Service Cluster'


class AwsEksFargateProfile(models.Model):
    fargate_profile_name = models.TextField(blank=True, null=True, db_comment='The name of the Fargate profile.')
    cluster_name = models.TextField(blank=True, null=True, db_comment='The name of the Amazon EKS cluster that the Fargate profile belongs to.')
    fargate_profile_arn = models.TextField(blank=True, null=True, db_comment='The full Amazon Resource Name (ARN) of the Fargate profile.')
    created_at = models.DateTimeField(blank=True, null=True, db_comment='The Unix epoch timestamp in seconds for when the Fargate profile was created.')
    pod_execution_role_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the pod execution role to use for pods that match the selectors in the Fargate profile.')
    status = models.TextField(blank=True, null=True, db_comment='The current status of the Fargate profile.')
    selectors = models.JSONField(blank=True, null=True, db_comment='The selectors to match for pods to use this Fargate profile.')
    subnets = models.JSONField(blank=True, null=True, db_comment='The subnets used by the Fargate profile.')
    tags = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the Fargate profile.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_eks_fargate_profile'
        db_table_comment = 'AWS Elastic Kubernetes Service Fargate Profile'


class AwsEksIdentityProviderConfig(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the identity provider configuration.')
    type = models.TextField(blank=True, null=True, db_comment='The type of the identity provider configuration.')
    client_id = models.TextField(blank=True, null=True, db_comment='This is also known as audience. The ID of the client application that makes authentication requests to the OIDC identity provider.')
    cluster_name = models.TextField(blank=True, null=True, db_comment='The name of the cluster.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the configuration.')
    groups_claim = models.TextField(blank=True, null=True, db_comment='The JSON web token (JWT) claim that the provider uses to return your groups.')
    groups_prefix = models.TextField(blank=True, null=True, db_comment='The prefix that is prepended to group claims to prevent clashes with existing names (such as system: groups).')
    issuer_url = models.TextField(blank=True, null=True, db_comment='The URL of the OIDC identity provider that allows the API server to discover public signing keys for verifying tokens.')
    username_claim = models.TextField(blank=True, null=True, db_comment='The JSON Web token (JWT) claim that is used as the username.')
    status = models.TextField(blank=True, null=True, db_comment='The status of the OIDC identity provider.')
    username_prefix = models.TextField(blank=True, null=True, db_comment='The prefix that is prepended to username claims to prevent clashes with existing names.')
    required_claims = models.JSONField(blank=True, null=True, db_comment='The key-value pairs that describe required claims in the identity token.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='The metadata to apply to the provider configuration to assist with categorization and organization.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_eks_identity_provider_config'
        db_table_comment = 'AWS EKS Identity Provider Config'


class AwsEksNodeGroup(models.Model):
    nodegroup_name = models.TextField(blank=True, null=True, db_comment='The name associated with an Amazon EKS managed node group.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) associated with the managed node group.')
    cluster_name = models.TextField(blank=True, null=True, db_comment='The name of the cluster that the managed node group resides in.')
    created_at = models.DateTimeField(blank=True, null=True, db_comment='The Unix epoch timestamp in seconds for when the managed node group was created.')
    status = models.TextField(blank=True, null=True, db_comment='The current status of the managed node group.')
    ami_type = models.TextField(blank=True, null=True, db_comment='The AMI type that was specified in the node group configuration.')
    capacity_type = models.TextField(blank=True, null=True, db_comment='The capacity type of your managed node group.')
    disk_size = models.BigIntegerField(blank=True, null=True, db_comment='The disk size in the node group configuration.')
    modified_at = models.DateTimeField(blank=True, null=True, db_comment='The Unix epoch timestamp in seconds for when the managed node group was last modified.')
    node_role = models.TextField(blank=True, null=True, db_comment='The IAM role associated with your node group.')
    release_version = models.TextField(blank=True, null=True, db_comment="If the node group was deployed using a launch template with a custom AMI, then this is the AMI ID that was specified in the launch template. For node groups that weren't deployed using a launch template, this is the version of the Amazon EKS optimized AMI that the node group was deployed with.")
    version = models.TextField(blank=True, null=True, db_comment='The Kubernetes version of the managed node group.')
    health = models.JSONField(blank=True, null=True, db_comment='The health status of the node group.')
    instance_types = models.JSONField(blank=True, null=True, db_comment='The instance type that is associated with the node group. If the node group was deployed with a launch template, then this is null.')
    labels = models.JSONField(blank=True, null=True, db_comment='The Kubernetes labels applied to the nodes in the node group.')
    launch_template = models.JSONField(blank=True, null=True, db_comment='If a launch template was used to create the node group, then this is the launch template that was used.')
    remote_access = models.JSONField(blank=True, null=True, db_comment='The remote access configuration that is associated with the node group. If the node group was deployed with a launch template, then this is null.')
    resources = models.JSONField(blank=True, null=True, db_comment='The resources associated with the node group, such as Auto Scaling groups and security groups for remote access.')
    scaling_config = models.JSONField(blank=True, null=True, db_comment='The scaling configuration details for the Auto Scaling group that is associated with your node group.')
    subnets = models.JSONField(blank=True, null=True, db_comment='The subnets that were specified for the Auto Scaling group that is associated with your node group.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    taints = models.JSONField(blank=True, null=True, db_comment='The Kubernetes taints to be applied to the nodes in the node group when they are created.')
    update_config = models.JSONField(blank=True, null=True, db_comment='The node group update configuration.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_eks_node_group'
        db_table_comment = 'AWS EKS Node Group'


class AwsElasticBeanstalkApplication(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the application.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the application.')
    description = models.TextField(blank=True, null=True, db_comment='User-defined description of the application.')
    date_created = models.DateTimeField(blank=True, null=True, db_comment='The date when the application was created.')
    date_updated = models.DateTimeField(blank=True, null=True, db_comment='The date when the application was last modified.')
    configuration_templates = models.JSONField(blank=True, null=True, db_comment='The names of the configuration templates associated with this application.')
    versions = models.JSONField(blank=True, null=True, db_comment='The names of the versions for this application.')
    resource_lifecycle_config = models.JSONField(blank=True, null=True, db_comment='The lifecycle settings for the application.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the application.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_elastic_beanstalk_application'
        db_table_comment = 'AWS Elastic Beanstalk Application'


class AwsElasticBeanstalkApplicationVersion(models.Model):
    application_name = models.TextField(blank=True, null=True, db_comment='The name of the application to which the application version belongs.')
    application_version_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the application version.')
    build_arn = models.TextField(blank=True, null=True, db_comment='Reference to the artifact from the AWS CodeBuild build.')
    date_created = models.DateTimeField(blank=True, null=True, db_comment='The creation date of the application version.')
    date_updated = models.DateTimeField(blank=True, null=True, db_comment='The last modified date of the application version.')
    description = models.TextField(blank=True, null=True, db_comment='The description of the application version.')
    status = models.TextField(blank=True, null=True, db_comment='The processing status of the application version. Reflects the state of the application version during its creation.')
    version_label = models.TextField(blank=True, null=True, db_comment='A unique identifier for the application version.')
    source_build_information = models.JSONField(blank=True, null=True, db_comment='Information about the source code for the application version if the source code was retrieved from AWS CodeCommit.')
    source_bundle = models.JSONField(blank=True, null=True, db_comment="The storage location of the application version's source bundle in Amazon S3.")
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the application.')
    title = models.TextField(blank=True, null=True, db_comment='A title for the resource, typically the resource name.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_elastic_beanstalk_application_version'
        db_table_comment = 'AWS Elastic Beanstalk Application Version'


class AwsElasticBeanstalkEnvironment(models.Model):
    environment_name = models.TextField(blank=True, null=True, db_comment='The name of this environment.')
    environment_id = models.TextField(blank=True, null=True, db_comment='The ID of this environment.')
    arn = models.TextField(blank=True, null=True, db_comment="The environment's Amazon Resource Name (ARN).")
    description = models.TextField(blank=True, null=True, db_comment='Describes this environment.')
    date_created = models.DateTimeField(blank=True, null=True, db_comment='The creation date for this environment.')
    abortable_operation_in_progress = models.BooleanField(blank=True, null=True, db_comment='Indicates if there is an in-progress environment configuration update or application version deployment that you can cancel.')
    application_name = models.TextField(blank=True, null=True, db_comment='The name of the application associated with this environment.')
    cname = models.TextField(blank=True, null=True, db_comment='The URL to the CNAME for this environment.')
    date_updated = models.DateTimeField(blank=True, null=True, db_comment='The last modified date for this environment.')
    endpoint_url = models.TextField(blank=True, null=True, db_comment='The URL to the LoadBalancer.')
    health = models.TextField(blank=True, null=True, db_comment='The health status of the environment.')
    health_status = models.TextField(blank=True, null=True, db_comment='Returns the health status of the application running in your environment.')
    operations_role = models.TextField(blank=True, null=True, db_comment="The Amazon Resource Name (ARN) of the environment's operations role.")
    platform_arn = models.TextField(blank=True, null=True, db_comment='The ARN of the platform version.')
    solution_stack_name = models.TextField(blank=True, null=True, db_comment='The name of the SolutionStack deployed with this environment.')
    status = models.TextField(blank=True, null=True, db_comment='The current operational status of the environment.')
    template_name = models.TextField(blank=True, null=True, db_comment='The name of the configuration template used to originally launch this environment.')
    version_label = models.TextField(blank=True, null=True, db_comment='The application version deployed in this environment.')
    configuration_settings = models.JSONField(blank=True, null=True, db_comment='Returns a description of the settings for the specified configuration set, that is, either a configuration template or the configuration set associated with a running environment.')
    environment_links = models.JSONField(blank=True, null=True, db_comment='A list of links to other environments in the same group.')
    managed_actions = models.JSONField(blank=True, null=True, db_comment='A list of upcoming and in-progress managed actions.')
    resources = models.JSONField(blank=True, null=True, db_comment='The description of the AWS resources used by this environment.')
    tier = models.JSONField(blank=True, null=True, db_comment='Describes the current tier of this environment.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the Repository')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True)
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_elastic_beanstalk_environment'
        db_table_comment = 'AWS ElasticBeanstalk Environment'


class AwsElasticacheCluster(models.Model):
    cache_cluster_id = models.TextField(blank=True, null=True, db_comment='An unique identifier for ElastiCache cluster.')
    arn = models.TextField(blank=True, null=True, db_comment='The ARN (Amazon Resource Name) of the cache cluster.')
    cache_node_type = models.TextField(blank=True, null=True, db_comment='The name of the compute and memory capacity node type for the cluster.')
    cache_cluster_status = models.TextField(blank=True, null=True, db_comment='The current state of this cluster, one of the following values: available, creating, deleted, deleting, incompatible-network, modifying, rebooting cluster nodes, restore-failed, or snapshotting.')
    at_rest_encryption_enabled = models.BooleanField(blank=True, null=True, db_comment='A flag that enables encryption at-rest when set to true.')
    auth_token_enabled = models.BooleanField(blank=True, null=True, db_comment='A flag that enables using an AuthToken (password) when issuing Redis commands.')
    auto_minor_version_upgrade = models.BooleanField(blank=True, null=True, db_comment='This parameter is currently disabled.')
    cache_cluster_create_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time when the cluster was created.')
    cache_subnet_group_name = models.TextField(blank=True, null=True, db_comment='The name of the cache subnet group associated with the cluster.')
    client_download_landing_page = models.TextField(blank=True, null=True, db_comment='The URL of the web page where you can download the latest ElastiCache client library.')
    engine = models.TextField(blank=True, null=True, db_comment='The name of the cache engine (memcached or redis) to be used for this cluster.')
    engine_version = models.TextField(blank=True, null=True, db_comment='The version of the cache engine that is used in this cluster.')
    num_cache_nodes = models.BigIntegerField(blank=True, null=True, db_comment='The number of cache nodes in the cluster.')
    preferred_availability_zone = models.TextField(blank=True, null=True, db_comment="The name of the Availability Zone in which the cluster is located or 'Multiple' if the cache nodes are located in different Availability Zones.")
    preferred_maintenance_window = models.TextField(blank=True, null=True, db_comment='Specifies the weekly time range during which maintenance on the cluster is performed.')
    replication_group_id = models.TextField(blank=True, null=True, db_comment='The replication group to which this cluster belongs.')
    snapshot_retention_limit = models.BigIntegerField(blank=True, null=True, db_comment='The number of days for which ElastiCache retains automatic cluster snapshots before deleting them.')
    snapshot_window = models.TextField(blank=True, null=True, db_comment='The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster.')
    transit_encryption_enabled = models.BooleanField(blank=True, null=True, db_comment='A flag that enables in-transit encryption when set to true.')
    auth_token_last_modified_date = models.DateTimeField(blank=True, null=True, db_comment='The date the auth token was last modified.')
    ip_discovery = models.TextField(blank=True, null=True, db_comment='The network type associated with the cluster, either ipv4 or ipv6.')
    network_type = models.TextField(blank=True, null=True, db_comment='Must be either ipv4, ipv6, or dual_stack.')
    preferred_outpost_arn = models.TextField(blank=True, null=True, db_comment='The outpost ARN in which the cache cluster is created.')
    replication_group_log_delivery_enabled = models.BooleanField(blank=True, null=True, db_comment='A boolean value indicating whether log delivery is enabled for the replication group.')
    transit_encryption_mode = models.TextField(blank=True, null=True, db_comment='A setting that allows you to migrate your clients to use in-transit encryption, with no downtime.')
    cache_parameter_group = models.JSONField(blank=True, null=True, db_comment='Status of the cache parameter group.')
    notification_configuration = models.JSONField(blank=True, null=True, db_comment='Describes a notification topic and its status.')
    pending_modified_values = models.JSONField(blank=True, null=True, db_comment='A group of settings that are applied to the cluster in the future, or that are currently being applied.')
    security_groups = models.JSONField(blank=True, null=True, db_comment='A list of VPC Security Groups associated with the cluster.')
    configuration_endpoint = models.JSONField(blank=True, null=True, db_comment='Represents a Memcached cluster endpoint which can be used by an application to connect to any node in the cluster.')
    cache_nodes = models.JSONField(blank=True, null=True, db_comment='A list of cache nodes that are members of the cluster.')
    cache_security_groups = models.JSONField(blank=True, null=True, db_comment='A list of cache security group elements, composed of name and status sub-elements.')
    log_delivery_configurations = models.JSONField(blank=True, null=True, db_comment='Returns the destination, format, and type of the logs.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags associated with the cluster.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_elasticache_cluster'
        db_table_comment = 'AWS ElastiCache Cluster'


class AwsElasticacheParameterGroup(models.Model):
    cache_parameter_group_name = models.TextField(blank=True, null=True, db_comment='The name of the cache parameter group.')
    arn = models.TextField(blank=True, null=True, db_comment='The ARN (Amazon Resource Name) of the cache parameter group.')
    description = models.TextField(blank=True, null=True, db_comment='The description for the cache parameter group.')
    cache_parameter_group_family = models.TextField(blank=True, null=True, db_comment='The name of the cache parameter group family that this cache parameter group is compatible with.')
    is_global = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the parameter group is associated with a Global Datastore.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_elasticache_parameter_group'
        db_table_comment = 'AWS ElastiCache Parameter Group'


class AwsElasticacheRedisMetricCacheHitsHourly(models.Model):
    cache_cluster_id = models.TextField(blank=True, null=True, db_comment='The cache cluster id.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_elasticache_redis_metric_cache_hits_hourly'
        db_table_comment = 'AWS Elasticache Redis CacheHits metric (Hourly)'


class AwsElasticacheRedisMetricCurrConnectionsHourly(models.Model):
    cache_cluster_id = models.TextField(blank=True, null=True, db_comment='The cache cluster id.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_elasticache_redis_metric_curr_connections_hourly'
        db_table_comment = 'AWS Elasticache Redis CurrConnections metric (Hourly)'


class AwsElasticacheRedisMetricEngineCpuUtilizationDaily(models.Model):
    cache_cluster_id = models.TextField(blank=True, null=True, db_comment='The cache cluster id.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_elasticache_redis_metric_engine_cpu_utilization_daily'
        db_table_comment = 'AWS Elasticache Redis EngineCPUUtilization metric (Daily)'


class AwsElasticacheRedisMetricEngineCpuUtilizationHourly(models.Model):
    cache_cluster_id = models.TextField(blank=True, null=True, db_comment='The cache cluster id.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_elasticache_redis_metric_engine_cpu_utilization_hourly'
        db_table_comment = 'AWS Elasticache Redis EngineCPUUtilization metric (Hourly)'


class AwsElasticacheRedisMetricGetTypeCmdsHourly(models.Model):
    cache_cluster_id = models.TextField(blank=True, null=True, db_comment='The cache cluster id.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_elasticache_redis_metric_get_type_cmds_hourly'
        db_table_comment = 'AWS Elasticache Redis GetTypeCmds metric(Hourly)'


class AwsElasticacheRedisMetricListBasedCmdsHourly(models.Model):
    cache_cluster_id = models.TextField(blank=True, null=True, db_comment='The cache cluster id.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_elasticache_redis_metric_list_based_cmds_hourly'
        db_table_comment = 'AWS Elasticache Redis ListBasedCmds metric (Hourly)'


class AwsElasticacheRedisMetricNewConnectionsHourly(models.Model):
    cache_cluster_id = models.TextField(blank=True, null=True, db_comment='The cache cluster id.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_elasticache_redis_metric_new_connections_hourly'
        db_table_comment = 'AWS Elasticache Redis NewConnections metric (Hourly)'


class AwsElasticacheReplicationGroup(models.Model):
    replication_group_id = models.TextField(blank=True, null=True, db_comment='The identifier for the replication group.')
    arn = models.TextField(blank=True, null=True, db_comment='The ARN (Amazon Resource Name) of the replication group.')
    description = models.TextField(blank=True, null=True, db_comment='The user supplied description of the replication group.')
    at_rest_encryption_enabled = models.BooleanField(blank=True, null=True, db_comment='A flag that enables encryption at-rest when set to true.')
    kms_key_id = models.TextField(blank=True, null=True, db_comment='The ID of the KMS key used to encrypt the disk in the cluster.')
    auth_token_enabled = models.BooleanField(blank=True, null=True, db_comment='A flag that enables using an AuthToken (password) when issuing Redis commands.')
    auth_token_last_modified_date = models.DateTimeField(blank=True, null=True, db_comment='The date when the auth token was last modified.')
    automatic_failover = models.TextField(blank=True, null=True, db_comment='Indicates the status of automatic failover for this Redis replication group.')
    cache_node_type = models.TextField(blank=True, null=True, db_comment='The name of the compute and memory capacity node type for each node in the replication group.')
    cluster_enabled = models.BooleanField(blank=True, null=True, db_comment='A flag indicating whether or not this replication group is cluster enabled.')
    multi_az = models.TextField(blank=True, null=True, db_comment='A flag indicating if you have Multi-AZ enabled to enhance fault tolerance.')
    snapshot_retention_limit = models.BigIntegerField(blank=True, null=True, db_comment='The number of days for which ElastiCache retains automatic cluster snapshots before deleting them.')
    snapshot_window = models.TextField(blank=True, null=True, db_comment='The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).')
    snapshotting_cluster_id = models.TextField(blank=True, null=True, db_comment='The cluster ID that is used as the daily snapshot source for the replication group.')
    status = models.TextField(blank=True, null=True, db_comment='The current state of this replication group - creating, available, modifying, deleting, create-failed, snapshotting.')
    transit_encryption_enabled = models.BooleanField(blank=True, null=True, db_comment='A flag that enables in-transit encryption when set to true.')
    configuration_endpoint = models.JSONField(blank=True, null=True, db_comment='The configuration endpoint for this replication group.')
    global_replication_group_info = models.JSONField(blank=True, null=True, db_comment='The name of the Global Datastore and role of this replication group in the Global Datastore.')
    member_clusters = models.JSONField(blank=True, null=True, db_comment='The names of all the cache clusters that are part of this replication group.')
    member_clusters_outpost_arns = models.JSONField(blank=True, null=True, db_comment="The outpost ARNs of the replication group's member clusters.")
    node_groups = models.JSONField(blank=True, null=True, db_comment='A list of node groups in this replication group.')
    pending_modified_values = models.JSONField(blank=True, null=True, db_comment='A group of settings to be applied to the replication group, either immediately or during the next maintenance window.')
    user_group_ids = models.JSONField(blank=True, null=True, db_comment='The list of user group IDs that have access to the replication group.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_elasticache_replication_group'
        db_table_comment = 'AWS ElastiCache Replication Group'


class AwsElasticacheReservedCacheNode(models.Model):
    reserved_cache_node_id = models.TextField(blank=True, null=True, db_comment='The unique identifier for the reservation.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the reserved cache node.')
    reserved_cache_nodes_offering_id = models.TextField(blank=True, null=True, db_comment='The offering identifier.')
    state = models.TextField(blank=True, null=True, db_comment='The state of the reserved cache node.')
    cache_node_type = models.TextField(blank=True, null=True, db_comment='The cache node type for the reserved cache nodes.')
    cache_node_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of cache nodes that have been reserved.')
    duration = models.BigIntegerField(blank=True, null=True, db_comment='The duration of the reservation in seconds.')
    fixed_price = models.FloatField(blank=True, null=True, db_comment='The fixed price charged for this reserved cache node.')
    offering_type = models.TextField(blank=True, null=True, db_comment='The offering type of this reserved cache node.')
    product_description = models.TextField(blank=True, null=True, db_comment='The description of the reserved cache node.')
    start_time = models.DateTimeField(blank=True, null=True, db_comment='The time the reservation started.')
    usage_price = models.FloatField(blank=True, null=True, db_comment='The hourly price charged for this reserved cache node.')
    recurring_charges = models.JSONField(blank=True, null=True, db_comment='The recurring price charged to run this reserved cache node.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_elasticache_reserved_cache_node'
        db_table_comment = 'AWS ElastiCache Reserved Cache Node'


class AwsElasticacheSubnetGroup(models.Model):
    cache_subnet_group_name = models.TextField(blank=True, null=True, db_comment='The name of the cache subnet group.')
    arn = models.TextField(blank=True, null=True, db_comment='The ARN (Amazon Resource Name) of the cache subnet group.')
    cache_subnet_group_description = models.TextField(blank=True, null=True, db_comment='The description of the cache subnet group.')
    vpc_id = models.TextField(blank=True, null=True, db_comment='The Amazon Virtual Private Cloud identifier (VPC ID) of the cache subnet group.')
    subnets = models.JSONField(blank=True, null=True, db_comment='A list of subnets associated with the cache subnet group.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_elasticache_subnet_group'
        db_table_comment = 'AWS ElastiCache Subnet Group'


class AwsElasticsearchDomain(models.Model):
    domain_name = models.TextField(blank=True, null=True, db_comment='The name of the domain.')
    engine_type = models.TextField(blank=True, null=True, db_comment='Specifies the EngineType of the domain.')
    domain_id = models.TextField(blank=True, null=True, db_comment='The id of the domain.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the domain.')
    elasticsearch_version = models.TextField(blank=True, null=True, db_comment='The version for the Elasticsearch domain.')
    endpoint = models.TextField(blank=True, null=True, db_comment='The Elasticsearch domain endpoint that use to submit index and search requests.')
    endpoints = models.JSONField(blank=True, null=True, db_comment='Map containing the Elasticsearch domain endpoints used to submit index and search requests.')
    access_policies = models.TextField(blank=True, null=True, db_comment='IAM access policy as a JSON-formatted string.')
    created = models.BooleanField(blank=True, null=True, db_comment='The domain creation status.')
    deleted = models.BooleanField(blank=True, null=True, db_comment='The domain deletion status.')
    processing = models.BooleanField(blank=True, null=True, db_comment='The status of the Elasticsearch domain configuration.')
    upgrade_processing = models.BooleanField(blank=True, null=True, db_comment='The status of an Elasticsearch domain version upgrade.')
    enabled = models.BooleanField(blank=True, null=True, db_comment='Specifies the status of the NodeToNodeEncryptionOptions.')
    policy_std = models.JSONField(blank=True, null=True, db_comment='Contains the policy in a canonical form for easier searching.')
    ebs_options = models.JSONField(blank=True, null=True, db_comment='Specifies whether EBS-based storage is enabled.')
    advanced_options = models.JSONField(blank=True, null=True, db_comment='Specifies the status of the AdvancedOptions.')
    advanced_security_options = models.JSONField(blank=True, null=True, db_comment="Specifies The current status of the Elasticsearch domain's advanced security options.")
    auto_tune_options = models.JSONField(blank=True, null=True, db_comment="The current status of the Elasticsearch domain's Auto-Tune options.")
    cognito_options = models.JSONField(blank=True, null=True, db_comment='The CognitoOptions for the specified domain.')
    domain_endpoint_options = models.JSONField(blank=True, null=True, db_comment="The current status of the Elasticsearch domain's endpoint options.")
    elasticsearch_cluster_config = models.JSONField(blank=True, null=True, db_comment='The type and number of instances in the domain cluster.')
    encryption_at_rest_options = models.JSONField(blank=True, null=True, db_comment='Specifies the status of the EncryptionAtRestOptions.')
    log_publishing_options = models.JSONField(blank=True, null=True, db_comment='Log publishing options for the given domain.')
    service_software_options = models.JSONField(blank=True, null=True, db_comment="The current status of the Elasticsearch domain's service software.")
    snapshot_options = models.JSONField(blank=True, null=True, db_comment='Specifies the status of the SnapshotOptions.')
    vpc_options = models.JSONField(blank=True, null=True, db_comment='The VPCOptions for the specified domain.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the domain.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_elasticsearch_domain'
        db_table_comment = 'AWS Elasticsearch Domain'


class AwsEmrBlockPublicAccessConfiguration(models.Model):
    block_public_security_group_rules = models.BooleanField(blank=True, null=True, db_comment='Indicates whether Amazon EMR block public access is enabled (true) or disabled (false).')
    classification = models.TextField(blank=True, null=True, db_comment='The classification within a configuration.')
    created_by_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name that created or last modified the configuration.')
    creation_date = models.DateTimeField(blank=True, null=True, db_comment='The date and time that the configuration was created.')
    permitted_public_security_group_rule_ranges = models.JSONField(blank=True, null=True, db_comment='Specifies ports and port ranges that are permitted to have security group rules that allow inbound traffic from all public sources.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_emr_block_public_access_configuration'
        db_table_comment = 'AWS EMR Block Public Access Configuration'


class AwsEmrCluster(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the cluster.')
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The unique identifier for the cluster.')
    cluster_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name of the cluster.')
    state = models.TextField(blank=True, null=True, db_comment='The current state of the cluster.')
    status = models.JSONField(blank=True, null=True, db_comment='The current status details about the cluster.')
    auto_scaling_role = models.TextField(blank=True, null=True, db_comment='An IAM role for automatic scaling policies.')
    auto_terminate = models.BooleanField(blank=True, null=True, db_comment='Specifies whether the cluster should terminate after completing all steps.')
    custom_ami_id = models.TextField(blank=True, null=True, db_comment='Available only in Amazon EMR version 5.7.0 and later. The ID of a custom Amazon EBS-backed Linux AMI if the cluster uses a custom AMI.')
    ebs_root_volume_size = models.TextField(blank=True, null=True, db_comment='The size of the Amazon EBS root device volume of the Linux AMI that is used for each EC2 instance, in GiB. Available in Amazon EMR version 4.x and later.')
    instance_collection_type = models.TextField(blank=True, null=True, db_comment='The instance group configuration of the cluster.')
    log_encryption_kms_key_id = models.TextField(blank=True, null=True, db_comment='The AWS KMS customer master key (CMK) used for encrypting log files. This attribute is only available with EMR version 5.30.0 and later, excluding EMR 6.0.0.')
    log_uri = models.TextField(blank=True, null=True, db_comment='The path to the Amazon S3 location where logs for this cluster are stored.')
    outpost_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the Outpost where the cluster is launched.')
    master_public_dns_name = models.TextField(blank=True, null=True, db_comment='The DNS name of the master node.')
    normalized_instance_hours = models.BigIntegerField(blank=True, null=True, db_comment='An approximation of the cost of the cluster, represented in m1.small/hours.')
    release_label = models.TextField(blank=True, null=True, db_comment='The Amazon EMR release label, which determines the version of open-source application packages installed on the cluster.')
    repo_upgrade_on_boot = models.TextField(blank=True, null=True, db_comment='Applies only when CustomAmiID is used. Specifies the type of updates that are applied from the Amazon Linux AMI package repositories when an instance boots using the AMI.')
    requested_ami_version = models.TextField(blank=True, null=True, db_comment='Applies only when CustomAmiID is used. Specifies the type of updates that are applied from the Amazon Linux AMI package repositories when an instance boots using the AMI.')
    running_ami_version = models.TextField(blank=True, null=True, db_comment='The AMI version running on this cluster.')
    scale_down_behavior = models.TextField(blank=True, null=True, db_comment='The way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized.')
    security_configuration = models.TextField(blank=True, null=True, db_comment='The name of the security configuration applied to the cluster.')
    service_role = models.TextField(blank=True, null=True, db_comment='The IAM role that will be assumed by the Amazon EMR service to access AWS resources on your behalf.')
    step_concurrency_level = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the number of steps that can be executed concurrently.')
    termination_protected = models.BooleanField(blank=True, null=True, db_comment='Indicates whether Amazon EMR will lock the cluster to prevent the EC2 instances from being terminated by an API call or user intervention, or in the event of a cluster error.')
    visible_to_all_users = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the cluster is visible to all IAM users of the AWS account associated with the cluster.')
    applications = models.JSONField(blank=True, null=True, db_comment='The applications installed on this cluster.')
    configurations = models.JSONField(blank=True, null=True, db_comment='Applies only to Amazon EMR releases 4.x and later. The list of Configurations supplied to the EMR cluster.')
    ec2_instance_attributes = models.JSONField(blank=True, null=True, db_comment='Provides information about the EC2 instances in a cluster grouped by category.')
    placement_groups = models.JSONField(blank=True, null=True, db_comment='Placement group configured for an Amazon EMR cluster.')
    kerberos_attributes = models.JSONField(blank=True, null=True, db_comment='Attributes for Kerberos configuration when Kerberos authentication is enabled using a security configuration.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags associated with a cluster.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_emr_cluster'
        db_table_comment = 'AWS EMR Cluster'


class AwsEmrClusterMetricIsIdle(models.Model):
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The unique identifier for the cluster.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_emr_cluster_metric_is_idle'
        db_table_comment = 'AWS EMR Cluster Cloudwatch Metrics - IsIdle'


class AwsEmrInstance(models.Model):
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The unique identifier for the instance in Amazon EMR.')
    cluster_id = models.TextField(blank=True, null=True, db_comment='The unique identifier for the cluster.')
    ec2_instance_id = models.TextField(blank=True, null=True, db_comment='The unique identifier of the instance in Amazon EC2.')
    state = models.TextField(blank=True, null=True, db_comment='The current state of the instance.')
    instance_fleet_id = models.TextField(blank=True, null=True, db_comment='The unique identifier of the instance fleet to which an EC2 instance belongs.')
    instance_group_id = models.TextField(blank=True, null=True, db_comment='The identifier of the instance group to which this instance belongs.')
    instance_type = models.TextField(blank=True, null=True, db_comment='The EC2 instance type, for example m3.xlarge.')
    market = models.TextField(blank=True, null=True, db_comment='The instance purchasing option. Valid values are ON_DEMAND or SPOT.')
    private_dns_name = models.TextField(blank=True, null=True, db_comment='The private DNS name of the instance.')
    private_ip_address = models.GenericIPAddressField(blank=True, null=True, db_comment='The private IP address of the instance.')
    public_dns_name = models.TextField(blank=True, null=True, db_comment='The public DNS name of the instance.')
    public_ip_address = models.GenericIPAddressField(blank=True, null=True, db_comment='The public IP address of the instance.')
    ebs_volumes = models.JSONField(blank=True, null=True, db_comment='The list of Amazon EBS volumes that are attached to this instance.')
    state_change_reason = models.JSONField(blank=True, null=True, db_comment='The status change reason details for the instance.')
    status_timeline = models.JSONField(blank=True, null=True, db_comment='The timeline of the instance status over time.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_emr_instance'
        db_table_comment = 'AWS EMR Instance'


class AwsEmrInstanceFleet(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the instance fleet.')
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The identifier of the instance fleet.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the instance fleet.')
    cluster_id = models.TextField(blank=True, null=True, db_comment='The unique identifier for the cluster.')
    instance_fleet_type = models.TextField(blank=True, null=True, db_comment='The type of the instance fleet. Valid values are MASTER, CORE or TASK.')
    state = models.TextField(blank=True, null=True, db_comment='The current state of the instance fleet.')
    provisioned_on_demand_capacity = models.BigIntegerField(blank=True, null=True, db_comment='The number of On-Demand units that have been provisioned for the instance fleet to fulfill TargetOnDemandCapacity.')
    provisioned_spot_capacity = models.BigIntegerField(blank=True, null=True, db_comment='The number of Spot units that have been provisioned for this instance fleet to fulfill TargetSpotCapacity.')
    target_on_demand_capacity = models.BigIntegerField(blank=True, null=True, db_comment='The target capacity of On-Demand units for the instance fleet, which determines how many On-Demand Instances to provision.')
    target_spot_capacity = models.BigIntegerField(blank=True, null=True, db_comment='The target capacity of Spot units for the instance fleet, which determines how many Spot Instances to provision.')
    instance_type_specifications = models.JSONField(blank=True, null=True, db_comment='An array of specifications for the instance types that comprise an instance fleet.')
    launch_specifications = models.JSONField(blank=True, null=True, db_comment='Describes the launch specification for an instance fleet.')
    state_change_reason = models.JSONField(blank=True, null=True, db_comment='Provides status change reason details for the instance fleet.')
    status_timeline = models.JSONField(blank=True, null=True, db_comment='Provides historical timestamps for the instance fleet, including the time of creation, the time it became ready to run jobs, and the time of termination.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_emr_instance_fleet'
        db_table_comment = 'AWS EMR Instance Fleet'


class AwsEmrInstanceGroup(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the instance group.')
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The identifier of the instance group.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the instance group.')
    cluster_id = models.TextField(blank=True, null=True, db_comment='The unique identifier for the cluster.')
    instance_group_type = models.TextField(blank=True, null=True, db_comment='The type of the instance group. Valid values are MASTER, CORE or TASK.')
    instance_type = models.TextField(blank=True, null=True, db_comment='The EC2 instance type for all instances in the instance group.')
    state = models.TextField(blank=True, null=True, db_comment='The current state of the instance group.')
    bid_price = models.TextField(blank=True, null=True, db_comment='The maximum price you are willing to pay for Spot Instances. If specified, indicates that the instance group uses Spot Instances.')
    configurations_version = models.BigIntegerField(blank=True, null=True, db_comment='The version number of the requested configuration specification for this instance group.')
    ebs_optimized = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the instance group is EBS-optimized, or not.  An Amazon EBS-optimized instance uses an optimized configuration stack and provides additional, dedicated capacity for Amazon EBS I/O.')
    last_successfully_applied_configurations_version = models.BigIntegerField(blank=True, null=True, db_comment='The version number of a configuration specification that was successfully applied for an instance group last time.')
    market = models.TextField(blank=True, null=True, db_comment='The marketplace to provision instances for this group. Valid values are ON_DEMAND or SPOT.')
    requested_instance_count = models.BigIntegerField(blank=True, null=True, db_comment='The target number of instances for the instance group.')
    running_instance_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of instances currently running in this instance group.')
    autoscaling_policy = models.JSONField(blank=True, null=True, db_comment='An automatic scaling policy for a core instance group or task instance group in an Amazon EMR cluster.')
    configurations = models.JSONField(blank=True, null=True, db_comment='A list of configurations supplied for an EMR cluster instance group. Only availbale for Amazon EMR releases 4.x or later.')
    ebs_block_devices = models.JSONField(blank=True, null=True, db_comment='The EBS block devices that are mapped to this instance group.')
    last_successfully_applied_configurations = models.JSONField(blank=True, null=True, db_comment='A list of configurations that were successfully applied for an instance group last time.')
    shrink_policy = models.JSONField(blank=True, null=True, db_comment='Policy for customizing shrink operations.')
    state_change_reason = models.JSONField(blank=True, null=True, db_comment='The status change reason details for the instance group.')
    status_timeline = models.JSONField(blank=True, null=True, db_comment='The timeline of the instance group status over time.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_emr_instance_group'
        db_table_comment = 'AWS EMR Instance Group'


class AwsEmrSecurityConfiguration(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the security configuration.')
    creation_date_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time the security configuration was created.')
    encryption_configuration = models.JSONField(blank=True, null=True, db_comment='The encryption configuration details for a secutiry configuration.')
    instance_metadata_service_configuration = models.JSONField(blank=True, null=True, db_comment='The instance metadata service configuration details for a secutiry configuration.')
    security_configuration = models.JSONField(blank=True, null=True, db_comment='The security configuration details in JSON format.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_emr_security_configuration'
        db_table_comment = 'AWS EMR Security Configuration'


class AwsEventbridgeBus(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the event bus.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the account permitted to write events to the current account.')
    policy = models.JSONField(blank=True, null=True, db_comment='The policy that enables the external account to send events to your account.')
    policy_std = models.JSONField(blank=True, null=True, db_comment='Contains the policy that enables the external account to send events to your account in a canonical form for easier searching.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the bus.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_eventbridge_bus'
        db_table_comment = 'AWS EventBridge Bus'


class AwsEventbridgeRule(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the rule.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the rule.')
    description = models.TextField(blank=True, null=True, db_comment='The description of the rule.')
    state = models.TextField(blank=True, null=True, db_comment='The state of the rule.')
    event_bus_name = models.TextField(blank=True, null=True, db_comment='The name or ARN of the event bus associated with the rule.')
    created_by = models.TextField(blank=True, null=True, db_comment='The account ID of the user that created the rule.')
    managed_by = models.TextField(blank=True, null=True, db_comment='If this is a managed rule, created by an AWS service on your behalf, this field displays the principal name of the AWS service that created the rule.')
    event_pattern = models.JSONField(blank=True, null=True, db_comment='The event pattern of the rule.')
    name_prefix = models.TextField(blank=True, null=True, db_comment='Specifying this limits the results to only those event rules with names that start with the specified prefix.')
    targets = models.JSONField(blank=True, null=True, db_comment='The targets assigned to the rule.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the rule.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_eventbridge_rule'
        db_table_comment = 'AWS EventBridge Rule'
# Unable to inspect table 'aws_fms_app_list'
# The error was: rpc error: code = Unknown desc = aws: operation error FMS: ListAppsLists, https response error StatusCode: 400, RequestID: ebe31851-b664-4b5f-bece-7affaa1a1de4, api error AccessDeniedException: No default admin could be found for account 730335309881 in Region sa-east-1
# Unable to inspect table 'aws_fms_policy'
# The error was: rpc error: code = Unknown desc = aws: operation error FMS: ListPolicies, https response error StatusCode: 400, RequestID: df223a99-e0cb-4a55-8a2e-7ea6cb29da06, api error AccessDeniedException: No default admin could be found for account 730335309881 in Region sa-east-1


class AwsFsxFileSystem(models.Model):
    file_system_id = models.TextField(blank=True, null=True, db_comment='The system-generated, unique 17-digit ID of the file system.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the EFS file system.')
    file_system_type = models.TextField(blank=True, null=True, db_comment='The type of Amazon FSx file system, which can be LUSTRE, WINDOWS, or ONTAP.')
    lifecycle = models.TextField(blank=True, null=True, db_comment='The lifecycle status of the file system, following are the possible values AVAILABLE, CREATING, DELETING, FAILED, MISCONFIGURED, UPDATING.')
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='The time that the file system was created.')
    dns_name = models.TextField(blank=True, null=True, db_comment='The DNS name for the file system.')
    file_system_type_version = models.TextField(blank=True, null=True, db_comment='The version of your Amazon FSx for Lustre file system, either 2.10 or 2.12.')
    kms_key_id = models.TextField(blank=True, null=True, db_comment="The ID of the Key Management Service (KMS) key used to encrypt the file system's.")
    owner_id = models.TextField(blank=True, null=True, db_comment='The AWS account that created the file system.')
    storage_capacity = models.BigIntegerField(blank=True, null=True, db_comment='The storage capacity of the file system in gibibytes (GiB).')
    storage_type = models.TextField(blank=True, null=True, db_comment='The storage type of the file system.')
    vpc_id = models.TextField(blank=True, null=True, db_comment='The ID of the primary VPC for the file system.')
    administrative_actions = models.JSONField(blank=True, null=True, db_comment='A list of administrative actions for the file system that are in process or waiting to be processed.')
    failure_details = models.JSONField(blank=True, null=True, db_comment='A structure providing details of any failures that occur when creating the file system has failed.')
    lustre_configuration = models.JSONField(blank=True, null=True, db_comment='The configuration for the Amazon FSx for Lustre file system.')
    network_interface_ids = models.JSONField(blank=True, null=True, db_comment='The IDs of the elastic network interface from which a specific file system is accessible.')
    ontap_configuration = models.JSONField(blank=True, null=True, db_comment='The configuration for this FSx for NetApp ONTAP file system.')
    open_zfs_configuration = models.JSONField(blank=True, null=True, db_comment='The configuration for this FSx for NetApp ONTAP file system.')
    subnet_ids = models.JSONField(blank=True, null=True, db_comment='Specifies the IDs of the subnets that the file system is accessible from.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags associated with Filesystem.')
    windows_configuration = models.JSONField(blank=True, null=True, db_comment='The configuration for this Microsoft Windows file system.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_fsx_file_system'
        db_table_comment = 'AWS FSx File System'


class AwsGlacierVault(models.Model):
    vault_name = models.TextField(blank=True, null=True, db_comment='The name of the vault.')
    vault_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the vault.')
    creation_date = models.DateTimeField(blank=True, null=True, db_comment='The Universal Coordinated Time (UTC) date when the vault was created.')
    last_inventory_date = models.DateTimeField(blank=True, null=True, db_comment='The Universal Coordinated Time (UTC) date when Amazon S3 Glacier completed the last vault inventory.')
    number_of_archives = models.BigIntegerField(blank=True, null=True, db_comment='The number of archives in the vault as of the last inventory date.')
    size_in_bytes = models.BigIntegerField(blank=True, null=True, db_comment='Total size, in bytes, of the archives in the vault as of the last inventory date.')
    policy = models.JSONField(blank=True, null=True, db_comment='Contains the returned vault access policy as a JSON string.')
    policy_std = models.JSONField(blank=True, null=True, db_comment='Contains the policy in a canonical form for easier searching.')
    vault_lock_policy = models.JSONField(blank=True, null=True, db_comment='The vault lock policy.')
    vault_lock_policy_std = models.JSONField(blank=True, null=True, db_comment='Contains the policy in a canonical form for easier searching.')
    vault_notification_config = models.JSONField(blank=True, null=True, db_comment='Contains the notification configuration set on the vault.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags associated with the vault.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_glacier_vault'
        db_table_comment = 'AWS Glacier Vault'


class AwsGlobalacceleratorAccelerator(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the accelerator.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the accelerator.')
    created_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time that the accelerator was created.')
    dns_name = models.TextField(blank=True, null=True, db_comment="The Domain Name System (DNS) name that Global Accelerator creates that points to your accelerator's static IP addresses.")
    enabled = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the accelerator is enabled.')
    ip_address_type = models.TextField(blank=True, null=True, db_comment='The value for the address type must be IPv4.')
    ip_sets = models.JSONField(blank=True, null=True, db_comment='The static IP addresses that Global Accelerator associates with the accelerator.')
    last_modified_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time that the accelerator was last modified.')
    status = models.TextField(blank=True, null=True, db_comment='Describes the deployment status of the accelerator.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags associated with the accelerator.')
    accelerator_attributes = models.JSONField(blank=True, null=True, db_comment='Attributes of the accelerator.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_globalaccelerator_accelerator'
        db_table_comment = 'AWS Global Accelerator Accelerator'


class AwsGlobalacceleratorEndpointGroup(models.Model):
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the endpoint group.')
    listener_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of parent listener.')
    endpoint_descriptions = models.JSONField(blank=True, null=True, db_comment='The list of endpoint objects.')
    endpoint_group_region = models.TextField(blank=True, null=True, db_comment='The AWS Region where the endpoint group is located.')
    health_check_interval_seconds = models.BigIntegerField(blank=True, null=True, db_comment='The time—10 seconds or 30 seconds—between health checks for each endpoint.')
    health_check_path = models.TextField(blank=True, null=True, db_comment='If the protocol is HTTP/S, then this value provides the ping path that Global Accelerator uses for the destination on the endpoints for health checks.')
    health_check_port = models.BigIntegerField(blank=True, null=True, db_comment='The port that Global Accelerator uses to perform health checks on endpoints that are part of this endpoint group.')
    health_check_protocol = models.TextField(blank=True, null=True, db_comment='The protocol that Global Accelerator uses to perform health checks on endpoints that are part of this endpoint group.')
    port_overrides = models.JSONField(blank=True, null=True, db_comment='Overrides for destination ports used to route traffic to an endpoint.')
    threshold_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of consecutive health checks required to set the state of a healthy endpoint to unhealthy, or to set an unhealthy endpoint to healthy.')
    traffic_dial_percentage = models.FloatField(blank=True, null=True, db_comment='The percentage of traffic to send to an AWS Region.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_globalaccelerator_endpoint_group'
        db_table_comment = 'AWS Global Accelerator Endpoint Group'


class AwsGlobalacceleratorListener(models.Model):
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the listener.')
    accelerator_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of parent accelerator.')
    client_affinity = models.TextField(blank=True, null=True, db_comment='Client affinity setting for the listener.')
    port_ranges = models.JSONField(blank=True, null=True, db_comment='The list of port ranges for the connections from clients to the accelerator.')
    protocol = models.TextField(blank=True, null=True, db_comment='The protocol for the connections from clients to the accelerator.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_globalaccelerator_listener'
        db_table_comment = 'AWS Global Accelerator Listener'


class AwsGlueCatalogDatabase(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the database. For Hive compatibility, this is folded to lowercase when it is stored.')
    catalog_id = models.TextField(blank=True, null=True, db_comment='The ID of the Data Catalog in which the database resides.')
    create_time = models.DateTimeField(blank=True, null=True, db_comment='The time at which the metadata database was created in the catalog.')
    description = models.TextField(blank=True, null=True, db_comment='A description of the database.')
    location_uri = models.TextField(blank=True, null=True, db_comment='The location of the database (for example, an HDFS path).')
    create_table_default_permissions = models.JSONField(blank=True, null=True, db_comment='Creates a set of default permissions on the table for principals.')
    parameters = models.JSONField(blank=True, null=True, db_comment='These key-value pairs define parameters and properties of the database.')
    target_database = models.JSONField(blank=True, null=True, db_comment='A DatabaseIdentifier structure that describes a target database for resource linking.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_glue_catalog_database'
        db_table_comment = 'AWS Glue Catalog Database'


class AwsGlueCatalogTable(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The table name.')
    catalog_id = models.TextField(blank=True, null=True, db_comment='The ID of the Data Catalog in which the table resides.')
    create_time = models.DateTimeField(blank=True, null=True, db_comment='The time when the table definition was created in the data catalog.')
    description = models.TextField(blank=True, null=True, db_comment='A description of the table.')
    created_by = models.TextField(blank=True, null=True, db_comment='The person or entity who created the table.')
    database_name = models.TextField(blank=True, null=True, db_comment='The name of the database where the table metadata resides.')
    is_registered_with_lake_formation = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the table has been registered with lake formation.')
    last_access_time = models.DateTimeField(blank=True, null=True, db_comment='The last time that the table was accessed. This is usually taken from HDFS, and might not be reliable.')
    last_analyzed_time = models.DateTimeField(blank=True, null=True, db_comment='The last time that column statistics were computed for this table.')
    owner = models.TextField(blank=True, null=True, db_comment='The owner of the table.')
    retention = models.BigIntegerField(blank=True, null=True, db_comment='The retention time for this table.')
    table_type = models.TextField(blank=True, null=True, db_comment='The type of this table (EXTERNAL_TABLE, VIRTUAL_VIEW, etc.).')
    update_time = models.DateTimeField(blank=True, null=True, db_comment='The last time that the table was updated.')
    view_expanded_text = models.TextField(blank=True, null=True, db_comment='If the table is a view, the expanded text of the view otherwise null.')
    view_original_text = models.TextField(blank=True, null=True, db_comment='If the table is a view, the original text of the view otherwise null.')
    parameters = models.JSONField(blank=True, null=True, db_comment='These key-value pairs define properties associated with the table.')
    partition_keys = models.JSONField(blank=True, null=True, db_comment='A list of columns by which the table is partitioned.')
    storage_descriptor = models.JSONField(blank=True, null=True, db_comment='A storage descriptor containing information about the physical storage of this table.')
    target_table = models.JSONField(blank=True, null=True, db_comment='A TableIdentifier structure that describes a target table for resource linking.')
    lf_tags = models.JSONField(blank=True, null=True, db_comment='LF-Tags assigned to the table by AWS Lake Formation.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_glue_catalog_table'
        db_table_comment = 'AWS Glue Catalog Table'


class AwsGlueConnection(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the connection definition.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the connection.')
    connection_type = models.TextField(blank=True, null=True, db_comment='The type of the connection. Currently, SFTP is not supported.')
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='The time that this connection definition was created.')
    description = models.TextField(blank=True, null=True, db_comment='The description of the connection.')
    last_updated_by = models.TextField(blank=True, null=True, db_comment='The user, group, or role that last updated this connection definition.')
    last_updated_time = models.DateTimeField(blank=True, null=True, db_comment='The last time that this connection definition was updated.')
    connection_properties = models.JSONField(blank=True, null=True, db_comment='These key-value pairs define parameters for the connection.')
    match_criteria = models.JSONField(blank=True, null=True, db_comment='A list of criteria that can be used in selecting this connection.')
    physical_connection_requirements = models.JSONField(blank=True, null=True, db_comment='A map of physical connection requirements, such as virtual private cloud (VPC) and SecurityGroup, that are needed to make this connection successfully.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_glue_connection'
        db_table_comment = 'AWS Glue Connection'


class AwsGlueCrawler(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the crawler.')
    arn = models.TextField(blank=True, null=True, db_comment='The ARN of the crawler.')
    database_name = models.TextField(blank=True, null=True, db_comment="The name of the database in which the crawler's output is stored.")
    state = models.TextField(blank=True, null=True, db_comment='Indicates whether the crawler is running or pending.')
    role = models.TextField(blank=True, null=True, db_comment="The Amazon Resource Name (ARN) of an IAM role that's used to access customer resources, such as Amazon Simple Storage Service (Amazon S3) data.")
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='The time that the crawler was created.')
    description = models.TextField(blank=True, null=True, db_comment='A description of the crawler.')
    crawl_elapsed_time = models.BigIntegerField(blank=True, null=True, db_comment='If the crawler is running, contains the total time elapsed since the last crawl began.')
    crawler_lineage_settings = models.TextField(blank=True, null=True, db_comment='Specifies whether data lineage is enabled for the crawler.')
    crawler_security_configuration = models.TextField(blank=True, null=True, db_comment='The name of the SecurityConfiguration structure to be used by this crawler.')
    last_updated = models.DateTimeField(blank=True, null=True, db_comment='The time that the crawler was last updated.')
    recrawl_behavior = models.TextField(blank=True, null=True, db_comment='Specifies whether to crawl the entire dataset again or to crawl only folders that were added since the last crawler run. A value of CRAWL_EVERYTHING specifies crawling the entire dataset again. A value of CRAWL_NEW_FOLDERS_ONLY specifies crawling only folders that were added since the last crawler run. A value of CRAWL_EVENT_MODE specifies crawling only the changes identified by Amazon S3 events.')
    table_prefix = models.TextField(blank=True, null=True, db_comment='The prefix added to the names of tables that are created.')
    version = models.BigIntegerField(blank=True, null=True, db_comment='The version of the crawler.')
    classifiers = models.JSONField(blank=True, null=True, db_comment='A list of UTF-8 strings that specify the custom classifiers that are associated with the crawler.')
    configuration = models.JSONField(blank=True, null=True, db_comment='Crawler configuration information.')
    last_crawl = models.JSONField(blank=True, null=True, db_comment='The status of the last crawl, and potentially error information if an error occurred.')
    schedule = models.JSONField(blank=True, null=True, db_comment='For scheduled crawlers, the schedule when the crawler runs.')
    schema_change_policy = models.JSONField(blank=True, null=True, db_comment='The policy that specifies update and delete behaviors for the crawler.')
    targets = models.JSONField(blank=True, null=True, db_comment='A collection of targets to crawl.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_glue_crawler'
        db_table_comment = 'AWS Glue Crawler'


class AwsGlueDataCatalogEncryptionSettings(models.Model):
    encryption_at_rest = models.JSONField(blank=True, null=True, db_comment='A list of public keys to be used by the DataCatalogEncryptionSettingss for authentication.')
    connection_password_encryption = models.JSONField(blank=True, null=True, db_comment='A list of security group identifiers used in this DataCatalogEncryptionSettings.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_glue_data_catalog_encryption_settings'
        db_table_comment = 'AWS Glue Data Catalog Encryption Settings'


class AwsGlueDataQualityRuleset(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the data quality ruleset.')
    database_name = models.TextField(blank=True, null=True, db_comment='The name of the database where the glue table exists.')
    table_name = models.TextField(blank=True, null=True, db_comment='The name of the glue table.')
    created_on = models.DateTimeField(blank=True, null=True, db_comment='The date and time the data quality ruleset was created.')
    description = models.TextField(blank=True, null=True, db_comment='A description of the data quality ruleset.')
    last_modified_on = models.DateTimeField(blank=True, null=True, db_comment='The date and time the data quality ruleset was last modified.')
    recommendation_run_id = models.TextField(blank=True, null=True, db_comment='When a ruleset was created from a recommendation run, this run ID is generated to link the two together.')
    rule_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of rules in the ruleset.')
    rule_set = models.TextField(blank=True, null=True, db_comment='A Data Quality Definition Language (DQDL) ruleset.')
    target_table = models.JSONField(blank=True, null=True, db_comment='An object representing a glue table.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_glue_data_quality_ruleset'
        db_table_comment = 'AWS Glue Data Quality Ruleset'


class AwsGlueDevEndpoint(models.Model):
    endpoint_name = models.TextField(blank=True, null=True, db_comment='The name of the DevEndpoint.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the DevEndpoint.')
    status = models.TextField(blank=True, null=True, db_comment='The current status of this DevEndpoint.')
    availability_zone = models.TextField(blank=True, null=True, db_comment='The AWS Availability Zone where this DevEndpoint is located.')
    created_timestamp = models.DateTimeField(blank=True, null=True, db_comment='The point in time at which this DevEndpoint was created.')
    extra_jars_s3_path = models.TextField(blank=True, null=True, db_comment='The path to one or more Java .jar files in an S3 bucket that should be loaded in your DevEndpoint.')
    extra_python_libs_s3_path = models.TextField(blank=True, null=True, db_comment='The paths to one or more Python libraries in an Amazon S3 bucket that should be loaded in your DevEndpoint. Multiple values must be complete paths separated by a comma.')
    failure_reason = models.TextField(blank=True, null=True, db_comment='The reason for a current failure in this DevEndpoint.')
    glue_version = models.TextField(blank=True, null=True, db_comment='Glue version determines the versions of Apache Spark and Python that Glue supports.')
    last_modified_timestamp = models.DateTimeField(blank=True, null=True, db_comment='The point in time at which this DevEndpoint was last modified.')
    last_update_status = models.TextField(blank=True, null=True, db_comment='The status of the last update.')
    number_of_nodes = models.BigIntegerField(blank=True, null=True, db_comment='The number of Glue Data Processing Units (DPUs) allocated to this DevEndpoint.')
    number_of_workers = models.BigIntegerField(blank=True, null=True, db_comment='The number of workers of a defined workerType that are allocated to the development endpoint.')
    private_address = models.TextField(blank=True, null=True, db_comment='A private IP address to access the DevEndpoint within a VPC if the DevEndpoint is created within one.')
    public_address = models.TextField(blank=True, null=True, db_comment='The public IP address used by this DevEndpoint. The PublicAddress field is present only when you create a non-virtual private cloud (VPC) DevEndpoint.')
    public_key = models.TextField(blank=True, null=True, db_comment='The public key to be used by this DevEndpoint for authentication.')
    role_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the IAM role used in this DevEndpoint.')
    security_configuration = models.TextField(blank=True, null=True, db_comment='The name of the SecurityConfiguration structure to be used with this DevEndpoint.')
    subnet_id = models.TextField(blank=True, null=True, db_comment='The subnet ID for this DevEndpoint.')
    vpc_id = models.TextField(blank=True, null=True, db_comment='The ID of the virtual private cloud (VPC) used by this DevEndpoint.')
    worker_type = models.TextField(blank=True, null=True, db_comment='The type of predefined worker that is allocated to the development endpoint. Accepts a value of Standard, G.1X, or G.2X.')
    yarn_endpoint_address = models.TextField(blank=True, null=True, db_comment='The YARN endpoint address used by this DevEndpoint.')
    zeppelin_remote_spark_interpreter_port = models.BigIntegerField(blank=True, null=True, db_comment='The Apache Zeppelin port for the remote Apache Spark interpreter.')
    public_keys = models.JSONField(blank=True, null=True, db_comment='A list of public keys to be used by the DevEndpoints for authentication.')
    security_group_ids = models.JSONField(blank=True, null=True, db_comment='A list of security group identifiers used in this DevEndpoint.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_glue_dev_endpoint'
        db_table_comment = 'AWS Glue Dev Endpoint'


class AwsGlueJob(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the GlueJob.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the GlueJob.')
    allocated_capacity = models.FloatField(blank=True, null=True, db_comment='[DEPRECATED] This column has been deprecated and will be removed in a future release, use max_capacity instead. The number of Glue data processing units (DPUs) that can be allocated when this job runs.')
    created_on = models.DateTimeField(blank=True, null=True, db_comment='The time and date that this job definition was created.')
    description = models.TextField(blank=True, null=True, db_comment='A description of the job.')
    glue_version = models.TextField(blank=True, null=True, db_comment='Glue version determines the versions of Apache Spark and Python that Glue supports.')
    last_modified_on = models.DateTimeField(blank=True, null=True, db_comment='The last point in time when this job definition was modified.')
    log_uri = models.TextField(blank=True, null=True, db_comment='This field is reserved for future use.')
    max_capacity = models.FloatField(blank=True, null=True, db_comment='The number of Glue data processing units (DPUs) that can be allocated when this job runs.')
    max_retries = models.BigIntegerField(blank=True, null=True, db_comment='The maximum number of times to retry this job after a JobRun fails.')
    number_of_workers = models.BigIntegerField(blank=True, null=True, db_comment='The number of workers of a defined workerType that are allocated when a job runs.')
    role = models.TextField(blank=True, null=True, db_comment='The name or Amazon Resource Name (ARN) of the IAM role associated with this job.')
    security_configuration = models.TextField(blank=True, null=True, db_comment='The name of the SecurityConfiguration structure to be used with this job.')
    timeout = models.BigIntegerField(blank=True, null=True, db_comment='The job timeout in minutes.')
    worker_type = models.TextField(blank=True, null=True, db_comment='The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, or G.2X.')
    command = models.JSONField(blank=True, null=True, db_comment='The JobCommand that runs this job.')
    connections = models.JSONField(blank=True, null=True, db_comment='The connections used for this job.')
    default_arguments = models.JSONField(blank=True, null=True, db_comment='The default arguments for this job, specified as name-value pairs.')
    execution_property = models.JSONField(blank=True, null=True, db_comment='An ExecutionProperty specifying the maximum number of concurrent runs allowed for this job.')
    job_bookmark = models.JSONField(blank=True, null=True, db_comment='Defines a point that a job can resume processing.')
    non_overridable_arguments = models.JSONField(blank=True, null=True, db_comment='Non-overridable arguments for this job, specified as name-value pairs.')
    notification_property = models.JSONField(blank=True, null=True, db_comment='Specifies configuration properties of a job notification.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_glue_job'
        db_table_comment = 'AWS Glue Job'


class AwsGlueSecurityConfiguration(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the security configuration.')
    created_time_stamp = models.DateTimeField(blank=True, null=True, db_comment='The time at which this security configuration was created.')
    cloud_watch_encryption = models.JSONField(blank=True, null=True, db_comment='The encryption configuration for Amazon CloudWatch.')
    job_bookmarks_encryption = models.JSONField(blank=True, null=True, db_comment='The encryption configuration for job bookmarks.')
    s3_encryption = models.JSONField(blank=True, null=True, db_comment='The encryption configuration for Amazon Simple Storage Service (Amazon S3) data.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_glue_security_configuration'
        db_table_comment = 'AWS Glue Security Configuration'


class AwsGuarddutyDetector(models.Model):
    detector_id = models.TextField(blank=True, null=True, db_comment='The ID of the detector.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the detector.')
    status = models.TextField(blank=True, null=True, db_comment='The detector status.')
    created_at = models.DateTimeField(blank=True, null=True, db_comment='The timestamp of when the detector was created.')
    finding_publishing_frequency = models.TextField(blank=True, null=True, db_comment='The publishing frequency of the finding.')
    service_role = models.TextField(blank=True, null=True, db_comment='The GuardDuty service role.')
    updated_at = models.DateTimeField(blank=True, null=True, db_comment='The last-updated timestamp for the detector.')
    data_sources = models.JSONField(blank=True, null=True, db_comment='Describes which data sources are enabled for the detector.')
    features = models.JSONField(blank=True, null=True, db_comment='Describes the features that have been enabled for the detector.')
    master_account = models.JSONField(blank=True, null=True, db_comment='Contains information about the administrator account and invitation.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_guardduty_detector'
        db_table_comment = 'AWS GuardDuty Detector'


class AwsGuarddutyFilter(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name for the filter.')
    detector_id = models.TextField(blank=True, null=True, db_comment='The ID of the detector.')
    action = models.TextField(blank=True, null=True, db_comment='Specifies the action that is to be applied to the findings that match the filter.')
    description = models.TextField(blank=True, null=True, db_comment='The description of the filter.')
    rank = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.')
    finding_criteria = models.JSONField(blank=True, null=True, db_comment='Represents the criteria to be used in the filter for querying findings.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_guardduty_filter'
        db_table_comment = 'AWS GuardDuty Filter'


class AwsGuarddutyFinding(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The title of the finding.')
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The ID of the finding.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the finding.')
    detector_id = models.TextField(blank=True, null=True, db_comment='The ID of the detector.')
    severity = models.FloatField(blank=True, null=True, db_comment='The severity of the finding.')
    created_at = models.DateTimeField(blank=True, null=True, db_comment='The time and date when the finding was created.')
    confidence = models.FloatField(blank=True, null=True, db_comment='The confidence score for the finding.')
    description = models.TextField(blank=True, null=True, db_comment='The description of the finding.')
    schema_version = models.TextField(blank=True, null=True, db_comment='The version of the schema used for the finding.')
    type = models.TextField(blank=True, null=True, db_comment='The type of finding.')
    updated_at = models.DateTimeField(blank=True, null=True, db_comment='The time and date when the finding was last updated.')
    resource = models.JSONField(blank=True, null=True, db_comment='Contains information about the AWS resource associated with the activity that prompted GuardDuty to generate a finding.')
    service = models.JSONField(blank=True, null=True, db_comment='Contains additional information about the generated finding.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_guardduty_finding'
        db_table_comment = 'AWS GuardDuty Finding'


class AwsGuarddutyIpset(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name for the IPSet.')
    detector_id = models.TextField(blank=True, null=True, db_comment='The ID of the detector.')
    ipset_id = models.TextField(blank=True, null=True, db_comment='The ID of the IPSet.')
    format = models.TextField(blank=True, null=True, db_comment='The format of the file that contains the IPSet.')
    status = models.TextField(blank=True, null=True, db_comment='The status of IPSet.')
    location = models.TextField(blank=True, null=True, db_comment='The URI of the file that contains the IPSet.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_guardduty_ipset'
        db_table_comment = 'AWS GuardDuty IPSet'


class AwsGuarddutyMember(models.Model):
    member_account_id = models.TextField(blank=True, null=True, db_comment='The ID of the member account.')
    detector_id = models.TextField(blank=True, null=True, db_comment='The detector ID of the member account.')
    master_id = models.TextField(blank=True, null=True, db_comment='The administrator account ID.')
    email = models.TextField(blank=True, null=True, db_comment='The email address of the member account.')
    invited_at = models.DateTimeField(blank=True, null=True, db_comment='The timestamp when the invitation was sent.')
    relationship_status = models.TextField(blank=True, null=True, db_comment='The status of the relationship between the member and the administrator.')
    updated_at = models.DateTimeField(blank=True, null=True, db_comment='The last-updated timestamp of the member.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_guardduty_member'
        db_table_comment = 'AWS GuardDuty Member'


class AwsGuarddutyPublishingDestination(models.Model):
    destination_id = models.TextField(blank=True, null=True, db_comment='The ID of the publishing destination.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the publishing destination.')
    detector_id = models.TextField(blank=True, null=True, db_comment='The ID of the detector.')
    destination_arn = models.TextField(blank=True, null=True, db_comment='The ARN of the resource to publish to.')
    destination_type = models.TextField(blank=True, null=True, db_comment='The type of publishing destination. Currently, only Amazon S3 buckets are supported.')
    kms_key_arn = models.TextField(blank=True, null=True, db_comment='The ARN of the KMS key to use for encryption.')
    publishing_failure_start_timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time, in epoch millisecond format, at which GuardDuty was first unable to publish findings to the destination.')
    status = models.TextField(blank=True, null=True, db_comment='The status of the publishing destination.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_guardduty_publishing_destination'
        db_table_comment = 'AWS GuardDuty Publishing Destination'


class AwsGuarddutyThreatIntelSet(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='A ThreatIntelSet name displayed in all findings that are generated by activity that involves IP addresses included in this ThreatIntelSet.')
    threat_intel_set_id = models.TextField(blank=True, null=True, db_comment='The ID of the ThreatIntelSet.')
    detector_id = models.TextField(blank=True, null=True, db_comment='The ID of the detector.')
    format = models.TextField(blank=True, null=True, db_comment='The format of the threatIntelSet.')
    location = models.TextField(blank=True, null=True, db_comment='The URI of the file that contains the ThreatIntelSet.')
    status = models.TextField(blank=True, null=True, db_comment='The status of threatIntelSet file uploaded.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_guardduty_threat_intel_set'
        db_table_comment = 'AWS GuardDuty ThreatIntelSet'


class AwsHealthAffectedEntity(models.Model):
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the health entity.')
    entity_url = models.TextField(blank=True, null=True, db_comment='The URL of the affected entity.')
    entity_value = models.TextField(blank=True, null=True, db_comment='The ID of the affected entity.')
    event_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the health event.')
    last_updated_time = models.DateTimeField(blank=True, null=True, db_comment='The most recent time that the entity was updated.')
    status_code = models.TextField(blank=True, null=True, db_comment='The most recent status of the entity affected by the event. The possible values are IMPAIRED, UNIMPAIRED, and UNKNOWN.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_health_affected_entity'
        db_table_comment = 'AWS Health Affected Entity'
# Unable to inspect table 'aws_health_event'
# The error was: rpc error: code = Unknown desc = aws: operation error Health: DescribeEvents, https response error StatusCode: 400, RequestID: 4494f3d2-9d06-47ad-ae06-ff3595194a96, api error SubscriptionRequiredException: UnknownError
# Unable to inspect table 'aws_iam_access_advisor'
# The error was: rpc error: code = Internal desc = aws: rpc error: code = Internal desc = 'List' call for table 'aws_iam_access_advisor' is missing 1 required qual: column:'principal_arn' operator: =



class AwsIamAccessKey(models.Model):
    access_key_id = models.TextField(blank=True, null=True, db_comment='The ID for this access key.')
    user_name = models.TextField(blank=True, null=True, db_comment='The name of the IAM user that the key is associated with.')
    status = models.TextField(blank=True, null=True, db_comment='The status of the access key. Active means that the key is valid for API calls; Inactive means it is not.')
    create_date = models.DateTimeField(blank=True, null=True, db_comment='The date when the access key was created.')
    access_key_last_used_date = models.DateTimeField(blank=True, null=True, db_comment='The date when the access key was last used.')
    access_key_last_used_service = models.TextField(blank=True, null=True, db_comment='The service last used by the access key.')
    access_key_last_used_region = models.TextField(blank=True, null=True, db_comment='The region in which the access key was last used.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_iam_access_key'
        db_table_comment = 'AWS IAM User Access Key'


class AwsIamAccountPasswordPolicy(models.Model):
    allow_users_to_change_password = models.BooleanField(blank=True, null=True, db_comment='Specifies whether IAM users are allowed to change their own password.')
    expire_passwords = models.BooleanField(blank=True, null=True, db_comment='Indicates whether passwords in the account expire. Returns true if MaxPasswordAge contains a value greater than 0. Returns false if MaxPasswordAge is 0 or not present.')
    hard_expiry = models.BooleanField(blank=True, null=True, db_comment='Specifies whether IAM users are prevented from setting a new password after.')
    max_password_age = models.BigIntegerField(blank=True, null=True, db_comment='The number of days that an IAM user password is valid.')
    minimum_password_length = models.BigIntegerField(blank=True, null=True, db_comment='Minimum length to require for IAM user passwords.')
    password_reuse_prevention = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the number of previous passwords that IAM users are prevented from reusing.')
    require_lowercase_characters = models.BooleanField(blank=True, null=True, db_comment='Specifies whether to require lowercase characters for IAM user passwords.')
    require_numbers = models.BooleanField(blank=True, null=True, db_comment='Specifies whether to require numbers for IAM user passwords.')
    require_symbols = models.BooleanField(blank=True, null=True, db_comment='Specifies whether to require symbols for IAM user passwords.')
    require_uppercase_characters = models.BooleanField(blank=True, null=True, db_comment='Specifies whether to require uppercase characters for IAM user passwords.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_iam_account_password_policy'
        db_table_comment = 'AWS IAM Account Password Policy'


class AwsIamAccountSummary(models.Model):
    access_keys_per_user_quota = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the allowed quota of access keys per user.')
    account_access_keys_present = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the number of account level access keys present.')
    account_mfa_enabled = models.BooleanField(blank=True, null=True, db_comment='Specifies whether MFA is enabled for the account.')
    account_signing_certificates_present = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the number of account signing certificates present.')
    assume_role_policy_size_quota = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the allowed assume role policy size.')
    attached_policies_per_group_quota = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the allowed attached policies per group.')
    attached_policies_per_role_quota = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the allowed attached policies per role.')
    attached_policies_per_user_quota = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the allowed attached policies per user.')
    global_endpoint_token_version = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the token version of the global endpoint.')
    group_policy_size_quota = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the allowed group policy size.')
    groups = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the number of groups.')
    groups_per_user_quota = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the allowed number of groups.')
    groups_quota = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the allowed number of groups.')
    instance_profiles = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the number of groups.')
    instance_profiles_quota = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the allowed number of groups.')
    mfa_devices = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the number of MFA devices.')
    mfa_devices_in_use = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the number of MFA devices in use.')
    policies = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the number of policies.')
    policies_quota = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the allowed number of policies.')
    policy_size_quota = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the allowed size of policies.')
    policy_versions_in_use = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the number of policy versions in use.')
    policy_versions_in_use_quota = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the allowed number of policy versions.')
    providers = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the number of providers.')
    role_policy_size_quota = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the allowed role policy size.')
    roles = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the number of roles.')
    roles_quota = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the allowed number of roles.')
    server_certificates = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the number of server certificates.')
    server_certificates_quota = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the allowed number of server certificates.')
    signing_certificates_per_user_quota = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the allowed number of signing certificates per user.')
    user_policy_size_quota = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the allowed user policy size.')
    users = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the number of users.')
    users_quota = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the allowed number of users.')
    versions_per_policy_quota = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the allowed number of versions per policy.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_iam_account_summary'
        db_table_comment = 'AWS IAM Account Summary'


class AwsIamAction(models.Model):
    action = models.TextField(blank=True, null=True, db_comment='The action for this permission.')
    prefix = models.TextField(blank=True, null=True, db_comment='The prefix for this action.')
    privilege = models.TextField(blank=True, null=True, db_comment='The privilege for this action.')
    access_level = models.TextField(blank=True, null=True, db_comment='The access level for this action.')
    description = models.TextField(blank=True, null=True, db_comment='The description for this action.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_iam_action'
        db_table_comment = 'AWS IAM Action'
# Unable to inspect table 'aws_iam_credential_report'
# The error was: rpc error: code = Unknown desc = aws: Credential report not available. Please run 'aws iam generate-credential-report' to generate it and try again.


class AwsIamGroup(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The friendly name that identifies the group.')
    group_id = models.TextField(blank=True, null=True, db_comment='The stable and unique string identifying the group.')
    path = models.TextField(blank=True, null=True, db_comment='The path to the group.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the group.')
    create_date = models.DateTimeField(blank=True, null=True, db_comment='The date and time, when the group was created.')
    inline_policies = models.JSONField(blank=True, null=True, db_comment='A list of policy documents that are embedded as inline policies for the group.')
    inline_policies_std = models.JSONField(blank=True, null=True, db_comment='Inline policies in canonical form for the group.')
    attached_policy_arns = models.JSONField(blank=True, null=True, db_comment='A list of managed policies attached to the group.')
    users = models.JSONField(blank=True, null=True, db_comment='A list of users in the group.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_iam_group'
        db_table_comment = 'AWS IAM Group'


class AwsIamOpenIdConnectProvider(models.Model):
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the OIDC provider resource.')
    client_id_list = models.JSONField(blank=True, null=True, db_comment='A list of client IDs (also known as audiences) that are associated with the specified IAM OIDC provider resource object.')
    create_date = models.DateTimeField(blank=True, null=True, db_comment='The date and time when the IAM OIDC provider resource object was created in the Amazon Web Services account.')
    thumbprint_list = models.JSONField(blank=True, null=True, db_comment='A list of certificate thumbprints that are associated with the specified IAM OIDC provider resource object.')
    url = models.TextField(blank=True, null=True, db_comment='The URL that the IAM OIDC provider resource object is associated with.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags that are attached to the specified IAM OIDC provider.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_iam_open_id_connect_provider'
        db_table_comment = 'AWS IAM OpenID Connect Provider'


class AwsIamPolicy(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The friendly name that identifies the iam policy.')
    policy_id = models.TextField(blank=True, null=True, db_comment='The stable and unique string identifying the policy.')
    path = models.TextField(blank=True, null=True, db_comment='The path to the policy.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the iam policy.')
    is_aws_managed = models.BooleanField(blank=True, null=True, db_comment='Specifies whether the policy is AWS Managed or Customer Managed. If true policy is aws managed otherwise customer managed.')
    is_attachable = models.BooleanField(blank=True, null=True, db_comment='Specifies whether the policy can be attached to an IAM user, group, or role.')
    create_date = models.DateTimeField(blank=True, null=True, db_comment='The date and time, when the policy was created.')
    update_date = models.DateTimeField(blank=True, null=True, db_comment='The date and time, when the policy was last updated.')
    attachment_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of entities (users, groups, and roles) that the policy is attached to.')
    is_attached = models.BooleanField(blank=True, null=True, db_comment='Specifies whether the policy is attached to at least one IAM user, group, or role.')
    default_version_id = models.TextField(blank=True, null=True, db_comment='The identifier for the version of the policy that is set as the default version.')
    permissions_boundary_usage_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of entities (users and roles) for which the policy is used to set the permissions boundary.')
    policy = models.JSONField(blank=True, null=True, db_comment='Contains the details about the policy.')
    policy_std = models.JSONField(blank=True, null=True, db_comment='Contains the policy in a canonical form for easier searching.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags attached with the IAM policy.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_iam_policy'
        db_table_comment = 'AWS IAM Policy'


class AwsIamPolicyAttachment(models.Model):
    policy_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the IAM policy.')
    is_attached = models.BooleanField(blank=True, null=True, db_comment='Specifies whether the policy is attached to at least one IAM user, group, or role.')
    policy_groups = models.JSONField(blank=True, null=True, db_comment='A list of IAM groups that the policy is attached to.')
    policy_roles = models.JSONField(blank=True, null=True, db_comment='A list of IAM roles that the policy is attached to.')
    policy_users = models.JSONField(blank=True, null=True, db_comment='A list of IAM users that the policy is attached to.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_iam_policy_attachment'
        db_table_comment = 'AWS IAM Policy Attachment'


class AwsIamRole(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The friendly name that identifies the role.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the role.')
    role_id = models.TextField(blank=True, null=True, db_comment='The stable and unique string identifying the role.')
    create_date = models.DateTimeField(blank=True, null=True, db_comment='The date and time when the role was created.')
    description = models.TextField(blank=True, null=True, db_comment='A user-provided description of the role.')
    instance_profile_arns = models.JSONField(blank=True, null=True, db_comment='A list of instance profiles associated with the role.')
    max_session_duration = models.BigIntegerField(blank=True, null=True, db_comment='The maximum session duration (in seconds) for the specified role. Anyone who uses the AWS CLI, or API to assume the role can specify the duration using the optional DurationSeconds API parameter or duration-seconds CLI parameter.')
    path = models.TextField(blank=True, null=True, db_comment='The path to the role.')
    permissions_boundary_arn = models.TextField(blank=True, null=True, db_comment='The ARN of the policy used to set the permissions boundary for the role.')
    permissions_boundary_type = models.TextField(blank=True, null=True, db_comment='The permissions boundary usage type that indicates what type of IAM resource is used as the permissions boundary for an entity. This data type can only have a value of Policy.')
    role_last_used_date = models.DateTimeField(blank=True, null=True, db_comment='Contains information about the last time that an IAM role was used. Activity is only reported for the trailing 400 days. This period can be shorter if your Region began supporting these features within the last year. The role might have been used more than 400 days ago.')
    role_last_used_region = models.TextField(blank=True, null=True, db_comment='Contains the region in which the IAM role was used.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags that are attached to the role.')
    inline_policies = models.JSONField(blank=True, null=True, db_comment='A list of policy documents that are embedded as inline policies for the role..')
    inline_policies_std = models.JSONField(blank=True, null=True, db_comment='Inline policies in canonical form for the role.')
    attached_policy_arns = models.JSONField(blank=True, null=True, db_comment='A list of managed policies attached to the role.')
    assume_role_policy = models.JSONField(blank=True, null=True, db_comment='The policy that grants an entity permission to assume the role.')
    assume_role_policy_std = models.JSONField(blank=True, null=True, db_comment='Contains the assume role policy in a canonical form for easier searching.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_iam_role'
        db_table_comment = 'AWS IAM Role'


class AwsIamSamlProvider(models.Model):
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the IAM policy.')
    create_date = models.DateTimeField(blank=True, null=True, db_comment='The date and time when the SAML provider was created.')
    valid_until = models.DateTimeField(blank=True, null=True, db_comment='The expiration date and time for the SAML provider.')
    saml_metadata_document = models.TextField(blank=True, null=True, db_comment='The XML metadata document that includes information about an identity provider.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags that are attached to the specified IAM SAML provider.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_iam_saml_provider'
        db_table_comment = 'AWS IAM Saml Provider'


class AwsIamServerCertificate(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name that identifies the server certificate.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the server certificate.')
    server_certificate_id = models.TextField(blank=True, null=True, db_comment='The stable and unique string identifying the server certificate.')
    expiration = models.DateTimeField(blank=True, null=True, db_comment='The date on which the certificate is set to expire.')
    certificate_body = models.TextField(blank=True, null=True, db_comment='The contents of the public key certificate.')
    certificate_chain = models.TextField(blank=True, null=True, db_comment='The contents of the public key certificate chain.')
    path = models.TextField(blank=True, null=True, db_comment='The path to the server certificate.')
    upload_date = models.DateTimeField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the account that is designated as the management account for the organization')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags attached with the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_iam_server_certificate'
        db_table_comment = 'AWS IAM Server Certificate'


class AwsIamServiceSpecificCredential(models.Model):
    service_name = models.TextField(blank=True, null=True, db_comment='The name of the service associated with the service-specific credential.')
    service_specific_credential_id = models.TextField(blank=True, null=True, db_comment='The unique identifier for the service-specific credential.')
    create_date = models.DateTimeField(blank=True, null=True, db_comment='The date and time, in ISO 8601 date-time format (http://www.iso.org/iso/iso8601), when the service-specific credential were created.')
    service_user_name = models.TextField(blank=True, null=True, db_comment='The generated user name for the service-specific credential.')
    status = models.TextField(blank=True, null=True, db_comment='The status of the service-specific credential. Active means that the key is valid for API calls, while Inactive means it is not.')
    user_name = models.TextField(blank=True, null=True, db_comment='The name of the IAM user associated with the service-specific credential.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_iam_service_specific_credential'
        db_table_comment = 'AWS IAM User Service Specific Credential'


class AwsIamUser(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The friendly name identifying the user.')
    user_id = models.TextField(blank=True, null=True, db_comment='The stable and unique string identifying the user.')
    path = models.TextField(blank=True, null=True, db_comment='The path to the user.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) that identifies the user.')
    create_date = models.DateTimeField(blank=True, null=True, db_comment='The date and time, when the user was created.')
    password_last_used = models.DateTimeField(blank=True, null=True, db_comment="The date and time, when the user's password was last used to sign in to an AWS website.")
    permissions_boundary_arn = models.TextField(blank=True, null=True, db_comment='The ARN of the policy used to set the permissions boundary for the user.')
    permissions_boundary_type = models.TextField(blank=True, null=True, db_comment='The permissions boundary usage type that indicates what type of IAM resource is used as the permissions boundary for an entity. This data type can only have a value of Policy.')
    mfa_enabled = models.BooleanField(blank=True, null=True, db_comment='The MFA status of the user.')
    login_profile = models.JSONField(blank=True, null=True, db_comment='Contains the user name and password create date for a user.')
    mfa_devices = models.JSONField(blank=True, null=True, db_comment='A list of MFA devices attached to the user.')
    groups = models.JSONField(blank=True, null=True, db_comment='A list of groups attached to the user.')
    inline_policies = models.JSONField(blank=True, null=True, db_comment='A list of policy documents that are embedded as inline policies for the user.')
    inline_policies_std = models.JSONField(blank=True, null=True, db_comment='Inline policies in canonical form for the user.')
    attached_policy_arns = models.JSONField(blank=True, null=True, db_comment='A list of managed policies attached to the user.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags that are attached to the user.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_iam_user'
        db_table_comment = 'AWS IAM User'


class AwsIamVirtualMfaDevice(models.Model):
    serial_number = models.TextField(blank=True, null=True, db_comment='The serial number associated with VirtualMFADevice.')
    enable_date = models.DateTimeField(blank=True, null=True, db_comment='The date and time on which the virtual MFA device was enabled.')
    assignment_status = models.TextField(blank=True, null=True, db_comment='The status (Unassigned or Assigned) of the device.')
    user_id = models.TextField(blank=True, null=True, db_comment='The user id of the user associated with this virtual MFA device.')
    user_name = models.TextField(blank=True, null=True, db_comment='The friendly name of the user associated with this virtual MFA device.')
    user = models.JSONField(blank=True, null=True, db_comment='Details of the IAM user associated with this virtual MFA device.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags attached with the MFA device.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_iam_virtual_mfa_device'
        db_table_comment = 'AWS IAM Virtual MFA device'
# Unable to inspect table 'aws_identitystore_group'
# The error was: rpc error: code = Internal desc = aws: rpc error: code = Internal desc = 'List' call for table 'aws_identitystore_group' is missing 1 required qual: column:'identity_store_id' operator: =

# Unable to inspect table 'aws_identitystore_group_membership'
# The error was: rpc error: code = Internal desc = aws: rpc error: code = Internal desc = 'List' call for table 'aws_identitystore_group_membership' is missing 1 required qual: column:'identity_store_id' operator: =

# Unable to inspect table 'aws_identitystore_user'
# The error was: rpc error: code = Internal desc = aws: rpc error: code = Internal desc = 'List' call for table 'aws_identitystore_user' is missing 1 required qual: column:'identity_store_id' operator: =



class AwsInspector2Coverage(models.Model):
    source_account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    resource_id = models.TextField(blank=True, null=True, db_comment='The ID of the covered resource.')
    resource_type = models.TextField(blank=True, null=True, db_comment='The type of the covered resource.')
    scan_type = models.TextField(blank=True, null=True, db_comment='The Amazon Inspector scan type covering the resource.')
    ec2_ami_id = models.TextField(blank=True, null=True, db_comment='The ID of the Amazon Machine Image (AMI) used to launch the instance.')
    ecr_image_tag = models.TextField(blank=True, null=True, db_comment='Tags associated with the Amazon ECR image metadata.')
    ecr_repository_name = models.TextField(blank=True, null=True, db_comment='The name of the Amazon ECR repository.')
    ecr_repository_scan_frequency = models.TextField(blank=True, null=True, db_comment='The frequency of scans for an object that contains details about the repository an Amazon ECR image resides in.')
    lambda_function_name = models.TextField(blank=True, null=True, db_comment='The name of a function.')
    lambda_function_runtime = models.TextField(blank=True, null=True, db_comment="An AWS Lambda function's runtime.")
    scan_status_reason = models.TextField(blank=True, null=True, db_comment='The reason for the scan.')
    scan_status_code = models.TextField(blank=True, null=True, db_comment='The status code of the scan.')
    ec2_platform = models.JSONField(blank=True, null=True, db_comment='The platform of the instance.')
    ec2_instance_tags = models.JSONField(blank=True, null=True, db_comment='The tags attached to the instance.')
    ecr_image_tags = models.JSONField(blank=True, null=True, db_comment='Tags associated with the Amazon ECR image metadata.')
    lambda_function_tags = models.JSONField(blank=True, null=True, db_comment='The resource tags on an AWS Lambda function.')
    lambda_function_layers = models.JSONField(blank=True, null=True, db_comment='The layers for an AWS Lambda function. A Lambda function can have up to five layers.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_inspector2_coverage'
        db_table_comment = 'AWS Inspector2 Coverage'


class AwsInspector2CoverageStatistics(models.Model):
    total_counts = models.BigIntegerField(blank=True, null=True, db_comment='The total number for all groups')
    counts_by_group = models.JSONField(blank=True, null=True, db_comment='An array with the number for each group')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_inspector2_coverage_statistics'
        db_table_comment = 'AWS Inspector2 Coverage Statistics'


class AwsInspector2Finding(models.Model):
    finding_account_id = models.TextField(blank=True, null=True, db_comment='The Amazon Web Services account ID associated with the finding.')
    description = models.TextField(blank=True, null=True, db_comment='The description of the finding.')
    exploit_available = models.TextField(blank=True, null=True, db_comment='If a finding discovered in your environment has an exploit available. Valid values are: YES | NO.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Number (ARN) of the finding.')
    status = models.TextField(blank=True, null=True, db_comment='The status of the finding. Valid values are: ACTIVE | SUPPRESSED | CLOSED.')
    type = models.TextField(blank=True, null=True, db_comment='The type of the finding. Valid values are: NETWORK_REACHABILITY | PACKAGE_VULNERABILITY.')
    first_observed_at = models.DateTimeField(blank=True, null=True, db_comment='The date and time that the finding was first observed.')
    fix_available = models.TextField(blank=True, null=True, db_comment='Details on whether a fix is available through a version update. Valid values are: YES | NO | PARTIAL.')
    inspector_score = models.FloatField(blank=True, null=True, db_comment='The Amazon Inspector score given to the finding.')
    resource_id = models.TextField(blank=True, null=True, db_comment='The ID of the resource.')
    resource_type = models.TextField(blank=True, null=True, db_comment='The resource type supported by AWS.')
    component_type = models.TextField(blank=True, null=True, db_comment='The component type.')
    component_id = models.TextField(blank=True, null=True, db_comment='The component ID of the resource.')
    ec2_instance_image_id = models.TextField(blank=True, null=True, db_comment='The Amazon EC2 instance image ID.')
    ec2_instance_subnet_id = models.TextField(blank=True, null=True, db_comment='The Amazon EC2 instance subnet ID.')
    ec2_instance_vpc_id = models.TextField(blank=True, null=True, db_comment='The Amazon EC2 instance VPC ID.')
    ecr_image_architecture = models.TextField(blank=True, null=True, db_comment='The Amazon ECR image architecture.')
    ecr_image_hash = models.TextField(blank=True, null=True, db_comment='The Amazon ECR image hash.')
    ecr_image_pushed_at = models.DateTimeField(blank=True, null=True, db_comment='The Amazon ECR image push date and time.')
    ecr_image_registry = models.TextField(blank=True, null=True, db_comment='The Amazon ECR registry.')
    ecr_image_repository_name = models.TextField(blank=True, null=True, db_comment='The name of the Amazon ECR repository.')
    ecr_image_tags = models.TextField(blank=True, null=True, db_comment='The tags attached to the Amazon ECR container image.')
    lambda_function_execution_role_arn = models.TextField(blank=True, null=True, db_comment='The AWS Lambda function execution role ARN.')
    lambda_function_last_modified_at = models.DateTimeField(blank=True, null=True, db_comment='The AWS Lambda functions the date and time that a user last updated the configuration.')
    lambda_function_layers = models.TextField(blank=True, null=True, db_comment='The AWS Lambda function layer.')
    lambda_function_name = models.TextField(blank=True, null=True, db_comment='The AWS Lambda function name.')
    lambda_function_runtime = models.TextField(blank=True, null=True, db_comment='The AWS Lambda function runtime environment.')
    network_protocol = models.TextField(blank=True, null=True, db_comment='The ingress source addresse.')
    related_vulnerabilitie = models.TextField(blank=True, null=True, db_comment='The related vulnerabilitie.')
    last_observed_at = models.DateTimeField(blank=True, null=True, db_comment='The date and time that the finding was last observed.')
    remediation_recommendation_text = models.TextField(blank=True, null=True, db_comment='The recommended course of action to remediate the finding.')
    remediation_recommendation_url = models.TextField(blank=True, null=True, db_comment='The URL address to the CVE remediation recommendations.')
    severity = models.TextField(blank=True, null=True, db_comment='The severity of the finding. Valid values are: INFORMATIONAL | LOW | MEDIUM | HIGH | CRITICAL | UNTRIAGED.')
    updated_at = models.DateTimeField(blank=True, null=True, db_comment='The date and time the finding was last updated at.')
    source = models.TextField(blank=True, null=True, db_comment='The source of the vulnerability information.')
    source_url = models.TextField(blank=True, null=True, db_comment='A URL to the source of the vulnerability information.')
    vendor_created_at = models.DateTimeField(blank=True, null=True, db_comment='The date and time that this vulnerability was first added to the vendor’s database.')
    vendor_severity = models.TextField(blank=True, null=True, db_comment='The severity the vendor has given to this vulnerability type.')
    vendor_updated_at = models.DateTimeField(blank=True, null=True, db_comment='The date and time the vendor last updated this vulnerability in their database.')
    vulnerability_id = models.TextField(blank=True, null=True, db_comment='The ID given to this vulnerability.')
    exploitability_details = models.JSONField(blank=True, null=True, db_comment='The details of an exploit available for a finding discovered in your environment.')
    inspector_score_details = models.JSONField(blank=True, null=True, db_comment='An object that contains details of the Amazon Inspector score.')
    network_reachability_details = models.JSONField(blank=True, null=True, db_comment='An object that contains the details of a network reachability finding.')
    package_vulnerability_details = models.JSONField(blank=True, null=True, db_comment='An object that contains the details of a package vulnerability finding.')
    cvss = models.JSONField(blank=True, null=True, db_comment='An object that contains details about the CVSS score of a finding.')
    reference_urls = models.JSONField(blank=True, null=True, db_comment='One or more URLs that contain details about this vulnerability type.')
    related_vulnerabilities = models.JSONField(blank=True, null=True, db_comment='One or more vulnerabilities related to the one identified in this finding.')
    vulnerable_package = models.JSONField(blank=True, null=True, db_comment='The package impacted by this vulnerability.')
    vulnerable_packages = models.JSONField(blank=True, null=True, db_comment='The packages impacted by this vulnerability.')
    resources = models.JSONField(blank=True, null=True, db_comment='Contains information on the resources involved in a finding.')
    resource_tags = models.JSONField(blank=True, null=True, db_comment='Details on the resource tags used to filter findings.')
    title = models.TextField(blank=True, null=True, db_comment='The title of the finding.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_inspector2_finding'
        db_table_comment = 'AWS Inspector2 Finding'


class AwsInspector2Member(models.Model):
    member_account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    delegated_admin_account_id = models.TextField(blank=True, null=True, db_comment='The Amazon Web Services account ID of the Amazon Inspector delegated administrator for this member account.')
    only_associated = models.TextField(blank=True, null=True, db_comment='Specifies whether to list only currently associated members if True or to list all members within the organization if False.')
    relationship_status = models.TextField(blank=True, null=True, db_comment='The status of the member account. Valid values are: CREATED | INVITED | DISABLED | ENABLED | REMOVED | RESIGNED | DELETED | EMAIL_VERIFICATION_IN_PROGRESS | EMAIL_VERIFICATION_FAILED | REGION_DISABLED | ACCOUNT_SUSPENDED | CANNOT_CREATE_DETECTOR_IN_ORG_MASTER.')
    updated_at = models.DateTimeField(blank=True, null=True, db_comment='A timestamp showing when the status of this member was last updated.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_inspector2_member'
        db_table_comment = 'AWS Inspector2 Member'


class AwsInspectorAssessmentRun(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The auto-generated name for the assessment run.')
    arn = models.TextField(blank=True, null=True, db_comment='The ARN of the assessment run.')
    assessment_template_arn = models.TextField(blank=True, null=True, db_comment='The ARN of the assessment template that is associated with the assessment run.')
    state = models.TextField(blank=True, null=True, db_comment='The state of the assessment run.')
    completed_at = models.DateTimeField(blank=True, null=True, db_comment='The assessment run completion time that corresponds to the rules packages evaluation completion time or failure.')
    created_at = models.DateTimeField(blank=True, null=True, db_comment='The time when StartAssessmentRun was called.')
    data_collected = models.BooleanField(blank=True, null=True, db_comment='Boolean value (true or false) that specifies whether the process of collecting data from the agents is completed.')
    duration_in_seconds = models.BigIntegerField(blank=True, null=True, db_comment='The duration of the assessment run.')
    started_at = models.DateTimeField(blank=True, null=True, db_comment='The time when StartAssessmentRun was called.')
    state_changed_at = models.DateTimeField(blank=True, null=True, db_comment="The last time when the assessment run's state changed.")
    finding_counts = models.JSONField(blank=True, null=True, db_comment='Provides a total count of generated findings per severity.')
    notifications = models.JSONField(blank=True, null=True, db_comment='A list of notifications for the event subscriptions.')
    rules_package_arns = models.JSONField(blank=True, null=True, db_comment='The rules packages selected for the assessment run.')
    state_changes = models.JSONField(blank=True, null=True, db_comment='A list of the assessment run state changes.')
    user_attributes_for_findings = models.JSONField(blank=True, null=True, db_comment='The user-defined attributes that are assigned to every generated finding.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_inspector_assessment_run'
        db_table_comment = 'AWS Inspector Assessment Run'


class AwsInspectorAssessmentTarget(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the Amazon Inspector assessment target.')
    arn = models.TextField(blank=True, null=True, db_comment='The ARN that specifies the Amazon Inspector assessment target.')
    resource_group_arn = models.TextField(blank=True, null=True, db_comment='The ARN that specifies the resource group that is associated with the assessment target.')
    created_at = models.DateTimeField(blank=True, null=True, db_comment='The time at which the assessment target is created.')
    updated_at = models.DateTimeField(blank=True, null=True, db_comment='The time at which UpdateAssessmentTarget is called.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_inspector_assessment_target'
        db_table_comment = 'AWS Inspector Assessment Target'


class AwsInspectorAssessmentTemplate(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the assessment template.')
    arn = models.TextField(blank=True, null=True, db_comment='The ARN of the assessment template.')
    assessment_run_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of existing assessment runs associated with this assessment template.')
    assessment_target_arn = models.TextField(blank=True, null=True, db_comment='The ARN of the assessment target that corresponds to this assessment template.')
    created_at = models.DateTimeField(blank=True, null=True, db_comment='The time at which the assessment template is created.')
    duration_in_seconds = models.BigIntegerField(blank=True, null=True, db_comment='The duration in seconds specified for this assessment template.')
    last_assessment_run_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the most recent assessment run associated with this assessment template.')
    rules_package_arns = models.JSONField(blank=True, null=True, db_comment='The rules packages that are specified for this assessment template.')
    user_attributes_for_findings = models.JSONField(blank=True, null=True, db_comment='The user-defined attributes that are assigned to every generated finding from the assessment run that uses this assessment template.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags associated with the Assessment Template.')
    event_subscriptions = models.JSONField(blank=True, null=True, db_comment='A list of event subscriptions associated with the Assessment Template.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_inspector_assessment_template'
        db_table_comment = 'AWS Inspector Assessment Template'


class AwsInspectorExclusion(models.Model):
    arn = models.TextField(blank=True, null=True, db_comment='The ARN that specifies the exclusion.')
    assessment_run_arn = models.TextField(blank=True, null=True, db_comment='The ARN that specifies the assessment run, the exclusion belongs to.')
    attributes = models.JSONField(blank=True, null=True, db_comment='The system-defined attributes for the exclusion.')
    description = models.TextField(blank=True, null=True, db_comment='The description of the exclusion.')
    recommendation = models.TextField(blank=True, null=True, db_comment='The recommendation for the exclusion.')
    scopes = models.JSONField(blank=True, null=True, db_comment='The AWS resources for which the exclusion pertains.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_inspector_exclusion'
        db_table_comment = 'AWS Inspector Exclusion'


class AwsInspectorFinding(models.Model):
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The ID of the finding.')
    arn = models.TextField(blank=True, null=True, db_comment='The ARN that specifies the finding.')
    agent_id = models.TextField(blank=True, null=True, db_comment='The ID of the agent that is installed on the EC2 instance where the finding is generated.')
    asset_type = models.TextField(blank=True, null=True, db_comment='The type of the host from which the finding is generated.')
    auto_scaling_group = models.TextField(blank=True, null=True, db_comment='The Auto Scaling group of the EC2 instance where the finding is generated.')
    confidence = models.BigIntegerField(blank=True, null=True, db_comment='This data element is currently not used.')
    created_at = models.DateTimeField(blank=True, null=True, db_comment='The time when the finding was generated.')
    updated_at = models.DateTimeField(blank=True, null=True, db_comment='The time when AddAttributesToFindings is called.')
    description = models.TextField(blank=True, null=True, db_comment='The description of the finding.')
    indicator_of_compromise = models.BooleanField(blank=True, null=True, db_comment='This data element is currently not used.')
    numeric_severity = models.FloatField(blank=True, null=True, db_comment='The numeric value of the finding severity.')
    recommendation = models.TextField(blank=True, null=True, db_comment='The recommendation for the finding.')
    schema_version = models.BigIntegerField(blank=True, null=True, db_comment='The schema version of this data type.')
    service = models.TextField(blank=True, null=True, db_comment="The data element is set to 'Inspector'.")
    severity = models.TextField(blank=True, null=True, db_comment='The finding severity. Values can be set to High, Medium, Low, and Informational.')
    asset_attributes = models.JSONField(blank=True, null=True, db_comment='A collection of attributes of the host from which the finding is generated.')
    attributes = models.JSONField(blank=True, null=True, db_comment='The system-defined attributes for the finding.')
    failed_items = models.JSONField(blank=True, null=True, db_comment='Attributes details that cannot be described. An error code is provided for each failed item.')
    service_attributes = models.JSONField(blank=True, null=True, db_comment='This data type is used in the Finding data type.')
    user_attributes = models.JSONField(blank=True, null=True, db_comment='The user-defined attributes that are assigned to the finding.')
    title = models.TextField(blank=True, null=True, db_comment='The name of the finding.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_inspector_finding'
        db_table_comment = 'AWS Inspector Finding'


class AwsIotFleetMetric(models.Model):
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the fleet metric to describe.')
    arn = models.TextField(blank=True, null=True, db_comment='The ARN of the fleet metric to describe.')
    index_name = models.TextField(blank=True, null=True, db_comment='The name of the index to search.')
    description = models.TextField(blank=True, null=True, db_comment='The fleet metric description.')
    creation_date = models.DateTimeField(blank=True, null=True, db_comment='The date when the fleet metric is created.')
    last_modified_date = models.DateTimeField(blank=True, null=True, db_comment='The date when the fleet metric is last modified.')
    aggregation_field = models.TextField(blank=True, null=True, db_comment='The field to aggregate.')
    aggregation_type_name = models.TextField(blank=True, null=True, db_comment='The name of the aggregation type.')
    period = models.BigIntegerField(blank=True, null=True, db_comment='The time in seconds between fleet metric emissions. Range [60(1 min), 86400(1 day)] and must be multiple of 60.')
    query_string = models.TextField(blank=True, null=True, db_comment='The search query string.')
    query_version = models.TextField(blank=True, null=True, db_comment='The search query version.')
    unit = models.TextField(blank=True, null=True, db_comment='Used to support unit transformation such as milliseconds to seconds. The unit must be supported by CW metric (https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_MetricDatum.html)')
    version = models.BigIntegerField(blank=True, null=True, db_comment='The version of the fleet metric.')
    aggregation_type_values = models.JSONField(blank=True, null=True, db_comment='A list of the values of aggregation types.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags currently associated with the thing type.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_iot_fleet_metric'
        db_table_comment = 'AWS IoT Fleet Metric'


class AwsIotThing(models.Model):
    thing_name = models.TextField(blank=True, null=True, db_comment='The name of the thing.')
    thing_id = models.TextField(blank=True, null=True, db_comment='The ID of the thing to describe.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the thing.')
    thing_type_name = models.TextField(blank=True, null=True, db_comment='The name of the thing type, if the thing has been associated with a type.')
    attribute_name = models.TextField(blank=True, null=True, db_comment='The attribute name of the thing.')
    attribute_value = models.TextField(blank=True, null=True, db_comment='The attribute value for the attribute name of the thing.')
    billing_group_name = models.TextField(blank=True, null=True, db_comment='The name of the billing group the thing belongs to.')
    default_client_id = models.TextField(blank=True, null=True, db_comment='The default MQTT client ID. For a typical device, the thing name is also used as the default MQTT client ID.')
    version = models.BigIntegerField(blank=True, null=True, db_comment='The version of the thing record in the registry.')
    attributes = models.JSONField(blank=True, null=True, db_comment='A list of thing attributes which are name-value pairs.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_iot_thing'
        db_table_comment = 'AWS IoT Thing'


class AwsIotThingGroup(models.Model):
    group_name = models.TextField(blank=True, null=True, db_comment='The group name.')
    thing_group_id = models.TextField(blank=True, null=True, db_comment='The thing group ID.')
    thing_group_description = models.TextField(blank=True, null=True, db_comment='The thing group description.')
    creation_date = models.DateTimeField(blank=True, null=True, db_comment='The UNIX timestamp of when the thing group was created.')
    parent_group_name = models.TextField(blank=True, null=True, db_comment='The parent thing group name.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the thing group.')
    status = models.TextField(blank=True, null=True, db_comment='The dynamic thing group status.')
    index_name = models.TextField(blank=True, null=True, db_comment='The dynamic thing group index name.')
    query_string = models.TextField(blank=True, null=True, db_comment='The dynamic thing group search query string.')
    query_version = models.TextField(blank=True, null=True, db_comment='The dynamic thing group query version.')
    version = models.BigIntegerField(blank=True, null=True, db_comment='The version of the thing group.')
    attribute_payload = models.JSONField(blank=True, null=True, db_comment='The thing group attributes in JSON format.')
    root_to_parent_thing_groups = models.JSONField(blank=True, null=True, db_comment='The root parent thing group.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags currently associated with the thing group.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_iot_thing_group'
        db_table_comment = 'AWS IoT Thing Group'


class AwsIotThingType(models.Model):
    thing_type_name = models.TextField(blank=True, null=True, db_comment='The name of the thing type.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the thing type.')
    thing_type_id = models.TextField(blank=True, null=True, db_comment='The thing type ID.')
    thing_type_description = models.TextField(blank=True, null=True, db_comment='The description of the thing type.')
    creation_date = models.DateTimeField(blank=True, null=True, db_comment='The UNIX timestamp of when the thing type was created.')
    deprecated = models.BooleanField(blank=True, null=True, db_comment='Whether the thing type is deprecated. If true, no new things could be associated with this type.')
    deprecation_date = models.DateTimeField(blank=True, null=True, db_comment='The date and time when the thing type was deprecated.')
    searchable_attributes = models.JSONField(blank=True, null=True, db_comment='A list of searchable thing attribute names.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags currently associated with the thing type.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_iot_thing_type'
        db_table_comment = 'AWS IoT Thing Type'


class AwsKinesisConsumer(models.Model):
    consumer_name = models.TextField(blank=True, null=True, db_comment='The name of the consumer.')
    consumer_arn = models.TextField(blank=True, null=True, db_comment='An ARN generated by Kinesis Data Streams when consumer is registered.')
    stream_arn = models.TextField(blank=True, null=True, db_comment='The ARN of the stream with which you registered the consumer.')
    consumer_status = models.TextField(blank=True, null=True, db_comment='The current status of consumer.')
    consumer_creation_timestamp = models.DateTimeField(blank=True, null=True, db_comment='Timestamp when consumer was created.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_kinesis_consumer'
        db_table_comment = 'AWS Kinesis Consumer'


class AwsKinesisFirehoseDeliveryStream(models.Model):
    delivery_stream_name = models.TextField(blank=True, null=True, db_comment='The name of the delivery stream.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the delivery stream.')
    delivery_stream_status = models.TextField(blank=True, null=True, db_comment='The server-side encryption type used on the stream.')
    delivery_stream_type = models.TextField(blank=True, null=True, db_comment='The delivery stream type.')
    version_id = models.TextField(blank=True, null=True, db_comment='The version id of the stream. Each time the destination is updated for a delivery stream, the version ID is changed, and the current version ID is required when updating the destination')
    create_timestamp = models.DateTimeField(blank=True, null=True, db_comment='The date and time that the delivery stream was created.')
    has_more_destinations = models.BooleanField(blank=True, null=True, db_comment='Indicates whether there are more destinations available to list.')
    last_update_timestamp = models.DateTimeField(blank=True, null=True, db_comment='The date and time that the delivery stream was last updated.')
    delivery_stream_encryption_configuration = models.JSONField(blank=True, null=True, db_comment='Indicates the server-side encryption (SSE) status for the delivery stream.')
    destinations = models.JSONField(blank=True, null=True, db_comment='The destinations for the stream.')
    failure_description = models.JSONField(blank=True, null=True, db_comment='Provides details in case one of the following operations fails due to an error related to KMS: CreateDeliveryStream, DeleteDeliveryStream, StartDeliveryStreamEncryption,StopDeliveryStreamEncryption.')
    source = models.JSONField(blank=True, null=True, db_comment='If the DeliveryStreamType parameter is KinesisStreamAsSource, a SourceDescription object describing the source Kinesis data stream.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags associated with the delivery stream.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_kinesis_firehose_delivery_stream'
        db_table_comment = 'AWS Kinesis Firehose Delivery Stream'


class AwsKinesisStream(models.Model):
    stream_name = models.TextField(blank=True, null=True, db_comment='The name of the stream being described.')
    stream_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the stream being described.')
    stream_status = models.TextField(blank=True, null=True, db_comment='The current status of the stream being described.')
    stream_creation_timestamp = models.DateTimeField(blank=True, null=True, db_comment='The approximate time that the stream was created.')
    encryption_type = models.TextField(blank=True, null=True, db_comment='The server-side encryption type used on the stream.')
    key_id = models.TextField(blank=True, null=True, db_comment='The GUID for the customer-managed AWS KMS key to use for encryption.')
    retention_period_hours = models.BigIntegerField(blank=True, null=True, db_comment='The current retention period, in hours.')
    consumer_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of enhanced fan-out consumers registered with the stream.')
    open_shard_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of open shards in the stream.')
    has_more_shards = models.BooleanField(blank=True, null=True, db_comment='If set to true, more shards in the stream are available to describe.')
    shards = models.JSONField(blank=True, null=True, db_comment='The shards that comprise the stream.')
    enhanced_monitoring = models.JSONField(blank=True, null=True, db_comment='Represents the current enhanced monitoring settings of the stream.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags associated with the stream.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_kinesis_stream'
        db_table_comment = 'AWS Kinesis Stream'


class AwsKinesisVideoStream(models.Model):
    stream_name = models.TextField(blank=True, null=True, db_comment='The name of the stream.')
    stream_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the stream.')
    status = models.TextField(blank=True, null=True, db_comment='The status of the stream.')
    version = models.TextField(blank=True, null=True, db_comment='The version of the stream.')
    kms_key_id = models.TextField(blank=True, null=True, db_comment='The ID of the AWS Key Management Service (AWS KMS) key that Kinesis Video Streams uses to encrypt data on the stream.')
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='A time stamp that indicates when the stream was created.')
    data_retention_in_hours = models.BigIntegerField(blank=True, null=True, db_comment='How long the stream retains data, in hours.')
    device_name = models.TextField(blank=True, null=True, db_comment='The name of the device that is associated with the stream.')
    media_type = models.TextField(blank=True, null=True, db_comment='The MediaType of the stream.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_kinesis_video_stream'
        db_table_comment = 'AWS Kinesis Video Stream'


class AwsKinesisanalyticsv2Application(models.Model):
    application_name = models.TextField(blank=True, null=True, db_comment='The name of the application.')
    application_version_id = models.BigIntegerField(blank=True, null=True, db_comment='Provides the current application version.')
    application_arn = models.TextField(blank=True, null=True, db_comment='The ARN of the application.')
    application_status = models.TextField(blank=True, null=True, db_comment='The status of the application.')
    create_timestamp = models.DateTimeField(blank=True, null=True, db_comment='The current timestamp when the application was created.')
    application_description = models.TextField(blank=True, null=True, db_comment='The description of the application.')
    last_update_timestamp = models.DateTimeField(blank=True, null=True, db_comment='The current timestamp when the application was last updated.')
    runtime_environment = models.TextField(blank=True, null=True, db_comment='The runtime environment for the application.')
    service_execution_role = models.TextField(blank=True, null=True, db_comment='Specifies the IAM role that the application uses to access external resources.')
    application_configuration_description = models.JSONField(blank=True, null=True, db_comment="Provides details about the application's Java, SQL, or Scala code and starting parameters.")
    cloud_watch_logging_option_descriptions = models.JSONField(blank=True, null=True, db_comment='Describes the application Amazon CloudWatch logging options.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='The key-value tags assigned to the application.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_kinesisanalyticsv2_application'
        db_table_comment = 'AWS Kinesis Analytics V2 Application'


class AwsKmsAlias(models.Model):
    alias_name = models.TextField(blank=True, null=True, db_comment='String that contains the alias. This value begins with alias/.')
    arn = models.TextField(blank=True, null=True, db_comment='String that contains the key ARN.')
    target_key_id = models.TextField(blank=True, null=True, db_comment='String that contains the key identifier of the KMS key associated with the alias.')
    creation_date = models.DateTimeField(blank=True, null=True, db_comment='Date and time that the alias was most recently created in the account and Region.')
    last_updated_date = models.DateTimeField(blank=True, null=True, db_comment='Date and time that the alias was most recently associated with a KMS key in the account and Region.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_kms_alias'
        db_table_comment = 'AWS KMS Alias'
# Unable to inspect table 'aws_kms_key'
# The error was: rpc error: code = Unknown desc = aws: operation error KMS: ListResourceTags, https response error StatusCode: 400, RequestID: af44cfdb-3f0c-4cef-bba7-c6c3585ed1ec, api error AccessDeniedException: User: arn:aws:sts::730335309881:assumed-role/AWSReservedSSO_AdministratorAccess_e90e8afaad518434/cccmigor is not authorized to perform: kms:ListResourceTags on resource: arn:aws:kms:us-east-2:730335309881:key/73a68245-bc35-40ac-91f9-5da6c2e39c71 because no resource-based policy allows the kms:ListResourceTags action
# Unable to inspect table 'aws_kms_key_rotation'
# The error was: rpc error: code = Unknown desc = aws: operation error KMS: ListKeyRotations, https response error StatusCode: 400, RequestID: 78cc369c-ba3c-4bae-9e92-5729935138a3, api error AccessDeniedException: User: arn:aws:sts::730335309881:assumed-role/AWSReservedSSO_AdministratorAccess_e90e8afaad518434/cccmigor is not authorized to perform: kms:ListKeyRotations on resource: arn:aws:kms:us-east-2:730335309881:key/73a68245-bc35-40ac-91f9-5da6c2e39c71 because no resource-based policy allows the kms:ListKeyRotations action


class AwsLambdaAlias(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the alias.')
    function_name = models.TextField(blank=True, null=True, db_comment='The name of the function.')
    alias_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the alias.')
    function_version = models.TextField(blank=True, null=True, db_comment='The function version that the alias invokes.')
    revision_id = models.TextField(blank=True, null=True, db_comment='A unique identifier that changes when you update the alias.')
    description = models.TextField(blank=True, null=True, db_comment='A description of the alias.')
    policy = models.JSONField(blank=True, null=True, db_comment='Contains the resource-based policy.')
    policy_std = models.JSONField(blank=True, null=True, db_comment='Contains the contents of the resource-based policy in a canonical form for easier searching.')
    url_config = models.JSONField(blank=True, null=True, db_comment='The function URL configuration details of the alias.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_lambda_alias'
        db_table_comment = 'AWS Lambda Alias'


class AwsLambdaEventSourceMapping(models.Model):
    uuid = models.TextField(blank=True, null=True, db_comment='The identifier of the event source mapping.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the event source.')
    function_arn = models.TextField(blank=True, null=True, db_comment='The ARN of the Lambda function.')
    function_name = models.TextField(blank=True, null=True, db_comment='The name of the Lambda function.')
    batch_size = models.BigIntegerField(blank=True, null=True, db_comment='The maximum number of records in each batch that Lambda pulls from your stream or queue and sends to your function.')
    bisect_batch_on_function_error = models.BooleanField(blank=True, null=True, db_comment='If the function returns an error, split the batch in two and retry.')
    last_modified = models.DateTimeField(blank=True, null=True, db_comment='The date that the event source mapping was last updated or that its state changed.')
    last_processing_result = models.TextField(blank=True, null=True, db_comment='The result of the last Lambda invocation of your function.')
    maximum_batching_window_in_seconds = models.BigIntegerField(blank=True, null=True, db_comment='The maximum amount of time, in seconds, that Lambda spends gathering records before invoking the function.')
    maximum_record_age_in_seconds = models.BigIntegerField(blank=True, null=True, db_comment='Discard records older than the specified age.')
    maximum_retry_attempts = models.BigIntegerField(blank=True, null=True, db_comment='Discard records after the specified number of retries.')
    parallelization_factor = models.BigIntegerField(blank=True, null=True, db_comment='The number of batches to process concurrently from each shard.')
    state = models.TextField(blank=True, null=True, db_comment='The state of the event source mapping.')
    state_transition_reason = models.TextField(blank=True, null=True, db_comment='Indicates whether a user or Lambda made the last change to the event source mapping.')
    starting_position = models.TextField(blank=True, null=True, db_comment='The position in a stream from which to start reading. Required for Amazon Kinesis and Amazon DynamoDB Stream event sources. AT_TIMESTAMP is supported only for Amazon Kinesis streams, Amazon DocumentDB, Amazon MSK, and self-managed Apache Kafka.')
    starting_position_timestamp = models.DateTimeField(blank=True, null=True, db_comment='The position in a stream from which to start reading. With StartingPosition set to AT_TIMESTAMP, the time from which to start reading, in Unix time seconds. StartingPositionTimestamp cannot be in the future.')
    tumbling_window_in_seconds = models.BigIntegerField(blank=True, null=True, db_comment='The duration in seconds of a processing window for DynamoDB and Kinesis Streams event sources. A value of 0 seconds indicates no tumbling window.')
    function_response_types = models.JSONField(blank=True, null=True, db_comment='A list of current response type enums applied to the event source mapping.')
    source_access_configurations = models.JSONField(blank=True, null=True, db_comment='An array of the authentication protocol, VPC components, or virtual host to secure and define your event source.')
    destination_config = models.JSONField(blank=True, null=True, db_comment='An Amazon SQS queue or Amazon SNS topic destination for discarded records.')
    filter_criteria = models.JSONField(blank=True, null=True, db_comment='An object that defines the filter criteria that determine whether Lambda should process an event.')
    amazon_managed_kafka_event_source_config = models.JSONField(blank=True, null=True, db_comment='Specific configuration settings for an Amazon Managed Streaming for Apache Kafka.')
    queues = models.JSONField(blank=True, null=True, db_comment='The name of the Amazon MQ broker destination queue to consume.')
    scaling_config = models.JSONField(blank=True, null=True, db_comment='The scaling configuration for the event source.')
    self_managed_event_source = models.JSONField(blank=True, null=True, db_comment='The self-managed Apache Kafka cluster for your event source.')
    self_managed_kafka_event_source_config = models.JSONField(blank=True, null=True, db_comment='Specific configuration settings for a self-managed Apache Kafka event source.')
    topics = models.JSONField(blank=True, null=True, db_comment='The name of the Kafka topic.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_lambda_event_source_mapping'
        db_table_comment = 'AWS Lambda Event Source Mapping'


class AwsLambdaFunction(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the function.')
    arn = models.TextField(blank=True, null=True, db_comment="The function's Amazon Resource Name (ARN).")
    code_sha_256 = models.TextField(blank=True, null=True, db_comment="The SHA256 hash of the function's deployment package.")
    code_size = models.BigIntegerField(blank=True, null=True, db_comment="The size of the function's deployment package, in bytes.")
    dead_letter_config_target_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of an Amazon SQS queue or Amazon SNS topic.')
    description = models.TextField(blank=True, null=True, db_comment="The function's description.")
    handler = models.TextField(blank=True, null=True, db_comment='The function that Lambda calls to begin executing your function.')
    kms_key_arn = models.TextField(blank=True, null=True, db_comment="The KMS key that's used to encrypt the function's environment variables. This key is only returned if you've configured a customer managed CMK.")
    last_modified = models.DateTimeField(blank=True, null=True, db_comment='The date and time that the function was last updated.')
    timeout = models.TextField(blank=True, null=True, db_comment='The amount of time in seconds that Lambda allows a function to run before stopping it.')
    version = models.TextField(blank=True, null=True, db_comment='The version of the Lambda function.')
    package_type = models.TextField(blank=True, null=True, db_comment='The type of deployment package.')
    master_arn = models.TextField(blank=True, null=True, db_comment='For Lambda@Edge functions, the ARN of the master function.')
    memory_size = models.BigIntegerField(blank=True, null=True, db_comment="The memory that's allocated to the function.")
    revision_id = models.TextField(blank=True, null=True, db_comment='The latest updated revision of the function or alias.')
    role = models.TextField(blank=True, null=True, db_comment="The function's execution role.")
    runtime = models.TextField(blank=True, null=True, db_comment='The runtime environment for the Lambda function.')
    state = models.TextField(blank=True, null=True, db_comment='The current state of the function.')
    state_reason = models.TextField(blank=True, null=True, db_comment="The reason for the function's current state.")
    state_reason_code = models.TextField(blank=True, null=True, db_comment="The reason code for the function's current state.")
    last_update_status = models.TextField(blank=True, null=True, db_comment='The status of the last update that was performed on the function.')
    last_update_status_reason = models.TextField(blank=True, null=True, db_comment='The reason for the last update that was performed on the function.')
    last_update_status_reason_code = models.TextField(blank=True, null=True, db_comment='The reason code for the last update that was performed on the function.')
    reserved_concurrent_executions = models.BigIntegerField(blank=True, null=True, db_comment='The number of concurrent executions that are reserved for this function.')
    vpc_id = models.TextField(blank=True, null=True, db_comment='The VPC ID that is attached to Lambda function.')
    architectures = models.JSONField(blank=True, null=True, db_comment='The instruction set architecture that the function supports. Architecture is a string array with one of the valid values.')
    code = models.JSONField(blank=True, null=True, db_comment='The deployment package of the function or version.')
    environment_variables = models.JSONField(blank=True, null=True, db_comment='The environment variables that are accessible from function code during execution.')
    file_system_configs = models.JSONField(blank=True, null=True, db_comment='Connection settings for an Amazon EFS file system.')
    policy = models.JSONField(blank=True, null=True, db_comment='The resource-based iam policy of Lambda function.')
    policy_std = models.JSONField(blank=True, null=True, db_comment='Contains the policy in a canonical form for easier searching.')
    tracing_config = models.JSONField(blank=True, null=True, db_comment="The function's X-Ray tracing configuration.")
    snap_start = models.JSONField(blank=True, null=True, db_comment='Set ApplyOn to PublishedVersions to create a snapshot of the initialized execution environment when you publish a function version.')
    url_config = models.JSONField(blank=True, null=True, db_comment='The function URL configuration details of the function.')
    vpc_security_group_ids = models.JSONField(blank=True, null=True, db_comment='A list of VPC security groups IDs attached to Lambda function.')
    vpc_subnet_ids = models.JSONField(blank=True, null=True, db_comment='A list of VPC subnet IDs attached to Lambda function.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    layers = models.JSONField(blank=True, null=True)
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_lambda_function'
        db_table_comment = 'AWS Lambda Function'


class AwsLambdaFunctionMetricDurationDaily(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the function.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_lambda_function_metric_duration_daily'
        db_table_comment = 'AWS Lambda Function Cloudwatch Metrics - Duration (Daily)'


class AwsLambdaFunctionMetricErrorsDaily(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the function.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_lambda_function_metric_errors_daily'
        db_table_comment = 'AWS Lambda Function Cloudwatch Metrics - Errors (Daily)'


class AwsLambdaFunctionMetricInvocationsDaily(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the function.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_lambda_function_metric_invocations_daily'
        db_table_comment = 'AWS Lambda Function Cloudwatch Metrics - Invocations (Daily)'


class AwsLambdaLayer(models.Model):
    layer_name = models.TextField(blank=True, null=True, db_comment='The name of the layer.')
    layer_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the function layer.')
    created_date = models.DateTimeField(blank=True, null=True, db_comment='The date that the version was created, in ISO 8601 format.')
    description = models.TextField(blank=True, null=True, db_comment='The description of the version.')
    layer_version_arn = models.TextField(blank=True, null=True, db_comment='The ARN of the layer version.')
    license_info = models.TextField(blank=True, null=True, db_comment="The layer's open-source license.")
    version = models.BigIntegerField(blank=True, null=True, db_comment='The version number.')
    compatible_architectures = models.JSONField(blank=True, null=True, db_comment='A list of compatible instruction set architectures.')
    compatible_runtimes = models.JSONField(blank=True, null=True, db_comment="The layer's compatible runtimes.")
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_lambda_layer'
        db_table_comment = 'AWS Lambda Layer'


class AwsLambdaLayerVersion(models.Model):
    layer_name = models.TextField(blank=True, null=True, db_comment='The name of the layer.')
    layer_arn = models.TextField(blank=True, null=True, db_comment='The ARN of the layer.')
    layer_version_arn = models.TextField(blank=True, null=True, db_comment='The ARN of the layer version.')
    created_date = models.DateTimeField(blank=True, null=True, db_comment='The date that the version was created, in ISO 8601 format.')
    description = models.TextField(blank=True, null=True, db_comment='The description of the version.')
    license_info = models.TextField(blank=True, null=True, db_comment="The layer's open-source license.")
    revision_id = models.TextField(blank=True, null=True, db_comment='A unique identifier for the current revision of the policy.')
    version = models.BigIntegerField(blank=True, null=True, db_comment='The version number.')
    compatible_architectures = models.JSONField(blank=True, null=True, db_comment='A list of compatible instruction set architectures.')
    compatible_runtimes = models.JSONField(blank=True, null=True, db_comment="The layer's compatible runtimes.")
    content = models.JSONField(blank=True, null=True, db_comment='Details about the layer version.')
    policy = models.JSONField(blank=True, null=True, db_comment='The policy document.')
    policy_std = models.JSONField(blank=True, null=True, db_comment='Contains the policy document in a canonical form for easier searching.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_lambda_layer_version'
        db_table_comment = 'AWS Lambda Layer Version'


class AwsLambdaVersion(models.Model):
    version = models.TextField(blank=True, null=True, db_comment='The version of the Lambda function.')
    function_name = models.TextField(blank=True, null=True, db_comment='The name of the function.')
    arn = models.TextField(blank=True, null=True, db_comment="The function's Amazon Resource Name (ARN).")
    master_arn = models.TextField(blank=True, null=True, db_comment='For Lambda@Edge functions, the ARN of the master function.')
    state = models.TextField(blank=True, null=True, db_comment='The current state of the function.')
    code_sha_256 = models.TextField(blank=True, null=True, db_comment="The SHA256 hash of the function's deployment package.")
    code_size = models.BigIntegerField(blank=True, null=True, db_comment="The size of the function's deployment package, in bytes.")
    description = models.TextField(blank=True, null=True, db_comment="The function's description.")
    handler = models.TextField(blank=True, null=True, db_comment='The function that Lambda calls to begin executing your function.')
    last_modified = models.DateTimeField(blank=True, null=True, db_comment='The date and time that the function was last updated, in ISO-8601 format.')
    last_update_status = models.TextField(blank=True, null=True, db_comment='The status of the last update that was performed on the function.')
    last_update_status_reason = models.TextField(blank=True, null=True, db_comment='The reason for the last update that was performed on the function.')
    last_update_status_reason_code = models.TextField(blank=True, null=True, db_comment='The reason code for the last update that was performed on the function.')
    memory_size = models.BigIntegerField(blank=True, null=True, db_comment="The memory that's allocated to the function.")
    revision_id = models.TextField(blank=True, null=True, db_comment='The latest updated revision of the function or alias.')
    runtime = models.TextField(blank=True, null=True, db_comment='The runtime environment for the Lambda function.')
    timeout = models.BigIntegerField(blank=True, null=True, db_comment='The amount of time in seconds that Lambda allows a function to run before stopping it.')
    vpc_id = models.TextField(blank=True, null=True, db_comment='The ID of the VPC.')
    kms_key_arn = models.TextField(blank=True, null=True, db_comment="The KMS key that's used to encrypt the function's environment variables.")
    role = models.TextField(blank=True, null=True, db_comment="The function's execution role.")
    signing_job_arn = models.TextField(blank=True, null=True, db_comment='The ARN of the signing job.')
    signing_profile_version_arn = models.TextField(blank=True, null=True, db_comment='The ARN of the signing profile version.')
    state_reason = models.TextField(blank=True, null=True, db_comment="The reason for the function's current state.")
    state_reason_code = models.TextField(blank=True, null=True, db_comment="The reason code for the function's current state.")
    ephemeral_storage_size = models.BigIntegerField(blank=True, null=True, db_comment="The size of the function's /tmp directory in MB.")
    environment_variables = models.JSONField(blank=True, null=True, db_comment='The environment variables that are accessible from function code during execution.')
    policy = models.JSONField(blank=True, null=True, db_comment='Contains the resource-based policy.')
    policy_std = models.JSONField(blank=True, null=True, db_comment='Contains the contents of the resource-based policy in a canonical form for easier searching.')
    vpc_security_group_ids = models.JSONField(blank=True, null=True, db_comment='A list of VPC security groups IDs attached to Lambda function.')
    vpc_subnet_ids = models.JSONField(blank=True, null=True, db_comment='A list of VPC subnet IDs attached to Lambda function.')
    architectures = models.JSONField(blank=True, null=True, db_comment='The instruction set architecture that the function supports.')
    dead_letter_config = models.JSONField(blank=True, null=True, db_comment="The function's dead letter queue configuration.")
    file_system_configs = models.JSONField(blank=True, null=True, db_comment='Connection settings for an Amazon EFS file system.')
    image_config_response = models.JSONField(blank=True, null=True, db_comment="The function's image configuration values.")
    layers = models.JSONField(blank=True, null=True, db_comment="The function's layers.")
    logging_config = models.JSONField(blank=True, null=True, db_comment="The function's Amazon CloudWatch Logs configuration settings.")
    runtime_version_config = models.JSONField(blank=True, null=True, db_comment='The ARN of the runtime and any errors that occurred.')
    snap_start = models.JSONField(blank=True, null=True, db_comment='Configuration for creating a snapshot of the initialized execution environment.')
    tracing_config = models.JSONField(blank=True, null=True, db_comment="The function's X-Ray tracing configuration.")
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_lambda_version'
        db_table_comment = 'AWS Lambda Version'


class AwsLightsailInstance(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the instance.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the instance.')
    blueprint_id = models.TextField(blank=True, null=True, db_comment='The blueprint ID (e.g., os_amlinux_2016_03).')
    blueprint_name = models.TextField(blank=True, null=True, db_comment='The friendly name of the blueprint (e.g., Amazon Linux).')
    bundle_id = models.TextField(blank=True, null=True, db_comment='The bundle for the instance (e.g., micro_1_0).')
    created_at = models.DateTimeField(blank=True, null=True, db_comment='The timestamp when the instance was created.')
    hardware = models.JSONField(blank=True, null=True, db_comment='The size of the vCPU and the amount of RAM for the instance.')
    ip_address_type = models.JSONField(blank=True, null=True, db_comment='The IP address type of the instance.')
    ip_v6_addresses = models.JSONField(blank=True, null=True, db_comment='The IPv6 addresses of the instance.')
    is_static_ip = models.BooleanField(blank=True, null=True, db_comment='A Boolean value indicating whether this instance has a static IP assigned to it.')
    availability_zone = models.TextField(blank=True, null=True, db_comment='The Availability Zone where the instance is located.')
    metadata_options = models.JSONField(blank=True, null=True, db_comment='The metadata options for the Amazon Lightsail instance.')
    networking = models.JSONField(blank=True, null=True, db_comment='Information about the public ports and monthly data transfer rates for the instance.')
    private_ip_address = models.TextField(blank=True, null=True, db_comment='The private IP address of the instance.')
    public_ip_address = models.TextField(blank=True, null=True, db_comment='The public IP address of the instance.')
    resource_type = models.TextField(blank=True, null=True, db_comment='The type of resource.')
    ssh_key_name = models.TextField(blank=True, null=True, db_comment='The name of the SSH key being used to connect to the instance.')
    state_code = models.BigIntegerField(blank=True, null=True, db_comment='The status code for the instance.')
    state_name = models.TextField(blank=True, null=True, db_comment='The status of the instance.')
    support_code = models.TextField(blank=True, null=True, db_comment='The support code.')
    username = models.TextField(blank=True, null=True, db_comment='The user name for connecting to the instance.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the instance.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_lightsail_instance'
        db_table_comment = 'AWS Lightsail Instance'


class AwsMacie2ClassificationJob(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The custom name of the job.')
    job_id = models.TextField(blank=True, null=True, db_comment='The unique identifier for the job.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the job.')
    job_status = models.TextField(blank=True, null=True, db_comment='The status of a classification job.')
    job_type = models.TextField(blank=True, null=True, db_comment='The schedule for running a classification job.')
    client_token = models.TextField(blank=True, null=True, db_comment='The token that was provided to ensure the idempotency of the request to create the job.')
    created_at = models.DateTimeField(blank=True, null=True, db_comment='The date and time, in UTC and extended ISO 8601 format, when the job was created.')
    last_run_time = models.DateTimeField(blank=True, null=True, db_comment='This value indicates when the most recent run started.')
    sampling_percentage = models.BigIntegerField(blank=True, null=True, db_comment='The sampling depth, as a percentage, that determines the percentage of eligible objects that the job analyzes.')
    bucket_definitions = models.JSONField(blank=True, null=True, db_comment='The namespace of the AWS service that provides the resource, or a custom-resource.')
    custom_data_identifier_ids = models.JSONField(blank=True, null=True, db_comment='The custom data identifiers that the job uses to analyze data.')
    last_run_error_status = models.JSONField(blank=True, null=True, db_comment='Specifies whether any account- or bucket-level access errors occurred when a classification job ran.')
    s3_job_definition = models.JSONField(blank=True, null=True, db_comment='Specifies which S3 buckets contain the objects that a classification job analyzes, and the scope of that analysis.')
    schedule_frequency = models.JSONField(blank=True, null=True, db_comment='Specifies the recurrence pattern for running a classification job.')
    statistics = models.JSONField(blank=True, null=True, db_comment='Provides processing statistics for a classification job.')
    user_paused_details = models.JSONField(blank=True, null=True, db_comment='Provides information about when a classification job was paused.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_macie2_classification_job'
        db_table_comment = 'AWS Macie2 Classification Job'


class AwsMediaStoreContainer(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the container.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the container.')
    status = models.TextField(blank=True, null=True, db_comment="The status of container creation or deletion. The status is one of the following: 'CREATING', 'ACTIVE', or 'DELETING'.")
    access_logging_enabled = models.BooleanField(blank=True, null=True, db_comment='The state of access logging on the container. This value is false by default, indicating that AWS Elemental MediaStore does not send access logs to Amazon CloudWatch Logs. When you enable access logging on the container, MediaStore changes this value to true, indicating that the service delivers access logs for objects stored in that container to CloudWatch Logs.')
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='The Unix timestamp that the container was created.')
    endpoint = models.TextField(blank=True, null=True, db_comment='The DNS endpoint of the container.')
    policy = models.JSONField(blank=True, null=True, db_comment='The contents of the access policy.')
    policy_std = models.JSONField(blank=True, null=True, db_comment='Contains the contents of the access policy in a canonical form for easier searching.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags associated with the container')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_media_store_container'
        db_table_comment = 'AWS Media Store Container'


class AwsMgnApplication(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='Application name.')
    application_id = models.TextField(blank=True, null=True, db_comment='Application ID.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the application.')
    creation_date_time = models.DateTimeField(blank=True, null=True, db_comment='Application creation dateTime.')
    description = models.TextField(blank=True, null=True, db_comment='Application description.')
    is_archived = models.BooleanField(blank=True, null=True, db_comment='Application archival status.')
    last_modified_date_time = models.DateTimeField(blank=True, null=True, db_comment='Application last modified dateTime.')
    wave_id = models.TextField(blank=True, null=True, db_comment='Application wave ID.')
    application_aggregated_status = models.JSONField(blank=True, null=True, db_comment='Application aggregated status.')
    tags = models.JSONField(blank=True, null=True, db_comment='A list of tags attached to the application.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_mgn_application'
        db_table_comment = 'AWS MGN Application'


class AwsMqBroker(models.Model):
    broker_name = models.TextField(blank=True, null=True, db_comment="The broker's name.")
    broker_id = models.TextField(blank=True, null=True, db_comment='The unique ID that Amazon MQ generates for the broker.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the broker.')
    broker_state = models.TextField(blank=True, null=True, db_comment="The broker's status.")
    deployment_mode = models.TextField(blank=True, null=True, db_comment="The broker's deployment mode.")
    created = models.DateTimeField(blank=True, null=True, db_comment='The time when the broker was created.')
    host_instance_type = models.TextField(blank=True, null=True, db_comment="The broker's instance type.")
    authentication_strategy = models.TextField(blank=True, null=True, db_comment='The authentication strategy used to secure the broker. The default is SIMPLE.')
    data_replication_mode = models.TextField(blank=True, null=True, db_comment='Describes whether this broker is a part of a data replication pair.')
    engine_type = models.TextField(blank=True, null=True, db_comment='The type of broker engine. Currently, Amazon MQ supports ACTIVEMQ and RABBITMQ.')
    engine_version = models.TextField(blank=True, null=True, db_comment="The broker engine's version.")
    pending_authentication_strategy = models.TextField(blank=True, null=True, db_comment='The authentication strategy that will be applied when the broker is rebooted. The default is SIMPLE.')
    pending_data_replication_mode = models.TextField(blank=True, null=True, db_comment='Describes whether this broker will be a part of a data replication pair after reboot.')
    pending_engine_version = models.TextField(blank=True, null=True, db_comment='The broker engine version to upgrade to.')
    pending_host_instance_type = models.TextField(blank=True, null=True, db_comment="The broker's host instance type to upgrade to.")
    publicly_accessible = models.BooleanField(blank=True, null=True, db_comment="Enables connections from applications outside of the VPC that hosts the broker's subnets.")
    storage_type = models.TextField(blank=True, null=True, db_comment="The broker's storage type.")
    auto_minor_version_upgrade = models.BooleanField(blank=True, null=True, db_comment='Enables automatic upgrades to new minor versions for brokers, as new versions are released and supported by Amazon MQ.')
    actions_required = models.JSONField(blank=True, null=True, db_comment='Actions required for a broker.')
    broker_instances = models.JSONField(blank=True, null=True, db_comment='A list of information about allocated brokers.')
    configurations = models.JSONField(blank=True, null=True, db_comment='The list of all revisions for the specified configuration.')
    data_replication_metadata = models.JSONField(blank=True, null=True, db_comment='The replication details of the data replication-enabled broker. Only returned if dataReplicationMode is set to CRDR.')
    encryption_options = models.JSONField(blank=True, null=True, db_comment='Encryption options for the broker.')
    ldap_server_metadata = models.JSONField(blank=True, null=True, db_comment='The metadata of the LDAP server used to authenticate and authorize connections to the broker.')
    logs = models.JSONField(blank=True, null=True, db_comment='The list of information about logs currently enabled and pending to be deployed for the specified broker.')
    pending_ldap_server_metadata = models.JSONField(blank=True, null=True, db_comment='The metadata of the LDAP server that will be used to authenticate and authorize connections to the broker after it is rebooted.')
    maintenance_window_start_time = models.JSONField(blank=True, null=True, db_comment='The parameters that determine the WeeklyStartTime.')
    pending_data_replication_metadata = models.JSONField(blank=True, null=True, db_comment='The pending replication details of the data replication-enabled broker. Only returned if pendingDataReplicationMode is set to CRDR.')
    pending_security_groups = models.JSONField(blank=True, null=True, db_comment='The list of pending security groups to authorize connections to brokers.')
    security_groups = models.JSONField(blank=True, null=True, db_comment='The list of rules (1 minimum, 125 maximum) that authorize connections to brokers.')
    subnet_ids = models.JSONField(blank=True, null=True, db_comment='The list of groups that define which subnets and IP ranges the broker can use from different Availability Zones.')
    users = models.JSONField(blank=True, null=True, db_comment='The list of all broker usernames for the specified broker.')
    tags = models.JSONField(blank=True, null=True, db_comment='A list of tags attached to the broker.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_mq_broker'
        db_table_comment = 'AWS MQ Broker'


class AwsMskCluster(models.Model):
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) that uniquely identifies the Cluster.')
    cluster_name = models.TextField(blank=True, null=True, db_comment='The name of the cluster.')
    active_operation_arn = models.TextField(blank=True, null=True, db_comment='Arn of active cluster operation.')
    cluster_type = models.TextField(blank=True, null=True, db_comment='The type of the cluster.')
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='The time when the cluster was created.')
    current_version = models.TextField(blank=True, null=True, db_comment='The current version of the MSK cluster.')
    state = models.TextField(blank=True, null=True, db_comment='Settings for open monitoring using Prometheus.')
    cluster_configuration = models.JSONField(blank=True, null=True, db_comment='Description of this MSK configuration.')
    cluster_operation = models.JSONField(blank=True, null=True, db_comment='Description of this MSK operation.')
    provisioned = models.JSONField(blank=True, null=True, db_comment='Information about the provisioned cluster.')
    state_info = models.JSONField(blank=True, null=True, db_comment='State Info for the Amazon MSK cluster.')
    tags = models.JSONField(blank=True, null=True, db_comment='A list of tags attached to the Cluster.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_msk_cluster'
        db_table_comment = 'AWS Managed Streaming for Apache Kafka'


class AwsMskServerlessCluster(models.Model):
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) that uniquely identifies the Cluster.')
    cluster_name = models.TextField(blank=True, null=True, db_comment='The name of the cluster.')
    active_operation_arn = models.TextField(blank=True, null=True, db_comment='Arn of active cluster operation.')
    cluster_type = models.TextField(blank=True, null=True, db_comment='The type of the cluster.')
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='The time when the cluster was created.')
    current_version = models.TextField(blank=True, null=True, db_comment='The current version of the MSK cluster.')
    state = models.TextField(blank=True, null=True, db_comment='Settings for open monitoring using Prometheus.')
    cluster_operation = models.JSONField(blank=True, null=True, db_comment='Description of this MSK operation.')
    serverless = models.JSONField(blank=True, null=True, db_comment='Information about the serverless cluster.')
    state_info = models.JSONField(blank=True, null=True, db_comment='State Info for the Amazon MSK cluster.')
    tags = models.JSONField(blank=True, null=True, db_comment='A list of tags attached to the Cluster.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_msk_serverless_cluster'
        db_table_comment = 'AWS Serverless Managed Streaming for Apache Kafka'


class AwsNeptuneDbCluster(models.Model):
    db_cluster_identifier = models.TextField(blank=True, null=True, db_comment='Contains a user-supplied DB cluster identifier. This identifier is the unique key that identifies a DB cluster.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the DB cluster.')
    status = models.TextField(blank=True, null=True, db_comment='Specifies the current state of this DB cluster.')
    cluster_create_time = models.DateTimeField(blank=True, null=True, db_comment='Specifies the time when the DB cluster was created, in Universal Coordinated Time (UTC).')
    allocated_storage = models.BigIntegerField(blank=True, null=True, db_comment='AllocatedStorage always returns 1, because Neptune DB cluster storage size is not fixed, but instead automatically adjusts as needed.')
    automatic_restart_time = models.DateTimeField(blank=True, null=True, db_comment='Time at which the DB cluster will be automatically restarted.')
    backup_retention_period = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the number of days for which automatic DB snapshots are retained.')
    clone_group_id = models.TextField(blank=True, null=True, db_comment='Identifies the clone group to which the DB cluster is associated.')
    copy_tags_to_snapshot = models.BooleanField(blank=True, null=True, db_comment='If set to true, tags are copied to any snapshot of the DB cluster that is created.')
    cross_account_clone = models.BooleanField(blank=True, null=True, db_comment='If set to true, the DB cluster can be cloned across accounts.')
    db_cluster_parameter_group = models.TextField(blank=True, null=True, db_comment='Specifies the name of the DB cluster parameter group for the DB cluster.')
    db_subnet_group = models.TextField(blank=True, null=True, db_comment='Specifies information on the subnet group associated with the DB cluster.')
    database_name = models.TextField(blank=True, null=True, db_comment='Contains the name of the initial database of this DB cluster that was provided.')
    db_cluster_resource_id = models.TextField(blank=True, null=True, db_comment='The Amazon Region-unique, immutable identifier for the DB cluster.')
    deletion_protection = models.BooleanField(blank=True, null=True, db_comment='Indicates whether or not the DB cluster has deletion protection enabled.')
    earliest_restorable_time = models.DateTimeField(blank=True, null=True, db_comment='Specifies the earliest time to which a database can be restored with point-in-time restore.')
    endpoint = models.TextField(blank=True, null=True, db_comment='Specifies the connection endpoint for the primary instance of the DB cluster.')
    engine = models.TextField(blank=True, null=True, db_comment='Provides the name of the database engine to be used for this DB cluster.')
    engine_version = models.TextField(blank=True, null=True, db_comment='Indicates the database engine version.')
    hosted_zone_id = models.TextField(blank=True, null=True, db_comment='Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.')
    iam_database_authentication_enabled = models.BooleanField(blank=True, null=True, db_comment='True if mapping of Amazon Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false.')
    kms_key_id = models.TextField(blank=True, null=True, db_comment='If StorageEncrypted is true, the Amazon KMS key identifier for the encrypted DB cluster.')
    latest_restorable_time = models.DateTimeField(blank=True, null=True, db_comment='Specifies the latest time to which a database can be restored with point-in-time restore.')
    multi_az = models.BooleanField(blank=True, null=True, db_comment='Specifies whether the DB cluster has instances in multiple Availability Zones.')
    percent_progress = models.TextField(blank=True, null=True, db_comment='Specifies the progress of the operation as a percentage.')
    port = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the port that the database engine is listening on.')
    preferred_backup_window = models.TextField(blank=True, null=True, db_comment='Specifies the daily time range during which automated backups are created if automated backups are enabled, as determined by the BackupRetentionPeriod.')
    preferred_maintenance_window = models.TextField(blank=True, null=True, db_comment='Specifies the weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).')
    reader_endpoint = models.TextField(blank=True, null=True, db_comment='The reader endpoint for the DB cluster.')
    storage_encrypted = models.BooleanField(blank=True, null=True, db_comment='Specifies whether the DB cluster is encrypted.')
    associated_roles = models.JSONField(blank=True, null=True, db_comment='Provides a list of the Amazon Identity and Access Management (IAM) roles.')
    availability_zones = models.JSONField(blank=True, null=True, db_comment='Provides the list of EC2 Availability Zones that instances in the DB cluster can be created in.')
    db_cluster_members = models.JSONField(blank=True, null=True, db_comment='Provides the list of instances that make up the DB cluster.')
    enabled_cloudwatch_logs_exports = models.JSONField(blank=True, null=True, db_comment='A list of log types that this DB cluster is configured to export to CloudWatch Logs.')
    read_replica_identifiers = models.JSONField(blank=True, null=True, db_comment='Contains one or more identifiers of the Read Replicas associated with this DB cluster.')
    vpc_security_groups = models.JSONField(blank=True, null=True, db_comment='Provides a list of VPC security groups that the DB cluster belongs to.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_neptune_db_cluster'
        db_table_comment = 'AWS Neptune DB Cluster'


class AwsNeptuneDbClusterSnapshot(models.Model):
    db_cluster_snapshot_identifier = models.TextField(blank=True, null=True, db_comment='Specifies the identifier for a DB cluster snapshot. Must match the identifier of an existing snapshot.')
    db_cluster_snapshot_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the DB cluster snapshot.')
    snapshot_type = models.TextField(blank=True, null=True, db_comment='Provides the type of the DB cluster snapshot.')
    status = models.TextField(blank=True, null=True, db_comment='Specifies the status of this DB cluster snapshot.')
    db_cluster_identifier = models.TextField(blank=True, null=True, db_comment='Specifies the DB cluster identifier of the DB cluster that this DB cluster snapshot was created from.')
    cluster_create_time = models.DateTimeField(blank=True, null=True, db_comment='Specifies the time when the DB cluster was created, in Universal Coordinated Time (UTC).')
    allocated_storage = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the allocated storage size in gibibytes (GiB).')
    snapshot_create_time = models.DateTimeField(blank=True, null=True, db_comment='Provides the time when the snapshot was taken, in Universal Coordinated Time (UTC).')
    percent_progress = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the percentage of the estimated data that has been transferred.')
    source_db_cluster_snapshot_arn = models.TextField(blank=True, null=True, db_comment='If the DB cluster snapshot was copied from a source DB cluster snapshot, the Amazon Resource Name (ARN) for the source DB cluster snapshot, otherwise, a null value.')
    engine = models.TextField(blank=True, null=True, db_comment='Specifies the name of the database engine.')
    engine_version = models.TextField(blank=True, null=True, db_comment='Provides the version of the database engine for this DB cluster snapshot.')
    iam_database_authentication_enabled = models.BooleanField(blank=True, null=True, db_comment='True if mapping of Amazon Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false.')
    kms_key_id = models.TextField(blank=True, null=True, db_comment='If StorageEncrypted is true, the Amazon KMS key identifier for the encrypted DB cluster snapshot.')
    license_model = models.TextField(blank=True, null=True, db_comment='Provides the license model information for this DB cluster snapshot.')
    master_username = models.TextField(blank=True, null=True, db_comment='Not supported by Neptune.')
    port = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the port that the DB cluster was listening on at the time of the snapshot.')
    storage_encrypted = models.BooleanField(blank=True, null=True, db_comment='Specifies whether the DB cluster snapshot is encrypted.')
    vpc_id = models.TextField(blank=True, null=True, db_comment='Provides the VPC ID associated with the DB cluster snapshot.')
    availability_zones = models.JSONField(blank=True, null=True, db_comment='Provides the list of EC2 Availability Zones that instances in the DB cluster snapshot can be restored in.')
    db_cluster_snapshot_attributes = models.JSONField(blank=True, null=True, db_comment='A list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_neptune_db_cluster_snapshot'
        db_table_comment = 'AWS Neptune DB Cluster Snapshot'


class AwsNetworkfirewallFirewall(models.Model):
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the firewall.')
    name = models.TextField(blank=True, null=True, db_comment='The descriptive name of the firewall.')
    vpc_id = models.TextField(blank=True, null=True, db_comment='The unique identifier of the VPC where the firewall is in use.')
    delete_protection = models.BooleanField(blank=True, null=True, db_comment='A flag indicating whether it is possible to delete the firewall.')
    description = models.TextField(blank=True, null=True, db_comment='A description of the firewall.')
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The unique identifier for the firewall.')
    policy_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the firewall policy.')
    policy_change_protection = models.BooleanField(blank=True, null=True, db_comment='A setting indicating whether the firewall is protected against a change to the firewall policy association.')
    subnet_change_protection = models.BooleanField(blank=True, null=True, db_comment='A setting indicating whether the firewall is protected against changes to the subnet associations.')
    encryption_configuration = models.JSONField(blank=True, null=True, db_comment='A complex type that contains the Amazon Web Services KMS encryption configuration settings for the firewall.')
    firewall_status = models.JSONField(blank=True, null=True, db_comment='Detailed information about the current status of a Firewall.')
    subnet_mappings = models.JSONField(blank=True, null=True, db_comment='The public subnets that Network Firewall is using for the firewall.')
    logging_configuration = models.JSONField(blank=True, null=True, db_comment='Defines how Network Firewall performs logging for a Firewall.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags associated with the firewall')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_networkfirewall_firewall'
        db_table_comment = 'AWS Network Firewall Firewall'


class AwsNetworkfirewallFirewallPolicy(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The descriptive name of the rule group.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the rule group.')
    firewall_policy_id = models.TextField(blank=True, null=True, db_comment='The unique identifier for the firewall policy.')
    consumed_stateful_rule_capacity = models.BigIntegerField(blank=True, null=True, db_comment="The number of capacity units currently consumed by the policy's stateful rules.")
    consumed_stateless_rule_capacity = models.BigIntegerField(blank=True, null=True, db_comment="The number of capacity units currently consumed by the policy's stateless rules.")
    description = models.TextField(blank=True, null=True, db_comment='A description of the firewall policy.')
    firewall_policy_status = models.TextField(blank=True, null=True, db_comment='The current status of the firewall policy.')
    last_modified_time = models.DateTimeField(blank=True, null=True, db_comment='The last time that the firewall policy was changed.')
    number_of_associations = models.BigIntegerField(blank=True, null=True, db_comment='The number of firewall policies that use this rule group.')
    encryption_configuration = models.JSONField(blank=True, null=True, db_comment='A complex type that contains the Amazon Web Services KMS encryption configuration settings for your firewall policy.')
    firewall_policy = models.JSONField(blank=True, null=True, db_comment='The policy for the specified firewall policy.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_networkfirewall_firewall_policy'
        db_table_comment = 'AWS Network Firewall Policy'


class AwsNetworkfirewallRuleGroup(models.Model):
    rule_group_name = models.TextField(blank=True, null=True, db_comment='The descriptive name of the rule group.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the rule group.')
    capacity = models.BigIntegerField(blank=True, null=True, db_comment='The maximum operating resources that this rule group can use. Rule group capacity is fixed at creation. When you update a rule group, you are limited to this capacity. When you reference a rule group from a firewall policy, Network Firewall reserves this capacity for the rule group.')
    consumed_capacity = models.BigIntegerField(blank=True, null=True, db_comment='The number of capacity units currently consumed by the rule group rules.')
    description = models.TextField(blank=True, null=True, db_comment='A description of the rule group.')
    number_of_associations = models.BigIntegerField(blank=True, null=True, db_comment='The number of firewall policies that use this rule group.')
    rule_group_id = models.TextField(blank=True, null=True, db_comment='The unique identifier for the rule group.')
    rule_group_status = models.TextField(blank=True, null=True, db_comment='Detailed information about the current status of a rule group.')
    rule_variables = models.JSONField(blank=True, null=True, db_comment='Settings that are available for use in the rules in the rule group. You can only use these for stateful rule groups.')
    rules_source = models.JSONField(blank=True, null=True, db_comment='The stateful rules or stateless rules for the rule group.')
    stateful_rule_options = models.JSONField(blank=True, null=True, db_comment='Additional options governing how Network Firewall handles the rule group. You can only use these for stateful rule groups.')
    type = models.TextField(blank=True, null=True, db_comment='Indicates whether the rule group is stateless or stateful. If the rule group is stateless, it contains stateless rules. If it is stateful, it contains stateful rules.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_networkfirewall_rule_group'
        db_table_comment = 'AWS Network Firewall Rule Group'


class AwsOamLink(models.Model):
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The random ID string that Amazon Web Service generates as part of the link ARN.')
    arn = models.TextField(blank=True, null=True, db_comment='The ARN of the link.')
    sink_arn = models.TextField(blank=True, null=True, db_comment='The ARN of the sink that this link is attached to.')
    label = models.TextField(blank=True, null=True, db_comment='The label that was assigned to this link at creation, with the variables resolved to their actual values.')
    label_template = models.TextField(blank=True, null=True, db_comment='The exact label template that was specified when the link was created, with the template variables not resolved.')
    resource_types = models.JSONField(blank=True, null=True, db_comment='The resource types supported by this link.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_oam_link'
        db_table_comment = 'AWS OAM Link'


class AwsOamSink(models.Model):
    name = models.TextField(blank=True, null=False, primary_key=True, db_comment='The name of the sink.')
    id = models.TextField(blank=True, null=True, db_comment='The random ID string that Amazon Web Service generates as part of the sink ARN.')
    arn = models.TextField(blank=True, null=True, db_comment='The ARN of the sink.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_oam_sink'
        db_table_comment = 'AWS OAM Sink'


class AwsOpensearchDomain(models.Model):
    domain_name = models.TextField(blank=True, null=True, db_comment='The name of the domain.')
    engine_type = models.TextField(blank=True, null=True, db_comment='Specifies the EngineType of the domain.')
    domain_id = models.TextField(blank=True, null=True, db_comment='The unique identifier for the specified domain.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the domain.')
    access_policies = models.TextField(blank=True, null=True, db_comment='The IAM access policies of the domain.')
    created = models.BooleanField(blank=True, null=True, db_comment='The domain creation status.')
    deleted = models.BooleanField(blank=True, null=True, db_comment='The domain deletion status.')
    endpoint = models.TextField(blank=True, null=True, db_comment='The domain endpoint that is used to submit index and search requests.')
    engine_version = models.TextField(blank=True, null=True, db_comment="The domain's OpenSearch version.")
    processing = models.BooleanField(blank=True, null=True, db_comment='The status of the domain configuration.')
    upgrade_processing = models.BooleanField(blank=True, null=True, db_comment='The status of the domain version upgrade.')
    node_to_node_encryption_options_enabled = models.BooleanField(blank=True, null=True, db_comment='Specifies the status of the node to node encryption status.')
    advanced_options = models.JSONField(blank=True, null=True, db_comment='Specifies the status of the advanced options.')
    advanced_security_options = models.JSONField(blank=True, null=True, db_comment="Specifies The current status of the OpenSearch domain's advanced security options.")
    auto_tune_options = models.JSONField(blank=True, null=True, db_comment="The current status of the domain's auto-tune options.")
    cluster_config = models.JSONField(blank=True, null=True, db_comment='The type and number of instances in the domain.')
    cognito_options = models.JSONField(blank=True, null=True, db_comment='The cognito options for the specified domain.')
    domain_endpoint_options = models.JSONField(blank=True, null=True, db_comment="The current status of the domain's endpoint options.")
    ebs_options = models.JSONField(blank=True, null=True, db_comment='The EBSOptions for the specified domain.')
    encryption_at_rest_options = models.JSONField(blank=True, null=True, db_comment='The status of the encryption at rest options.')
    endpoints = models.JSONField(blank=True, null=True, db_comment='Map containing the domain endpoints used to submit index and search requests.')
    log_publishing_options = models.JSONField(blank=True, null=True, db_comment='Log publishing options for the given domain.')
    service_software_options = models.JSONField(blank=True, null=True, db_comment="The current status of the domain's service software.")
    snapshot_options = models.JSONField(blank=True, null=True, db_comment='Specifies the status of the snapshot options.')
    vpc_options = models.JSONField(blank=True, null=True, db_comment='The vpc options for the specified domain.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the domain.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_opensearch_domain'
        db_table_comment = 'AWS OpenSearch Domain'


class AwsOrganizationsAccount(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The friendly name of the account.')
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The unique identifier (account ID) of the member account.')
    parent_id = models.TextField(blank=True, null=True, db_comment='The unique identifier (ID) for the parent root or organization unit (OU) whose accounts you want to list.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the account.')
    status = models.TextField(blank=True, null=True, db_comment='The status of the account in the organization.')
    email = models.TextField(blank=True, null=True, db_comment='The email address associated with the AWS account.')
    joined_method = models.TextField(blank=True, null=True, db_comment='The method by which the account joined the organization.')
    joined_timestamp = models.DateTimeField(blank=True, null=True, db_comment='The date the account became a part of the organization.')
    tags_src = models.JSONField(blank=True, null=True)
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_organizations_account'
        db_table_comment = 'AWS Organizations Account'


class AwsOrganizationsOrganizationalUnit(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The friendly name of this OU.')
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The unique identifier (ID) associated with this OU.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of this OU.')
    parent_id = models.TextField(blank=True, null=True, db_comment='The unique identifier (ID) of the root or OU whose child OUs you want to list.')
    path = models.TextField(blank=True, null=True, db_comment='The OU path is a string representation that uniquely identifies the hierarchical location of an Organizational Unit within the AWS Organizations structure.')  # This field type is a guess.
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_organizations_organizational_unit'
        db_table_comment = 'AWS Organizations Organizational Unit'



class AwsOrganizationsRoot(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The friendly name of the root.')
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The unique identifier (ID) for the root.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the root.')
    policy_types = models.JSONField(blank=True, null=True, db_comment='The types of policies that are currently enabled for the root and therefore can be attached to the root or to its OUs or accounts.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_organizations_root'
        db_table_comment = 'AWS Organizations Root'


class AwsPinpointApp(models.Model):
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The unique identifier for the application.')
    name = models.TextField(blank=True, null=True, db_comment='The display name of the application.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the application.')
    last_modified_date = models.DateTimeField(blank=True, null=True, db_comment="The date and time, in ISO 8601 format, when the application's settings were last modified.")
    campaign_hook = models.JSONField(blank=True, null=True, db_comment='The settings for the AWS Lambda function to invoke by default as a code hook for campaigns in the application.')
    limits = models.JSONField(blank=True, null=True, db_comment='The default sending limits for campaigns in the application.')
    quiet_time = models.JSONField(blank=True, null=True, db_comment='The default quiet time for campaigns in the application.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_pinpoint_app'
        db_table_comment = 'AWS Pinpoint App'


class AwsPipesPipe(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the pipe.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the pipe.')
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='The time the pipe was created.')
    current_state = models.TextField(blank=True, null=True, db_comment='The state the pipe is in.')
    description = models.TextField(blank=True, null=True, db_comment='A description of the pipe.')
    desired_state = models.TextField(blank=True, null=True, db_comment='The state the pipe should be in.')
    enrichment = models.TextField(blank=True, null=True, db_comment='The ARN of the enrichment resource.')
    last_modified_time = models.DateTimeField(blank=True, null=True, db_comment='When the pipe was last updated.')
    role_arn = models.TextField(blank=True, null=True, db_comment='The ARN of the role that allows the pipe to send data to the target.')
    source = models.TextField(blank=True, null=True, db_comment='The ARN of the source resource.')
    source_prefix = models.TextField(blank=True, null=True, db_comment='The prefix matching the pipe source.')
    state_reason = models.TextField(blank=True, null=True, db_comment='The reason the pipe is in its current state.')
    target = models.TextField(blank=True, null=True, db_comment='The ARN of the target resource.')
    target_prefix = models.TextField(blank=True, null=True, db_comment='The prefix matching the pipe target.')
    enrichment_parameters = models.JSONField(blank=True, null=True, db_comment='The parameters required to set up enrichment on your pipe.')
    target_parameters = models.JSONField(blank=True, null=True, db_comment='The parameters required to set up a target for your pipe.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_pipes_pipe'
        db_table_comment = 'AWS Pipes Pipe'
# Unable to inspect table 'aws_pricing_product'
# The error was: rpc error: code = Internal desc = aws: rpc error: code = Internal desc = 'List' call for table 'aws_pricing_product' is missing 1 required qual: column:'service_code' operator: =



class AwsPricingServiceAttribute(models.Model):
    service_code = models.TextField(blank=True, null=True, db_comment='The service code of the AWS service.')
    attribute_name = models.TextField(blank=True, null=True, db_comment='The supported attribute names for the service.')
    attribute_values = models.JSONField(blank=True, null=True, db_comment='The supported attribute values for the service and attribute name.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_pricing_service_attribute'
        db_table_comment = 'AWS Pricing Service Attribute'


class AwsRamPrincipalAssociation(models.Model):
    resource_share_name = models.TextField(blank=True, null=True, db_comment='The name of the resource share.')
    resource_share_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resoure Name (ARN) of the resource share.')
    status = models.TextField(blank=True, null=True, db_comment='The current status of the association.')
    associated_entity = models.TextField(blank=True, null=True, db_comment='The ID of an Amazon Web Services account/The Amazon Resoure Name (ARN) of an organization in Organizations/The ARN of an organizational unit (OU) in Organizations/The ARN of an IAM role The ARN of an IAM user.')
    association_type = models.TextField(blank=True, null=True, db_comment='The type of entity included in this association.')
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time when the association was created.')
    external = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the principal belongs to the same organization in Organizations as the Amazon Web Services account that owns the resource share.')
    last_updated_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time when the association was last updated..')
    status_message = models.TextField(blank=True, null=True, db_comment='A message about the status of the association.')
    resource_share_permission = models.JSONField(blank=True, null=True, db_comment='Information about an RAM permission that is associated with a resource share and any of its resources of a specified type.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ram_principal_association'
        db_table_comment = 'AWS RAM Principal Association'


class AwsRamResourceAssociation(models.Model):
    resource_share_name = models.TextField(blank=True, null=True, db_comment='The name of the resource share.')
    resource_share_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resoure Name (ARN) of the resource share.')
    status = models.TextField(blank=True, null=True, db_comment='The current status of the association.')
    associated_entity = models.TextField(blank=True, null=True, db_comment='The Amazon Resoure Name (ARN) of the associated resource.')
    association_type = models.TextField(blank=True, null=True, db_comment='The type of entity included in this association.')
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time when the association was created.')
    external = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the principal belongs to the same organization in Organizations as the Amazon Web Services account that owns the resource share.')
    last_updated_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time when the association was last updated..')
    status_message = models.TextField(blank=True, null=True, db_comment='A message about the status of the association.')
    resource_share_permission = models.JSONField(blank=True, null=True, db_comment='Information about an RAM permission that is associated with a resource share and any of its resources of a specified type.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ram_resource_association'
        db_table_comment = 'AWS RAM Resource Association'


class AwsRdsDbCluster(models.Model):
    db_cluster_identifier = models.TextField(blank=True, null=True, db_comment='The friendly name to identify the DB Cluster.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the DB Cluster.')
    status = models.TextField(blank=True, null=True, db_comment='Specifies the status of this DB Cluster.')
    resource_id = models.TextField(blank=True, null=True, db_comment='The AWS Region-unique, immutable identifier for the DB cluster.')
    create_time = models.DateTimeField(blank=True, null=True, db_comment='Specifies the time when the DB cluster was created.')
    activity_stream_kinesis_stream_name = models.TextField(blank=True, null=True, db_comment='The name of the Amazon Kinesis data stream used for the database activity stream.')
    activity_stream_kms_key_id = models.TextField(blank=True, null=True, db_comment='The AWS KMS key identifier used for encrypting messages in the database activity stream.')
    activity_stream_mode = models.TextField(blank=True, null=True, db_comment='The mode of the database activity stream.')
    activity_stream_status = models.TextField(blank=True, null=True, db_comment='The status of the database activity stream.')
    allocated_storage = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the allocated storage size in gibibytes (GiB).')
    auto_minor_version_upgrade = models.BooleanField(blank=True, null=True, db_comment='A value that indicates that minor version patches are applied automatically. This setting is only for non-Aurora Multi-AZ DB clusters.')
    backtrack_consumed_change_records = models.BigIntegerField(blank=True, null=True, db_comment='The number of change records stored for Backtrack.')
    backtrack_window = models.BigIntegerField(blank=True, null=True, db_comment='The target backtrack window, in seconds.')
    backup_retention_period = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the number of days for which automatic DB snapshots are retained.')
    capacity = models.BigIntegerField(blank=True, null=True, db_comment='The current capacity of an Aurora Serverless DB cluster.')
    character_set_name = models.TextField(blank=True, null=True, db_comment='Specifies the name of the character set that this cluster is associated with.')
    clone_group_id = models.TextField(blank=True, null=True, db_comment='Identifies the clone group to which the DB cluster is associated.')
    copy_tags_to_snapshot = models.BooleanField(blank=True, null=True, db_comment='Specifies whether tags are copied from the DB cluster to snapshots of the DB cluster, or not.')
    cross_account_clone = models.BooleanField(blank=True, null=True, db_comment='Specifies whether the DB cluster is a clone of a DB cluster owned by a different AWS account, or not.')
    database_name = models.TextField(blank=True, null=True, db_comment='Contains the name of the initial database of this DB cluster that was provided at create time.')
    db_cluster_parameter_group = models.TextField(blank=True, null=True, db_comment='Specifies the name of the DB cluster parameter group for the DB cluster.')
    db_subnet_group = models.TextField(blank=True, null=True, db_comment='Specifies information on the subnet group associated with the DB cluster.')
    deletion_protection = models.BooleanField(blank=True, null=True, db_comment='Specifies whether the DB cluster has deletion protection enabled, or not.')
    earliest_backtrack_time = models.DateTimeField(blank=True, null=True, db_comment='The earliest time to which a DB cluster can be backtracked.')
    earliest_restorable_time = models.DateTimeField(blank=True, null=True, db_comment='The earliest time to which a database can be restored with point-in-time restore.')
    endpoint = models.TextField(blank=True, null=True, db_comment='Specifies the connection endpoint for the primary instance of the DB cluster.')
    engine = models.TextField(blank=True, null=True, db_comment='The name of the database engine to be used for this DB cluster.')
    engine_mode = models.TextField(blank=True, null=True, db_comment='The DB engine mode of the DB cluster.')
    engine_version = models.TextField(blank=True, null=True, db_comment='Indicates the database engine version.')
    global_write_forwarding_requested = models.BooleanField(blank=True, null=True, db_comment='Specifies whether you have requested to enable write forwarding for a secondary cluster in an Aurora global database, or not.')
    global_write_forwarding_status = models.TextField(blank=True, null=True, db_comment='Specifies whether a secondary cluster in an Aurora global database has write forwarding enabled, or not.')
    hosted_zone_id = models.TextField(blank=True, null=True, db_comment='Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.')
    http_endpoint_enabled = models.BooleanField(blank=True, null=True, db_comment='Specifies whether the HTTP endpoint for an Aurora Serverless DB cluster is enabled, or not.')
    iam_database_authentication_enabled = models.BooleanField(blank=True, null=True, db_comment='Specifies whether the the mapping of AWS IAM accounts to database accounts is enabled, or not.')
    kms_key_id = models.TextField(blank=True, null=True, db_comment='The AWS KMS key identifier for the encrypted DB cluster.')
    latest_restorable_time = models.DateTimeField(blank=True, null=True, db_comment='Specifies the latest time to which a database can be restored with point-in-time restore.')
    master_user_name = models.TextField(blank=True, null=True, db_comment='Contains the master username for the DB cluster.')
    multi_az = models.BooleanField(blank=True, null=True, db_comment='Specifies whether the DB cluster has instances in multiple Availability Zones, or not.')
    percent_progress = models.TextField(blank=True, null=True, db_comment='Specifies the progress of the operation as a percentage.')
    port = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the port that the database engine is listening on.')
    preferred_backup_window = models.TextField(blank=True, null=True, db_comment='Specifies the daily time range during which automated backups are created.')
    preferred_maintenance_window = models.TextField(blank=True, null=True, db_comment='Specifies the weekly time range during which system maintenance can occur')
    reader_endpoint = models.TextField(blank=True, null=True, db_comment='The reader endpoint for the DB cluster.')
    storage_encrypted = models.BooleanField(blank=True, null=True, db_comment='Specifies whether the DB cluster is encrypted, or not.')
    associated_roles = models.JSONField(blank=True, null=True, db_comment='A list of AWS IAM roles that are associated with the DB cluster.')
    availability_zones = models.JSONField(blank=True, null=True, db_comment='A list of Availability Zones (AZs) where instances in the DB cluster can be created.')
    custom_endpoints = models.JSONField(blank=True, null=True, db_comment='A list of all custom endpoints associated with the cluster.')
    members = models.JSONField(blank=True, null=True, db_comment='A list of instances that make up the DB cluster.')
    option_group_memberships = models.JSONField(blank=True, null=True, db_comment='A list of option group memberships for this DB cluster.')
    domain_memberships = models.JSONField(blank=True, null=True, db_comment='A list of Active Directory Domain membership records associated with the DB cluster.')
    enabled_cloudwatch_logs_exports = models.JSONField(blank=True, null=True, db_comment='A list of log types that this DB cluster is configured to export to CloudWatch Logs.')
    pending_maintenance_actions = models.JSONField(blank=True, null=True, db_comment='A list that provides details about the pending maintenance actions for the resource.')
    read_replica_identifiers = models.JSONField(blank=True, null=True, db_comment='A list of identifiers of the read replicas associated with this DB cluster.')
    vpc_security_groups = models.JSONField(blank=True, null=True, db_comment='A list of VPC security groups that the DB cluster belongs to.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags attached to the DB Cluster.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_rds_db_cluster'
        db_table_comment = 'AWS RDS DB Cluster'


class AwsRdsDbClusterParameterGroup(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The friendly name to identify the DB cluster parameter group.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the DB cluster parameter group.')
    description = models.TextField(blank=True, null=True, db_comment='Provides the customer-specified description for this DB cluster parameter group.')
    db_parameter_group_family = models.TextField(blank=True, null=True, db_comment='The name of the DB parameter group family that this DB cluster parameter group is compatible with.')
    parameters = models.JSONField(blank=True, null=True, db_comment='A list of detailed parameter for a particular DB Cluster parameter group.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags attached to the DB Cluster parameter group.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_rds_db_cluster_parameter_group'
        db_table_comment = 'AWS RDS DB Cluster Parameter Group'


class AwsRdsDbClusterSnapshot(models.Model):
    db_cluster_snapshot_identifier = models.TextField(blank=True, null=True, db_comment='The friendly name to identify the DB Cluster Snapshot.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the DB Cluster Snapshot.')
    type = models.TextField(blank=True, null=True, db_comment='The type of the DB Cluster Snapshot.')
    status = models.TextField(blank=True, null=True, db_comment='Specifies the status of this DB Cluster Snapshot.')
    db_cluster_identifier = models.TextField(blank=True, null=True, db_comment='The friendly name to identify the DB Cluster, that the snapshot snapshot was created from.')
    create_time = models.DateTimeField(blank=True, null=True, db_comment='The time when the snapshot was taken.')
    allocated_storage = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the allocated storage size in gibibytes (GiB).')
    cluster_create_time = models.DateTimeField(blank=True, null=True, db_comment='Specifies the time when the DB cluster was created.')
    engine = models.TextField(blank=True, null=True, db_comment='Specifies the name of the database engine.')
    engine_version = models.TextField(blank=True, null=True, db_comment='Specifies the version of the database engine for this DB cluster snapshot.')
    iam_database_authentication_enabled = models.BooleanField(blank=True, null=True, db_comment='Specifies whether mapping of AWS Identity and Access Management (IAM) accounts to database accounts is enabled, or not.')
    kms_key_id = models.TextField(blank=True, null=True, db_comment='The AWS KMS key identifier for the AWS KMS customer master key (CMK).')
    license_model = models.TextField(blank=True, null=True, db_comment='Provides the license model information for this DB cluster snapshot.')
    master_user_name = models.TextField(blank=True, null=True, db_comment='Provides the master username for the DB cluster snapshot.')
    percent_progress = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the percentage of the estimated data that has been transferred.')
    port = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the port that the DB cluster was listening on at the time of the snapshot.')
    source_db_cluster_snapshot_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the source DB cluster snapshot, if the DB cluster snapshot was copied from a source DB cluster snapshot.')
    storage_encrypted = models.BooleanField(blank=True, null=True, db_comment='Specifies whether the DB cluster snapshot is encrypted, or not.')
    vpc_id = models.TextField(blank=True, null=True, db_comment='Provides the VPC ID associated with the DB cluster snapshot.')
    availability_zones = models.JSONField(blank=True, null=True, db_comment='A list of Availability Zones (AZs) where instances in the DB cluster snapshot can be restored.')
    db_cluster_snapshot_attributes = models.JSONField(blank=True, null=True, db_comment='A list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags attached to the DB Cluster Snapshot.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_rds_db_cluster_snapshot'
        db_table_comment = 'AWS RDS DB Cluster Snapshot'


class AwsRdsDbEngineVersion(models.Model):
    engine = models.TextField(blank=True, null=True, db_comment='The name of the database engine.')
    engine_version = models.TextField(blank=True, null=True, db_comment='The version number of the database engine.')
    arn = models.TextField(blank=True, null=True, db_comment='The ARN of the custom engine version.')
    status = models.TextField(blank=True, null=True, db_comment='The status of the DB engine version, either available or deprecated.')
    create_time = models.DateTimeField(blank=True, null=True, db_comment='The creation time of the DB engine version.')
    custom_db_engine_version_manifest = models.TextField(blank=True, null=True, db_comment='JSON string that lists the installation files and parameters that RDS Custom uses to create a custom engine version (CEV).')
    list_supported_character_sets = models.BooleanField(blank=True, null=True, db_comment='A value that indicates whether to list the supported character sets for each engine version.')
    engine_mode = models.TextField(blank=True, null=True, db_comment='Accepts DB engine modes.')
    list_supported_timezones = models.BooleanField(blank=True, null=True, db_comment='A value that indicates whether to list the supported time zones for each engine version.')
    default_only = models.BooleanField(blank=True, null=True, db_comment='A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.')
    db_engine_description = models.TextField(blank=True, null=True, db_comment='The description of the database engine.')
    db_engine_media_type = models.TextField(blank=True, null=True, db_comment='A value that indicates the source media provider of the AMI based on the usage operation. Applicable for RDS Custom for SQL Server.')
    db_engine_version_description = models.TextField(blank=True, null=True, db_comment='The description of the database engine version.')
    db_parameter_group_family = models.TextField(blank=True, null=True, db_comment='The name of the DB parameter group family for the database engine.')
    database_installation_files_s3_bucket_name = models.TextField(blank=True, null=True, db_comment='The name of the Amazon S3 bucket that contains your database installation files.')
    database_installation_files_s3_prefix = models.TextField(blank=True, null=True, db_comment='The Amazon S3 directory that contains the database installation files. If not specified, then no prefix is assumed.')
    kms_key_id = models.TextField(blank=True, null=True, db_comment='The Amazon Web Services KMS key identifier for an encrypted CEV. This parameter is required for RDS Custom, but optional for Amazon RDS.')
    major_engine_version = models.TextField(blank=True, null=True, db_comment='The major engine version of the CEV.')
    supports_babelfish = models.BooleanField(blank=True, null=True, db_comment='A value that indicates whether the engine version supports Babelfish for Aurora PostgreSQL.')
    supports_certificate_rotation_without_restart = models.BooleanField(blank=True, null=True, db_comment='A value that indicates whether the engine version supports rotating the server certificate without rebooting the DB instance.')
    supports_global_databases = models.BooleanField(blank=True, null=True, db_comment='A value that indicates whether you can use Aurora global databases with a specific DB engine version.')
    supports_log_exports_to_cloudwatch_logs = models.BooleanField(blank=True, null=True, db_comment='A value that indicates whether the engine version supports exporting the log types specified by ExportableLogTypes to CloudWatch Logs.')
    supports_parallel_query = models.BooleanField(blank=True, null=True, db_comment='A value that indicates whether you can use Aurora parallel query with a specific DB engine version.')
    supports_read_replica = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the database engine version supports read replicas.')
    exportable_log_types = models.JSONField(blank=True, null=True, db_comment='The types of logs that the database engine has available for export to CloudWatch Logs.')
    image = models.JSONField(blank=True, null=True, db_comment='The EC2 image.')
    supported_feature_names = models.JSONField(blank=True, null=True, db_comment='A list of features supported by the DB engine.')
    supported_nchar_character_sets = models.JSONField(blank=True, null=True, db_comment='A list of the character sets supported by the Oracle DB engine for the NcharCharacterSetName parameter of the CreateDBInstance operation.')
    supported_timezones = models.JSONField(blank=True, null=True, db_comment='A list of the time zones supported by this engine for the Timezone parameter of the CreateDBInstance action.')
    valid_upgrade_target = models.JSONField(blank=True, null=True, db_comment='A list of engine versions that this database engine version can be upgraded to.')
    tag_list = models.JSONField(blank=True, null=True, db_comment='A list of tags.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_rds_db_engine_version'
        db_table_comment = 'AWS RDS DB Engine Version'


class AwsRdsDbEventSubscription(models.Model):
    cust_subscription_id = models.TextField(blank=True, null=True, db_comment='The RDS event notification subscription Id.')
    customer_aws_id = models.TextField(blank=True, null=True, db_comment='The AWS customer account associated with the RDS event notification subscription.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the event subscription.')
    status = models.TextField(blank=True, null=True, db_comment='The status of the RDS event notification subscription, it can be one of the following: creating | modifying | deleting | active | no-permission | topic-not-exist.')
    enabled = models.BooleanField(blank=True, null=True, db_comment='A Boolean value indicating if the subscription is enabled. True indicates the subscription is enabled.')
    sns_topic_arn = models.TextField(blank=True, null=True, db_comment='The topic ARN of the RDS event notification subscription.')
    source_type = models.TextField(blank=True, null=True, db_comment='The source type for the RDS event notification subscription.')
    subscription_creation_time = models.DateTimeField(blank=True, null=True, db_comment='The time the RDS event notification subscription was created.')
    event_categories_list = models.JSONField(blank=True, null=True, db_comment='A list of event categories for the RDS event notification subscription.')
    source_ids_list = models.JSONField(blank=True, null=True, db_comment='A list of source IDs for the RDS event notification subscription.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_rds_db_event_subscription'
        db_table_comment = 'AWS RDS DB Event Subscription'


class AwsRdsDbInstance(models.Model):
    db_instance_identifier = models.TextField(blank=True, null=True, db_comment='The friendly name to identify the DB Instance.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the DB Instance.')
    db_cluster_identifier = models.TextField(blank=True, null=True, db_comment='The friendly name to identify the DB cluster, that the DB instance is a member of.')
    status = models.TextField(blank=True, null=True, db_comment='Specifies the current state of this database.')
    class_field = models.TextField(db_column='class', blank=True, null=True, db_comment='Contains the name of the compute and memory capacity class of the DB instance.')  # Field renamed because it was a Python reserved word.
    resource_id = models.TextField(blank=True, null=True, db_comment='The AWS Region-unique, immutable identifier for the DB instance.')
    allocated_storage = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the allocated storage size specified in gibibytes(GiB).')
    auto_minor_version_upgrade = models.BooleanField(blank=True, null=True, db_comment='Specifies whether minor version patches are applied automatically, or not.')
    availability_zone = models.TextField(blank=True, null=True, db_comment='Specifies the name of the Availability Zone the DB instance is located in.')
    backup_retention_period = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the number of days for which automatic DB snapshots are retained.')
    ca_certificate_identifier = models.TextField(blank=True, null=True, db_comment='The identifier of the CA certificate for this DB instance.')
    character_set_name = models.TextField(blank=True, null=True, db_comment='Specifies the name of the character set that this instance is associated with.')
    copy_tags_to_snapshot = models.BooleanField(blank=True, null=True, db_comment='Specifies whether tags are copied from the DB instance to snapshots of the DB instance, or not.')
    customer_owned_ip_enabled = models.BooleanField(blank=True, null=True, db_comment='Specifies whether a customer-owned IP address (CoIP) is enabled for an RDS on Outposts DB instance, or not.')
    port = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the port that the DB instance listens on.')
    db_name = models.TextField(blank=True, null=True, db_comment='Contains the name of the initial database of this instance that was provided at create time.')
    db_subnet_group_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the DB subnet group.')
    db_subnet_group_description = models.TextField(blank=True, null=True, db_comment='Provides the description of the DB subnet group.')
    db_subnet_group_name = models.TextField(blank=True, null=True, db_comment='The name of the DB subnet group.')
    db_subnet_group_status = models.TextField(blank=True, null=True, db_comment='Provides the status of the DB subnet group.')
    deletion_protection = models.BooleanField(blank=True, null=True, db_comment='Specifies whether the DB instance has deletion protection enabled, or not.')
    endpoint_address = models.TextField(blank=True, null=True, db_comment='Specifies the DNS address of the DB instance.')
    endpoint_hosted_zone_id = models.TextField(blank=True, null=True, db_comment='Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.')
    endpoint_port = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the port that the database engine is listening on.')
    engine = models.TextField(blank=True, null=True, db_comment='The name of the database engine to be used for this DB instance.')
    engine_version = models.TextField(blank=True, null=True, db_comment='Indicates the database engine version.')
    enhanced_monitoring_resource_arn = models.TextField(blank=True, null=True, db_comment='The ARN of the Amazon CloudWatch Logs log stream that receives the Enhanced Monitoring metrics data for the DB instance.')
    iam_database_authentication_enabled = models.BooleanField(blank=True, null=True, db_comment='Specifies whether the the mapping of AWS IAM accounts to database accounts is enabled, or not.')
    create_time = models.DateTimeField(blank=True, null=True, db_comment='Provides the date and time the DB instance was created.')
    iops = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the Provisioned IOPS (I/O operations per second) value.')
    kms_key_id = models.TextField(blank=True, null=True, db_comment='The AWS KMS key identifier for the encrypted DB instance.')
    latest_restorable_time = models.DateTimeField(blank=True, null=True, db_comment='Specifies the latest time to which a database can be restored with point-in-time restore.')
    license_model = models.TextField(blank=True, null=True, db_comment='License model information for this DB instance.')
    master_user_name = models.TextField(blank=True, null=True, db_comment='Contains the master username for the DB instance.')
    max_allocated_storage = models.BigIntegerField(blank=True, null=True, db_comment='The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.')
    monitoring_interval = models.BigIntegerField(blank=True, null=True, db_comment='The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance.')
    monitoring_role_arn = models.TextField(blank=True, null=True, db_comment='The ARN for the IAM role that permits RDS to send Enhanced Monitoring metrics to Amazon CloudWatch Logs.')
    multi_az = models.BooleanField(blank=True, null=True, db_comment='Specifies if the DB instance is a Multi-AZ deployment.')
    nchar_character_set_name = models.TextField(blank=True, null=True, db_comment='The name of the NCHAR character set for the Oracle DB instance.')
    performance_insights_enabled = models.BooleanField(blank=True, null=True, db_comment='Specifies whether Performance Insights is enabled for the DB instance, or not.')
    performance_insights_kms_key_id = models.TextField(blank=True, null=True, db_comment='The AWS KMS key identifier for encryption of Performance Insights data.')
    performance_insights_retention_period = models.BigIntegerField(blank=True, null=True, db_comment='The amount of time, in days, to retain Performance Insights data.')
    preferred_backup_window = models.TextField(blank=True, null=True, db_comment='Specifies the daily time range during which automated backups are created.')
    preferred_maintenance_window = models.TextField(blank=True, null=True, db_comment='Specifies the weekly time range during which system maintenance can occur.')
    promotion_tier = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance.')
    publicly_accessible = models.BooleanField(blank=True, null=True, db_comment='Specifies the accessibility options for the DB instance.')
    read_replica_source_db_instance_identifier = models.TextField(blank=True, null=True, db_comment='Contains the identifier of the source DB instance if this DB instance is a read replica.')
    replica_mode = models.TextField(blank=True, null=True, db_comment='The mode of an Oracle read replica.')
    secondary_availability_zone = models.TextField(blank=True, null=True, db_comment='Specifies the name of the secondary Availability Zone for a DB instance with multi-AZ support.')
    storage_encrypted = models.BooleanField(blank=True, null=True, db_comment='Specifies whether the DB instance is encrypted, or not.')
    storage_throughput = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the storage throughput for the DB instance. This setting applies only to the gp3 storage type.')
    storage_type = models.TextField(blank=True, null=True, db_comment='Specifies the storage type associated with DB instance.')
    tde_credential_arn = models.TextField(blank=True, null=True, db_comment=' The ARN from the key store with which the instance is associated for TDE encryption.')
    timezone = models.TextField(blank=True, null=True, db_comment='The time zone of the DB instance.')
    vpc_id = models.TextField(blank=True, null=True, db_comment='Provides the VpcId of the DB subnet group.')
    associated_roles = models.JSONField(blank=True, null=True, db_comment='A list of AWS IAM roles that are associated with the DB instance.')
    certificate = models.JSONField(blank=True, null=True, db_comment='The CA certificate associated with the DB instance.')
    db_parameter_groups = models.JSONField(blank=True, null=True, db_comment='A list of DB parameter groups applied to this DB instance.')
    db_security_groups = models.JSONField(blank=True, null=True, db_comment='A list of DB security group associated with the DB instance.')
    domain_memberships = models.JSONField(blank=True, null=True, db_comment='A list of Active Directory Domain membership records associated with the DB instance.')
    enabled_cloudwatch_logs_exports = models.JSONField(blank=True, null=True, db_comment='A list of log types that this DB instance is configured to export to CloudWatch Logs.')
    option_group_memberships = models.JSONField(blank=True, null=True, db_comment='A list of option group memberships for this DB instance')
    pending_maintenance_actions = models.JSONField(blank=True, null=True, db_comment='A list that provides details about the pending maintenance actions for the resource.')
    processor_features = models.JSONField(blank=True, null=True, db_comment='The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.')
    read_replica_db_cluster_identifiers = models.JSONField(blank=True, null=True, db_comment='A list of identifiers of Aurora DB clusters to which the RDS DB instance is replicated as a read replica.')
    read_replica_db_instance_identifiers = models.JSONField(blank=True, null=True, db_comment='A list of identifiers of the read replicas associated with this DB instance.')
    status_infos = models.JSONField(blank=True, null=True, db_comment='The status of a read replica.')
    subnets = models.JSONField(blank=True, null=True, db_comment='A list of subnet elements.')
    vpc_security_groups = models.JSONField(blank=True, null=True, db_comment='A list of VPC security group elements that the DB instance belongs to.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags attached to the DB Instance.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_rds_db_instance'
        db_table_comment = 'AWS RDS DB Instance'


class AwsRdsDbInstanceAutomatedBackup(models.Model):
    db_instance_identifier = models.TextField(blank=True, null=True, db_comment='The friendly name to identify the DB Instance.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the replicated automated backups.')
    db_instance_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the automated backups.')
    status = models.TextField(blank=True, null=True, db_comment='Specifies the current state of this database.')
    allocated_storage = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the allocated storage size in gibibytes (GiB).')
    availability_zone = models.TextField(blank=True, null=True, db_comment='The Availability Zone that the automated backup was created in.')
    backup_retention_period = models.BigIntegerField(blank=True, null=True, db_comment='The retention period for the automated backups.')
    backup_target = models.TextField(blank=True, null=True, db_comment='Specifies where automated backups are stored: Amazon Web Services Outposts or the Amazon Web Services Region.')
    dbi_resource_id = models.TextField(blank=True, null=True, db_comment="The identifier for the source DB instance, which can't be changed and which is unique to an Amazon Web Services Region.")
    encrypted = models.BooleanField(blank=True, null=True, db_comment='Specifies whether the automated backup is encrypted.')
    engine = models.TextField(blank=True, null=True, db_comment='The name of the database engine for this automated backup.')
    engine_version = models.TextField(blank=True, null=True, db_comment='The version of the database engine for the automated backup.')
    iam_database_authentication_enabled = models.BooleanField(blank=True, null=True, db_comment='True if mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false.')
    instance_create_time = models.DateTimeField(blank=True, null=True, db_comment='True if mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false.')
    iops = models.BigIntegerField(blank=True, null=True, db_comment='True if mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false.')
    kms_key_id = models.TextField(blank=True, null=True, db_comment='The Amazon Web Services KMS key ID for an automated backup. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.')
    license_model = models.TextField(blank=True, null=True, db_comment='The Amazon Web Services KMS key ID for an automated backup. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.')
    master_username = models.TextField(blank=True, null=True, db_comment='The license model of an automated backup.')
    option_group_name = models.TextField(blank=True, null=True, db_comment='The option group the automated backup is associated with. If omitted, the default option group for the engine specified is used.')
    port = models.BigIntegerField(blank=True, null=True, db_comment='The port number that the automated backup used for connections. Default: Inherits from the source DB instance Valid Values: 1150-65535.')
    storage_throughput = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the storage throughput for the automated backup.')
    storage_type = models.TextField(blank=True, null=True, db_comment='Specifies the storage type associated with the automated backup.')
    tde_credential_arn = models.TextField(blank=True, null=True, db_comment='The ARN from the key store with which the automated backup is associated for TDE encryption.')
    timezone = models.TextField(blank=True, null=True, db_comment='The time zone of the automated backup.')
    vpc_id = models.TextField(blank=True, null=True, db_comment='Provides the VPC ID associated with the DB instance.')
    db_instance_automated_backups_replications = models.JSONField(blank=True, null=True, db_comment='The list of replications to different Amazon Web Services Regions associated with the automated backup.')
    restore_window = models.JSONField(blank=True, null=True, db_comment='Earliest and latest time an instance can be restored to.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_rds_db_instance_automated_backup'
        db_table_comment = 'AWS RDS DB Instance Automated Backup'


class AwsRdsDbInstanceMetricConnections(models.Model):
    db_instance_identifier = models.TextField(blank=True, null=True, db_comment='The friendly name to identify the DB Instance.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_rds_db_instance_metric_connections'
        db_table_comment = 'AWS RDS DB Instance Cloudwatch Metrics - DB Connections'


class AwsRdsDbInstanceMetricConnectionsDaily(models.Model):
    db_instance_identifier = models.TextField(blank=True, null=True, db_comment='The friendly name to identify the DB Instance.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_rds_db_instance_metric_connections_daily'
        db_table_comment = 'AWS RDS DB Instance Cloudwatch Metrics - DB Connections (Daily)'


class AwsRdsDbInstanceMetricConnectionsHourly(models.Model):
    db_instance_identifier = models.TextField(blank=True, null=True, db_comment='The friendly name to identify the DB Instance.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_rds_db_instance_metric_connections_hourly'
        db_table_comment = 'AWS RDS DB Instance Cloudwatch Metrics - DB Connections (Hourly)'


class AwsRdsDbInstanceMetricCpuUtilization(models.Model):
    db_instance_identifier = models.TextField(blank=True, null=True, db_comment='The friendly name to identify the DB Instance.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_rds_db_instance_metric_cpu_utilization'
        db_table_comment = 'AWS RDS DB Instance Cloudwatch Metrics - CPU Utilization'


class AwsRdsDbInstanceMetricCpuUtilizationDaily(models.Model):
    db_instance_identifier = models.TextField(blank=True, null=True, db_comment='The friendly name to identify the DB Instance.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_rds_db_instance_metric_cpu_utilization_daily'
        db_table_comment = 'AWS RDS DB Instance Cloudwatch Metrics - CPU Utilization (Daily)'


class AwsRdsDbInstanceMetricCpuUtilizationHourly(models.Model):
    db_instance_identifier = models.TextField(blank=True, null=True, db_comment='The friendly name to identify the DB Instance.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_rds_db_instance_metric_cpu_utilization_hourly'
        db_table_comment = 'AWS RDS DB Instance Cloudwatch Metrics - CPU Utilization (Hourly)'


class AwsRdsDbInstanceMetricReadIops(models.Model):
    db_instance_identifier = models.TextField(blank=True, null=True, db_comment='The friendly name to identify the DB Instance.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_rds_db_instance_metric_read_iops'
        db_table_comment = 'AWS RDS DB Instance Cloudwatch Metrics - Read IOPS'


class AwsRdsDbInstanceMetricReadIopsDaily(models.Model):
    db_instance_identifier = models.TextField(blank=True, null=True, db_comment='The friendly name to identify the DB Instance.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_rds_db_instance_metric_read_iops_daily'
        db_table_comment = 'AWS RDS DB Instance Cloudwatch Metrics - Read IOPS (Daily)'


class AwsRdsDbInstanceMetricReadIopsHourly(models.Model):
    db_instance_identifier = models.TextField(blank=True, null=True, db_comment='The friendly name to identify the DB Instance.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_rds_db_instance_metric_read_iops_hourly'
        db_table_comment = 'AWS RDS DB Instance Cloudwatch Metrics - Read IOPS (Hourly)'


class AwsRdsDbInstanceMetricWriteIops(models.Model):
    db_instance_identifier = models.TextField(blank=True, null=True, db_comment='The friendly name to identify the DB Instance.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_rds_db_instance_metric_write_iops'
        db_table_comment = 'AWS RDS DB Instance Cloudwatch Metrics - Write IOPS'


class AwsRdsDbInstanceMetricWriteIopsDaily(models.Model):
    db_instance_identifier = models.TextField(blank=True, null=True, db_comment='The friendly name to identify the DB Instance.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_rds_db_instance_metric_write_iops_daily'
        db_table_comment = 'AWS RDS DB Instance Cloudwatch Metrics - Write IOPS (Daily)'


class AwsRdsDbInstanceMetricWriteIopsHourly(models.Model):
    db_instance_identifier = models.TextField(blank=True, null=True, db_comment='The friendly name to identify the DB Instance.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_rds_db_instance_metric_write_iops_hourly'
        db_table_comment = 'AWS RDS DB Instance Cloudwatch Metrics - Write IOPS (Hourly)'


class AwsRdsDbOptionGroup(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The friendly name to identify the option group.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the option group.')
    description = models.TextField(blank=True, null=True, db_comment='Provides a description of the option group.')
    allows_vpc_and_non_vpc_instance_memberships = models.BooleanField(blank=True, null=True, db_comment='Specifies whether this option group can be applied to both VPC and non-VPC instances.')
    engine_name = models.TextField(blank=True, null=True, db_comment='Indicates the name of the engine that this option group can be applied to.')
    major_engine_version = models.TextField(blank=True, null=True, db_comment='Indicates the major engine version associated with this option group.')
    vpc_id = models.TextField(blank=True, null=True, db_comment='Indicates the ID of the VPC, option group can be applied.')
    options = models.JSONField(blank=True, null=True, db_comment='Indicates what options are available in the option group.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags attached to the option group.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_rds_db_option_group'
        db_table_comment = 'AWS RDS DB Option Group'


class AwsRdsDbParameterGroup(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The friendly name to identify the DB parameter group.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the DB parameter group.')
    description = models.TextField(blank=True, null=True, db_comment='Provides the customer-specified description for this DB parameter group.')
    db_parameter_group_family = models.TextField(blank=True, null=True, db_comment='The name of the DB parameter group family that this DB parameter group is compatible with.')
    parameters = models.JSONField(blank=True, null=True, db_comment='A list of detailed parameter for a particular DB parameter group.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags attached to the DB parameter group.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_rds_db_parameter_group'
        db_table_comment = 'AWS RDS DB Parameter Group'


class AwsRdsDbProxy(models.Model):
    db_proxy_name = models.TextField(blank=True, null=True, db_comment='The identifier for the proxy.')
    db_proxy_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the proxy')
    created_date = models.DateTimeField(blank=True, null=True, db_comment='The date and time when the proxy was first created.')
    status = models.TextField(blank=True, null=True, db_comment='The current status of this proxy.')
    debug_logging = models.BooleanField(blank=True, null=True, db_comment='Whether the proxy includes detailed information about SQL statements in its logs.')
    endpoint = models.TextField(blank=True, null=True, db_comment='The endpoint that you can use to connect to the DB proxy.')
    engine_family = models.TextField(blank=True, null=True, db_comment='The kinds of databases that the proxy can connect to.')
    idle_client_timeout = models.BigIntegerField(blank=True, null=True, db_comment='The number of seconds a connection to the proxy can have no activity before the proxy drops the client connection.')
    require_tls = models.BooleanField(blank=True, null=True, db_comment='Indicates whether Transport Layer Security (TLS) encryption is required for connections to the proxy.')
    role_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the IAM role that the proxy uses to access Amazon Secrets Manager.')
    updated_date = models.DateTimeField(blank=True, null=True, db_comment='The date and time when the proxy was last updated.')
    vpc_id = models.TextField(blank=True, null=True, db_comment='Provides the VPC ID of the DB proxy.')
    auth = models.JSONField(blank=True, null=True, db_comment='One or more data structures specifying the authorization mechanism to connect to the associated RDS DB instance or Aurora DB cluster.')
    vpc_security_group_ids = models.JSONField(blank=True, null=True, db_comment='Provides a list of VPC security groups that the proxy belongs to.')
    vpc_subnet_ids = models.JSONField(blank=True, null=True, db_comment='The EC2 subnet IDs for the proxy.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_rds_db_proxy'
        db_table_comment = 'AWS RDS DB Proxy'


class AwsRdsDbSnapshot(models.Model):
    db_snapshot_identifier = models.TextField(blank=True, null=True, db_comment='The friendly name to identify the DB snapshot.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the DB snapshot.')
    type = models.TextField(blank=True, null=True, db_comment='Provides the type of the DB snapshot.')
    status = models.TextField(blank=True, null=True, db_comment='Specifies the status of this DB snapshot.')
    create_time = models.DateTimeField(blank=True, null=True, db_comment='Specifies when the snapshot was taken.')
    allocated_storage = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the allocated storage size in gibibytes(GiB).')
    availability_zone = models.TextField(blank=True, null=True, db_comment='Specifies the name of the Availability Zone the DB instance was located in, at the time of the DB snapshot.')
    db_instance_identifier = models.TextField(blank=True, null=True, db_comment='Specifies the DB instance identifier of the DB instance this DB snapshot was created from.')
    dbi_resource_id = models.TextField(blank=True, null=True, db_comment="The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.")
    encrypted = models.BooleanField(blank=True, null=True, db_comment='Specifies whether the DB snapshot is encrypted, or not.')
    engine = models.TextField(blank=True, null=True, db_comment='Specifies the name of the database engine.')
    engine_version = models.TextField(blank=True, null=True, db_comment='Specifies the version of the database engine.')
    iam_database_authentication_enabled = models.BooleanField(blank=True, null=True, db_comment='Specifies whether the mapping of AWS IAM accounts to database accounts is enabled, or not.')
    instance_create_time = models.DateTimeField(blank=True, null=True, db_comment='Specifies the time when the DB instance, from which the snapshot was taken, was created.')
    iops = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the Provisioned IOPS (I/O operations per second) value of the DB instance at the time of the snapshot.')
    kms_key_id = models.TextField(blank=True, null=True, db_comment='Specifies the AWS KMS key identifier for the encrypted DB snapshot.')
    license_model = models.TextField(blank=True, null=True, db_comment='Specifies the License model information for the restored DB instance.')
    master_user_name = models.TextField(blank=True, null=True, db_comment='Provides the master username for the DB snapshot.')
    option_group_name = models.TextField(blank=True, null=True, db_comment='Provides the option group name for the DB snapshot.')
    percent_progress = models.BigIntegerField(blank=True, null=True, db_comment='The percentage of the estimated data that has been transferred.')
    port = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the port that the database engine was listening on at the time of the snapshot.')
    source_db_snapshot_identifier = models.TextField(blank=True, null=True, db_comment='The DB snapshot ARN that the DB snapshot was copied from.')
    source_region = models.TextField(blank=True, null=True, db_comment='The AWS Region that the DB snapshot was created in or copied from.')
    storage_type = models.TextField(blank=True, null=True, db_comment='Specifies the storage type associated with DB snapshot.')
    tde_credential_arn = models.TextField(blank=True, null=True, db_comment='The ARN from the key store with which to associate the instance for TDE encryption.')
    timezone = models.TextField(blank=True, null=True, db_comment='The time zone of the DB snapshot.')
    vpc_id = models.TextField(blank=True, null=True, db_comment='Provides the VPC ID associated with the DB snapshot.')
    db_snapshot_attributes = models.JSONField(blank=True, null=True, db_comment='A list of DB snapshot attribute names and values for a manual DB snapshot.')
    processor_features = models.JSONField(blank=True, null=True, db_comment='The number of CPU cores and the number of threads per core for the DB instance class of the DB instance when the DB snapshot was created.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags attached to the DB snapshot.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_rds_db_snapshot'
        db_table_comment = 'AWS RDS DB Snapshot'


class AwsRdsDbSubnetGroup(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The friendly name to identify the DB subnet group.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the DB subnet group.')
    description = models.TextField(blank=True, null=True, db_comment='Provides the description of the DB subnet group.')
    status = models.TextField(blank=True, null=True, db_comment='Provides the status of the DB subnet group.')
    vpc_id = models.TextField(blank=True, null=True, db_comment='Provides the VpcId of the DB subnet group.')
    subnets = models.JSONField(blank=True, null=True, db_comment='A list of Subnet elements.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags attached to the DB subnet group.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_rds_db_subnet_group'
        db_table_comment = 'AWS RDS DB Subnet Group'


class AwsRdsReservedDbInstance(models.Model):
    reserved_db_instance_id = models.TextField(blank=True, null=True, db_comment='The unique identifier for the reservation.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the reserved DB Instance.')
    reserved_db_instances_offering_id = models.TextField(blank=True, null=True, db_comment='The offering identifier.')
    state = models.TextField(blank=True, null=True, db_comment='The state of the reserved DB instance.')
    class_field = models.TextField(db_column='class', blank=True, null=True, db_comment='The DB instance class for the reserved DB instance.')  # Field renamed because it was a Python reserved word.
    currency_code = models.TextField(blank=True, null=True, db_comment='The currency code for the reserved DB instance.')
    db_instance_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of reserved DB instances.')
    duration = models.BigIntegerField(blank=True, null=True, db_comment='The duration of the reservation in seconds.')
    fixed_price = models.FloatField(blank=True, null=True, db_comment='The fixed price charged for this reserved DB instance.')
    lease_id = models.TextField(blank=True, null=True, db_comment='The unique identifier for the lease associated with the reserved DB instance.')
    multi_az = models.BooleanField(blank=True, null=True, db_comment='Indicates if the reservation applies to Multi-AZ deployments.')
    offering_type = models.TextField(blank=True, null=True, db_comment='The offering type of this reserved DB instance.')
    product_description = models.TextField(blank=True, null=True, db_comment='The description of the reserved DB instance.')
    start_time = models.DateTimeField(blank=True, null=True, db_comment='The time the reservation started.')
    usage_price = models.FloatField(blank=True, null=True, db_comment='The hourly price charged for this reserved DB instance.')
    recurring_charges = models.JSONField(blank=True, null=True, db_comment='The recurring price charged to run this reserved DB instance.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_rds_reserved_db_instance'
        db_table_comment = 'AWS RDS Reserved DB Instance'


class AwsRedshiftCluster(models.Model):
    cluster_identifier = models.TextField(blank=True, null=True, db_comment='The unique identifier of the cluster.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the cluster.')
    cluster_namespace_arn = models.TextField(blank=True, null=True, db_comment='The namespace Amazon Resource Name (ARN) of the cluster.')
    allow_version_upgrade = models.BooleanField(blank=True, null=True, db_comment='A boolean value that, if true, indicates that major version upgrades will be applied automatically to the cluster during the maintenance window.')
    automated_snapshot_retention_period = models.BigIntegerField(blank=True, null=True, db_comment='The number of days that automatic cluster snapshots are retained.')
    availability_zone = models.TextField(blank=True, null=True, db_comment='The name of the Availability Zone in which the cluster is located.')
    availability_zone_relocation_status = models.TextField(blank=True, null=True, db_comment='Describes the status of the Availability Zone relocation operation.')
    cluster_availability_status = models.TextField(blank=True, null=True, db_comment='The availability status of the cluster for queries.')
    cluster_create_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time that the cluster was created.')
    cluster_nodes = models.JSONField(blank=True, null=True, db_comment='The nodes in the cluster.')
    cluster_parameter_groups = models.JSONField(blank=True, null=True, db_comment='The list of cluster parameter groups that are associated with this cluster. Each parameter group in the list is returned with its status.')
    cluster_public_key = models.TextField(blank=True, null=True, db_comment='The public key for the cluster.')
    cluster_revision_number = models.TextField(blank=True, null=True, db_comment='The specific revision number of the database in the cluster.')
    cluster_security_groups = models.JSONField(blank=True, null=True, db_comment='A list of cluster security group that are associated with the cluster. Each security group is represented by an element that contains ClusterSecurityGroup.Name and ClusterSecurityGroup.Status subelements. Cluster security groups are used when the cluster is not created in an Amazon Virtual Private Cloud (VPC). Clusters that are created in a VPC use VPC security groups, which are listed by the VpcSecurityGroups parameter.')
    cluster_snapshot_copy_status = models.JSONField(blank=True, null=True, db_comment='A value that returns the destination region and retention period that are configured for cross-region snapshot copy.')
    cluster_status = models.TextField(blank=True, null=True, db_comment='The current state of the cluster.')
    cluster_subnet_group_name = models.TextField(blank=True, null=True, db_comment='The name of the subnet group that is associated with the cluster. This parameter is valid only when the cluster is in a VPC.')
    cluster_version = models.TextField(blank=True, null=True, db_comment='The version ID of the Amazon Redshift engine that is running on the cluster.')
    data_transfer_progress = models.JSONField(blank=True, null=True, db_comment='Describes the status of a cluster while it is in the process of resizing with an incremental resize.')
    db_name = models.TextField(blank=True, null=True, db_comment='The name of the initial database that was created when the cluster was created. This same name is returned for the life of the cluster. If an initial database was not specified, a database named devdev was created by default.')
    deferred_maintenance_windows = models.JSONField(blank=True, null=True, db_comment='Describes a group of DeferredMaintenanceWindow objects.')
    elastic_ip_status = models.JSONField(blank=True, null=True, db_comment='The status of the elastic IP (EIP) address.')
    elastic_resize_number_of_node_options = models.TextField(blank=True, null=True, db_comment='The number of nodes that you can resize the cluster to with the elastic resize method.')
    encrypted = models.BooleanField(blank=True, null=True, db_comment='A boolean value that, if true, indicates that data in the cluster is encrypted at rest.')
    endpoint = models.JSONField(blank=True, null=True, db_comment='The connection endpoint.')
    enhanced_vpc_routing = models.BooleanField(blank=True, null=True, db_comment='An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. If this option is true, enhanced VPC routing is enabled.')
    expected_next_snapshot_schedule_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time when the next snapshot is expected to be taken for clusters with a valid snapshot schedule and backups enabled.')
    expected_next_snapshot_schedule_time_status = models.TextField(blank=True, null=True, db_comment='The status of next expected snapshot for clusters having a valid snapshot schedule and backups enabled.')
    hsm_status = models.JSONField(blank=True, null=True, db_comment='A value that reports whether the Amazon Redshift cluster has finished applying any hardware security module (HSM) settings changes specified in a modify cluster command.')
    iam_roles = models.JSONField(blank=True, null=True, db_comment='A list of AWS Identity and Access Management (IAM) roles that can be used by the cluster to access other AWS services.')
    kms_key_id = models.TextField(blank=True, null=True, db_comment='The AWS Key Management Service (AWS KMS) key ID of the encryption key used to encrypt data in the cluster.')
    maintenance_track_name = models.TextField(blank=True, null=True, db_comment='The name of the maintenance track for the cluster.')
    manual_snapshot_retention_period = models.BigIntegerField(blank=True, null=True, db_comment="The default number of days to retain a manual snapshot. If the value is -1, the snapshot is retained indefinitely. This setting doesn't change the retention period of existing snapshots. The value must be either -1 or an integer between 1 and 3,653.")
    master_username = models.TextField(blank=True, null=True, db_comment='The master user name for the cluster. This name is used to connect to the database that is specified in the DBName parameter.')
    modify_status = models.TextField(blank=True, null=True, db_comment='The status of a modify operation, if any, initiated for the cluster.')
    next_maintenance_window_start_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time in UTC when system maintenance can begin.')
    node_type = models.TextField(blank=True, null=True, db_comment='The node type for the nodes in the cluster.')
    number_of_nodes = models.BigIntegerField(blank=True, null=True, db_comment='The number of compute nodes in the cluster.')
    pending_actions = models.JSONField(blank=True, null=True, db_comment='Cluster operations that are waiting to be started.')
    pending_modified_values = models.JSONField(blank=True, null=True, db_comment='A value that, if present, indicates that changes to the cluster are pending. Specific pending changes are identified by subelements.')
    preferred_maintenance_window = models.TextField(blank=True, null=True, db_comment='The weekly time range, in Universal Coordinated Time (UTC), during which system maintenance can occur.')
    publicly_accessible = models.BooleanField(blank=True, null=True, db_comment='A boolean value that, if true, indicates that the cluster can be accessed from a public network.')
    resize_info = models.JSONField(blank=True, null=True, db_comment='Describes a resize operation.')
    restore_status = models.JSONField(blank=True, null=True, db_comment='A value that describes the status of a cluster restore action. This parameter returns null if the cluster was not created by restoring a snapshot.')
    snapshot_schedule_identifier = models.TextField(blank=True, null=True, db_comment='A unique identifier for the cluster snapshot schedule.')
    snapshot_schedule_state = models.TextField(blank=True, null=True, db_comment='The current state of the cluster snapshot schedule.')
    vpc_id = models.TextField(blank=True, null=True, db_comment='The identifier of the VPC the cluster is in, if the cluster is in a VPC.')
    vpc_security_groups = models.JSONField(blank=True, null=True, db_comment='A list of Amazon Virtual Private Cloud (Amazon VPC) security groups that are associated with the cluster. This parameter is returned only if the cluster is in a VPC.')
    logging_status = models.JSONField(blank=True, null=True, db_comment='Describes the status of logging for a cluster.')
    scheduled_actions = models.JSONField(blank=True, null=True, db_comment='A list of scheduled actions for specified cluster.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='The list of tags for the cluster.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_redshift_cluster'
        db_table_comment = 'AWS Redshift Cluster'


class AwsRedshiftClusterMetricCpuUtilizationDaily(models.Model):
    cluster_identifier = models.TextField(blank=True, null=True, db_comment='The friendly name to identify the DB Instance.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_redshift_cluster_metric_cpu_utilization_daily'
        db_table_comment = 'AWS Redshift Cluster Cloudwatch Metrics - CPU Utilization (Daily)'


class AwsRedshiftEventSubscription(models.Model):
    cust_subscription_id = models.TextField(blank=True, null=True, db_comment='The name of the Amazon Redshift event notification subscription.')
    customer_aws_id = models.TextField(blank=True, null=True, db_comment='The AWS customer account associated with the Amazon Redshift event notification subscription.')
    enabled = models.BooleanField(blank=True, null=True, db_comment='A boolean value indicating whether the subscription is enabled or disabled')
    severity = models.TextField(blank=True, null=True, db_comment='The event severity specified in the Amazon Redshift event notification subscription.')
    sns_topic_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the Amazon SNS topic used by the event notification subscription.')
    source_type = models.TextField(blank=True, null=True, db_comment='The source type of the events returned by the Amazon Redshift event notification.')
    status = models.TextField(blank=True, null=True, db_comment='The status of the Amazon Redshift event notification subscription.')
    subscription_creation_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time the Amazon Redshift event notification subscription was created.')
    event_categories_list = models.JSONField(blank=True, null=True, db_comment='The list of Amazon Redshift event categories specified in the event notification subscription.')
    source_ids_list = models.JSONField(blank=True, null=True, db_comment='A list of the sources that publish events to the Amazon Redshift event notification subscription.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='The list of tags for the event subscription.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_redshift_event_subscription'
        db_table_comment = 'AWS Redshift Event Subscription'


class AwsRedshiftParameterGroup(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the cluster parameter group.')
    description = models.TextField(blank=True, null=True, db_comment='The description of the parameter group.')
    family = models.TextField(blank=True, null=True, db_comment='The name of the cluster parameter group family that this cluster parameter group is compatible with.')
    parameters = models.JSONField(blank=True, null=True, db_comment='A list of Parameter instances. Each instance lists the parameters of one cluster parameter group.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the parameter group.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_redshift_parameter_group'
        db_table_comment = 'AWS Redshift Parameter Group'


class AwsRedshiftSnapshot(models.Model):
    snapshot_identifier = models.TextField(blank=True, null=True, db_comment='The unique identifier of the cluster.')
    cluster_identifier = models.TextField(blank=True, null=True, db_comment='The identifier of the cluster for which the snapshot was taken.')
    snapshot_type = models.TextField(blank=True, null=True, db_comment='The snapshot type.')
    actual_incremental_backup_size_in_mega_bytes = models.FloatField(blank=True, null=True, db_comment='The size of the incremental backup.')
    availability_zone = models.TextField(blank=True, null=True, db_comment='The Availability Zone in which the cluster was created.')
    backup_progress_in_mega_bytes = models.FloatField(db_column='backup_progress_in_mega-bytes', blank=True, null=True, db_comment='The number of megabytes that have been transferred to the snapshot backup.')  # Field renamed to remove unsuitable characters.
    cluster_create_time = models.DateTimeField(blank=True, null=True, db_comment='The time (UTC) when the cluster was originally created.')
    cluster_version = models.TextField(blank=True, null=True, db_comment='The version ID of the Amazon Redshift engine that is running on the cluster.')
    current_backup_rate_in_mega_bytes_per_second = models.FloatField(blank=True, null=True, db_comment='The number of megabytes per second being transferred to the snapshot backup.')
    db_name = models.TextField(blank=True, null=True, db_comment='The name of the database that was created when the cluster was created.')
    elapsed_time_in_seconds = models.TextField(blank=True, null=True, db_comment='The amount of time an in-progress snapshot backup has been running, or the amount of time it took a completed backup to finish.')
    encrypted = models.BooleanField(blank=True, null=True, db_comment='If true, the data in the snapshot is encrypted at rest.')
    encrypted_with_hsm = models.BooleanField(blank=True, null=True, db_comment='A boolean that indicates whether the snapshot data is encrypted using the HSM keys of the source cluster.')
    engine_full_version = models.TextField(blank=True, null=True, db_comment='The cluster version of the cluster used to create the snapshot.')
    enhanced_vpc_routing = models.BooleanField(blank=True, null=True, db_comment='An option that specifies whether to create the cluster with enhanced VPC routing enabled.')
    estimated_seconds_to_completion = models.TextField(blank=True, null=True, db_comment='The estimate of the time remaining before the snapshot backup will complete.')
    kms_key_id = models.TextField(blank=True, null=True, db_comment='The AWS KMS key ID of the encryption key that was used to encrypt data in the cluster from which the snapshot was taken.')
    maintenance_track_name = models.TextField(blank=True, null=True, db_comment='The name of the maintenance track for the snapshot.')
    manual_snapshot_remaining_days = models.BigIntegerField(blank=True, null=True, db_comment='The number of days until a manual snapshot will pass its retention period.')
    manual_snapshot_retention_period = models.BigIntegerField(blank=True, null=True, db_comment='The number of days that a manual snapshot is retained.')
    master_username = models.TextField(blank=True, null=True, db_comment='The master user name for the cluster.')
    node_type = models.TextField(blank=True, null=True, db_comment='The node type of the nodes in the cluster.')
    number_of_nodes = models.BigIntegerField(blank=True, null=True, db_comment='The number of nodes in the cluster.')
    owner_account = models.TextField(blank=True, null=True, db_comment='The AWS customer account used to create or copy the snapshot.')
    port = models.BigIntegerField(blank=True, null=True, db_comment='The port that the cluster is listening on.')
    snapshot_create_time = models.DateTimeField(blank=True, null=True, db_comment='The time (in UTC format) when Amazon Redshift began the snapshot.')
    snapshot_retention_start_time = models.DateTimeField(blank=True, null=True, db_comment='A timestamp representing the start of the retention period for the snapshot.')
    source_region = models.TextField(blank=True, null=True, db_comment='The source region from which the snapshot was copied.')
    status = models.TextField(blank=True, null=True, db_comment='The snapshot status.')
    total_backup_size_in_mega_bytes = models.FloatField(blank=True, null=True, db_comment='The size of the complete set of backup data that would be used to restore the cluster.')
    vpc_id = models.TextField(blank=True, null=True, db_comment='The VPC identifier of the cluster if the snapshot is from a cluster in a VPC.')
    accounts_with_restore_access = models.JSONField(blank=True, null=True, db_comment='A list of the AWS customer accounts authorized to restore the snapshot.')
    restorable_node_types = models.JSONField(blank=True, null=True, db_comment='The list of node types that this cluster snapshot is able to restore into.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='The list of tags for the cluster.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_redshift_snapshot'
        db_table_comment = 'AWS Redshift Snapshot'


class AwsRedshiftSubnetGroup(models.Model):
    cluster_subnet_group_name = models.TextField(blank=True, null=True, db_comment='The name of the cluster subnet group.')
    subnet_group_status = models.TextField(blank=True, null=True, db_comment='The status of the cluster subnet group.')
    description = models.TextField(blank=True, null=True, db_comment='The description of the cluster subnet group.')
    vpc_id = models.TextField(blank=True, null=True, db_comment='The VPC ID of the cluster subnet group.')
    subnets = models.JSONField(blank=True, null=True, db_comment='A list of the VPC Subnet elements.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags attached to the subnet group.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_redshift_subnet_group'
        db_table_comment = 'AWS Redshift Subnet Group'


class AwsRedshiftserverlessNamespace(models.Model):
    namespace_name = models.TextField(blank=True, null=True, db_comment='The name of the namespace.')
    namespace_id = models.TextField(blank=True, null=True, db_comment='The unique identifier of the namespace.')
    namespace_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) that links to the namespace.')
    status = models.TextField(blank=True, null=True, db_comment='The status of the namespace.')
    admin_username = models.TextField(blank=True, null=True, db_comment='The username of the administrator for the first database created in the namespace.')
    creation_date = models.DateTimeField(blank=True, null=True, db_comment='The creation date of the namespace.')
    db_name = models.TextField(blank=True, null=True, db_comment='The name of the first database created in the namespace.')
    default_iam_role_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the IAM role to set as a default in the namespace.')
    kms_key_id = models.TextField(blank=True, null=True, db_comment='The ID of the Amazon Web Services Key Management Service key used to encrypt your data.')
    iam_roles = models.JSONField(blank=True, null=True, db_comment='A list of IAM roles to associate with the namespace.')
    log_exports = models.JSONField(blank=True, null=True, db_comment='The types of logs the namespace can export. Available export types are User log, Connection log, and User activity log.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='The list of tags for the namespace.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_redshiftserverless_namespace'
        db_table_comment = 'AWS Redshift Serverless Namespace'


class AwsRedshiftserverlessWorkgroup(models.Model):
    workgroup_name = models.TextField(blank=True, null=True, db_comment='The name of the workgroup.')
    workgroup_id = models.TextField(blank=True, null=True, db_comment='The unique identifier of the workgroup.')
    workgroup_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) that links to the workgroup.')
    status = models.TextField(blank=True, null=True, db_comment='The status of the workgroup.')
    base_capacity = models.BigIntegerField(blank=True, null=True, db_comment='The base data warehouse capacity of the workgroup in Redshift Processing Units (RPUs).')
    creation_date = models.DateTimeField(blank=True, null=True, db_comment='The creation date of the workgroup.')
    enhanced_vpc_routing = models.BooleanField(blank=True, null=True, db_comment='The value that specifies whether to enable enhanced virtual private cloud (VPC) routing, which forces Amazon Redshift Serverless to route traffic through your VPC.')
    namespace_name = models.TextField(blank=True, null=True, db_comment='The namespace the workgroup is associated with.')
    publicly_accessible = models.BooleanField(blank=True, null=True, db_comment='A value that specifies whether the workgroup can be accessible from a public network.')
    config_parameters = models.JSONField(blank=True, null=True, db_comment='An array of parameters to set for finer control over a database.')
    endpoint = models.JSONField(blank=True, null=True, db_comment='The endpoint that is created from the workgroup.')
    security_group_ids = models.JSONField(blank=True, null=True, db_comment='An array of security group IDs to associate with the workgroup.')
    subnet_ids = models.JSONField(blank=True, null=True, db_comment='An array of subnet IDs the workgroup is associated with.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='The list of tags for the workgroup.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_redshiftserverless_workgroup'
        db_table_comment = 'AWS Redshift Serverless Workgroup'


class AwsRegion(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the region')
    opt_in_status = models.TextField(blank=True, null=True, db_comment='The Region opt-in status. The possible values are opt-in-not-required, opted-in, and not-opted-in')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_region'
        db_table_comment = 'AWS Region'


class AwsResourceExplorerIndex(models.Model):
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon resource name (ARN) of the index.')
    type = models.TextField(blank=True, null=True, db_comment='The type of index. It can be one of the following values: LOCAL, AGGREGATOR.')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the index exists.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_resource_explorer_index'
        db_table_comment = 'AWS Resource Explorer Index'
# Unable to inspect table 'aws_resource_explorer_search'
# The error was: rpc error: code = Unknown desc = aws: Aggregator index not found in account 730335309881. Please create an aggregator index or specify "view_arn".


class AwsResourceExplorerSupportedResourceType(models.Model):
    resource_type = models.TextField(blank=True, null=True, db_comment='The unique identifier of the resource type.')
    service = models.TextField(blank=True, null=True, db_comment='The Amazon Web Service that is associated with the resource type. This is the primary service that lets you create and interact with resources of this type.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_resource_explorer_supported_resource_type'
        db_table_comment = 'AWS Resource Explorer Supported Resource Type'


class AwsRoute53Domain(models.Model):
    domain_name = models.TextField(blank=True, null=True, db_comment='The name of the domain.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the domain.')
    abuse_contact_email = models.TextField(blank=True, null=True, db_comment='Email address to contact to report incorrect contact information for a domain,to report that the domain is being used to send spam, to report that someone is cyber squatting on a domain name, or report some other type of abuse.')
    abuse_contact_phone = models.TextField(blank=True, null=True, db_comment='Phone number for reporting abuse.')
    admin_privacy = models.BooleanField(blank=True, null=True, db_comment='Specifies whether contact information is concealed from WHOIS queries.')
    auto_renew = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the domain is automatically renewed upon expiration.')
    creation_date = models.DateTimeField(blank=True, null=True, db_comment='The date when the domain was created as found in the response to a WHOIS query.')
    expiration_date = models.DateTimeField(blank=True, null=True, db_comment='The date when the registration for the domain is set to expire. The date and time is in Unix time format and Coordinated Universal time (UTC).')
    registrant_privacy = models.BooleanField(blank=True, null=True, db_comment='Specifies whether contact information is concealed from WHOIS queries.')
    registrar_name = models.TextField(blank=True, null=True, db_comment='Name of the registrar of the domain as identified in the registry. Domains with a .com, .net, or .org TLD are registered by Amazon Registrar.')
    registrar_url = models.TextField(blank=True, null=True, db_comment='Web address of the registrar.')
    registry_domain_id = models.TextField(blank=True, null=True, db_comment='Reserved for future use.')
    reseller = models.TextField(blank=True, null=True, db_comment='Reseller of the domain. Domains registered or transferred using Route 53 domains will have Amazon as the reseller.')
    tech_privacy = models.BooleanField(blank=True, null=True, db_comment='Specifies whether contact information is concealed from WHOIS queries.')
    transfer_lock = models.BooleanField(blank=True, null=True, db_comment='Indicates whether a domain is locked from unauthorized transfer to another party.')
    updated_date = models.DateTimeField(blank=True, null=True, db_comment='The last updated date of the domain as found in the response to a WHOIS query.The date and time is in Unix time format and Coordinated Universal time (UTC).')
    who_is_server = models.TextField(blank=True, null=True, db_comment='The fully qualified name of the WHOIS server that can answer the WHOIS query for the domain.')
    nameservers = models.JSONField(blank=True, null=True, db_comment='The name of the domain.')
    registrant_contact = models.JSONField(blank=True, null=True, db_comment='Provides details about the domain registrant.')
    status_list = models.JSONField(blank=True, null=True, db_comment='An array of domain name status codes, also known as Extensible Provisioning Protocol (EPP) status codes.')
    tech_contact = models.JSONField(blank=True, null=True, db_comment='Provides details about the domain technical contact.')
    admin_contact = models.JSONField(blank=True, null=True, db_comment='Provides details about the domain administrative contact.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_route53_domain'
        db_table_comment = 'AWS Route53 Domain'


class AwsRoute53HealthCheck(models.Model):
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The identifier that Amazon Route 53 assigned to the health check.')
    caller_reference = models.TextField(blank=True, null=True, db_comment='A unique string that you specified when you created the health check.')
    health_check_version = models.BigIntegerField(blank=True, null=True, db_comment='The version of the health check.')
    linked_service_principal = models.TextField(blank=True, null=True, db_comment='If the health check was created by another service, the service that created the resource.')
    linked_service_description = models.TextField(blank=True, null=True, db_comment='If the health check was created by another service, an configurationtional description that can be provided by the other service.')
    cloud_watch_alarm_configuration = models.JSONField(blank=True, null=True, db_comment='A complex type that contains information about the CloudWatch alarm that Amazon Route 53 is monitoring for this health check.')
    health_check_config = models.JSONField(blank=True, null=True, db_comment='A complex type that contains detailed information about one health check.')
    health_check_status = models.JSONField(blank=True, null=True, db_comment='A list that contains one HealthCheckObservation element for each Amazon Route 53 health checker that is reporting a status about the health check endpoint.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_route53_health_check'
        db_table_comment = 'AWS Route53 Health Check'


class AwsRoute53QueryLog(models.Model):
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The ID for a configuration for DNS query logging.')
    hosted_zone_id = models.TextField(blank=True, null=True, db_comment='The ID of the hosted zone that CloudWatch Logs is logging queries for.')
    cloud_watch_logs_log_group_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the CloudWatch Logs log group that Amazon Route 53 is publishing logs to.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_route53_query_log'
        db_table_comment = 'AWS Route53 Query Logging Configuration'


class AwsRoute53Record(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the record.')
    zone_id = models.TextField(blank=True, null=True, db_comment='The ID of the hosted zone to contain this record.')
    type = models.TextField(blank=True, null=True, db_comment='The record type. Valid values are A, AAAA, CAA, CNAME, MX, NAPTR, NS, PTR, SOA, SPF, SRV and TXT.')
    alias_target = models.JSONField(blank=True, null=True, db_comment='Alias resource record sets only: Information about the AWS resource, such as a CloudFront distribution or an Amazon S3 bucket, that you want to route traffic to.')
    failover = models.TextField(blank=True, null=True, db_comment='Failover resource record sets only: To configure failover, you add the Failover element to two resource record sets. For one resource record set, you specify PRIMARY as the value for Failover; for the other resource record set, you specify SECONDARY. In addition, you include the HealthCheckId element and specify the health check that you want Amazon Route 53 to perform for each resource record set.')
    geo_location = models.JSONField(blank=True, null=True, db_comment='Geolocation resource record sets only: A complex type that lets you control how Amazon Route 53 responds to DNS queries based on the geographic origin of the query. For example, if you want all queries from Africa to be routed to a web server with an IP address of 192.0.2.111, create a resource record set with a Type of A and a ContinentCode of AF.')
    health_check_id = models.TextField(blank=True, null=True, db_comment='The health check the record should be associated with.')
    multi_value_answer = models.BooleanField(blank=True, null=True, db_comment='Multivalue answer resource record sets only: To route traffic approximately randomly to multiple resources, such as web servers, create one multivalue answer record for each resource and specify true for MultiValueAnswer.')
    latency_region = models.TextField(blank=True, null=True, db_comment='An AWS region from which to measure latency')
    records = models.JSONField(blank=True, null=True, db_comment='If the health check or hosted zone was created by another service, an optional description that can be provided by the other service.')
    set_identifier = models.TextField(blank=True, null=True, db_comment='Unique identifier to differentiate records with routing policies from one another.')
    ttl = models.TextField(blank=True, null=True, db_comment='The resource record cache time to live (TTL), in seconds.')
    traffic_policy_instance_id = models.TextField(blank=True, null=True, db_comment='The ID of the traffic policy instance that Route 53 created this resource record set for.')
    weight = models.BigIntegerField(blank=True, null=True, db_comment="Weighted resource record sets only: Among resource record sets that have the same combination of DNS name and type, a value that determines the proportion of DNS queries that Amazon Route 53 responds to using the current resource record set. Route 53 calculates the sum of the weights for the resource record sets that have the same combination of DNS name and type. Route 53 then responds to queries based on the ratio of a resource's weight to the total.")
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_route53_record'
        db_table_comment = 'AWS Route53 Record'


class AwsRoute53ResolverEndpoint(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name that you assigned to the Resolver endpoint when you submitted a CreateResolverEndpoint.')
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The ID of the Resolver endpoint.')
    arn = models.TextField(blank=True, null=True, db_comment='The ARN (Amazon Resource Name) for the Resolver endpoint.')
    creation_time = models.TextField(blank=True, null=True, db_comment='The date and time that the endpoint was created, in Unix time format and Coordinated Universal Time (UTC).')
    creator_request_id = models.TextField(blank=True, null=True, db_comment='A unique string that identifies the request that created the Resolver endpoint.The CreatorRequestId allows failed requests to be retried without the risk of executing the operation twice.')
    direction = models.TextField(blank=True, null=True, db_comment='Indicates whether the Resolver endpoint allows inbound or outbound DNS queries.')
    host_vpc_id = models.TextField(blank=True, null=True, db_comment='The ID of the VPC that you want to create the Resolver endpoint in.')
    ip_address_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of IP addresses that the Resolver endpoint can use for DNS queries.')
    modification_time = models.TextField(blank=True, null=True, db_comment='The date and time that the endpoint was last modified, in Unix time format and Coordinated Universal Time (UTC).')
    status = models.TextField(blank=True, null=True, db_comment='A code that specifies the current status of the Resolver endpoint.')
    status_message = models.TextField(blank=True, null=True, db_comment='A detailed description of the status of the Resolver endpoint.')
    ip_addresses = models.JSONField(blank=True, null=True, db_comment='Information about the IP addresses in your VPC that DNS queries originate from (for outbound endpoints) or that you forward DNS queries to (for inbound endpoints).')
    security_group_ids = models.JSONField(blank=True, null=True, db_comment='The ID of one or more security groups that control access to this VPC.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the Resolver endpoint.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_route53_resolver_endpoint'
        db_table_comment = 'AWS Route53 Resolver Endpoint'


class AwsRoute53ResolverQueryLogConfig(models.Model):
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The ID for the query logging configuration.')
    name = models.TextField(blank=True, null=True, db_comment='The name of the query logging configuration.')
    arn = models.TextField(blank=True, null=True, db_comment='The ARN (Amazon Resource Name) for the query logging configuration.')
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time that the query logging configuration was created, in Unix time format and Coordinated Universal Time (UTC).')
    status = models.TextField(blank=True, null=True, db_comment='The status of the specified query logging configuration. Valid values include CREATING|CREATED|DELETING|FAILED.')
    association_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of VPCs that are associated with the query logging configuration.')
    ip_address_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of IP addresses that you have associated with the Resolver endpoint.')
    creator_request_id = models.TextField(blank=True, null=True, db_comment='A unique string that identifies the request that created the query logging configuration.')
    destination_arn = models.TextField(blank=True, null=True, db_comment='The ARN of the resource that you want Resolver to send query logs: an Amazon S3 bucket, a CloudWatch Logs log group, or a Kinesis Data Firehose delivery stream.')
    owner_id = models.TextField(blank=True, null=True, db_comment='The Amazon Web Services account ID for the account that created the query logging configuration.')
    share_status = models.TextField(blank=True, null=True, db_comment='An indication of whether the query logging configuration is shared with other Amazon Web Services accounts, or was shared with the current account by another Amazon Web Services account. Sharing is configured through Resource Access Manager (RAM).')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_route53_resolver_query_log_config'
        db_table_comment = 'AWS Route53 Resolver Query Logging Configuration'


class AwsRoute53ResolverRule(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name for the Resolver rule, which you specified when you created the Resolver rule.')
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The ID that Resolver assigned to the Resolver rule when you created it.')
    arn = models.TextField(blank=True, null=True, db_comment='The ARN (Amazon Resource Name) for the Resolver rule specified by Id.')
    status = models.TextField(blank=True, null=True, db_comment='A code that specifies the current status of the Resolver rule.')
    creator_request_id = models.TextField(blank=True, null=True, db_comment='A unique string that you specified when you created the Resolver rule. CreatorRequestId identifies the request and allows failed requests to be retried without the risk of executing the operation twice.')
    domain_name = models.TextField(blank=True, null=True, db_comment='DNS queries for this domain name are forwarded to the IP addresses that are specified in TargetIps.')
    owner_id = models.TextField(blank=True, null=True, db_comment='When a rule is shared with another AWS account, the account ID of the account that the rule is shared with.')
    resolver_endpoint_id = models.TextField(blank=True, null=True, db_comment='The ID of the endpoint that the rule is associated with.')
    rule_type = models.TextField(blank=True, null=True, db_comment='When you want to forward DNS queries for specified domain name to resolvers on your network, specify FORWARD.When you have a forwarding rule to forward DNS queries for a domain to your network and you want Resolver to process queries for a subdomain of that domain, specify SYSTEM.')
    share_status = models.TextField(blank=True, null=True, db_comment='Indicates whether the rules is shared and, if so, whether the current account is sharing the rule with another account, or another account is sharing the rule with the current account.')
    status_message = models.TextField(blank=True, null=True, db_comment='A detailed description of the status of a Resolver rule.')
    creation_time = models.TextField(blank=True, null=True, db_comment='The date and time that the Resolver rule was created, in Unix time format and Coordinated Universal Time (UTC).')
    modification_time = models.TextField(blank=True, null=True, db_comment='The date and time that the Resolver rule was last updated, in Unix time format and Coordinated Universal Time (UTC).')
    resolver_rule_associations = models.JSONField(blank=True, null=True, db_comment='The associations that were created between Resolver rules and VPCs using the current AWS account, and that match the specified filters, if any.')
    target_ips = models.JSONField(blank=True, null=True, db_comment='An array that contains the IP addresses and ports that an outbound endpoint forwards DNS queries to. Typically, these are the IP addresses of DNS resolvers on your network. Specify IPv4 addresses. IPv6 is not supported.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the Resolver Rule.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_route53_resolver_rule'
        db_table_comment = 'AWS Route53 Resolver Rule'


class AwsRoute53TrafficPolicy(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name that you specified when traffic policy was created.')
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The ID that Amazon Route 53 assigned to a traffic policy when it was created.')
    type = models.TextField(blank=True, null=True, db_comment='The DNS type of the resource record sets that Amazon Route 53 creates when you use a traffic policy to create a traffic policy instance.')
    version = models.BigIntegerField(blank=True, null=True, db_comment='The version number that Amazon Route 53 assigns to a traffic policy.')
    comment = models.TextField(blank=True, null=True, db_comment='The comment that you specified when traffic policy was created.')
    document = models.JSONField(blank=True, null=True, db_comment='The definition of a traffic policy in JSON format.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_route53_traffic_policy'
        db_table_comment = 'AWS Route53 Traffic Policy'


class AwsRoute53TrafficPolicyInstance(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The DNS name for which Amazon Route 53 responds to queries.')
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The id that Amazon Route 53 assigned to the new traffic policy instance.')
    hosted_zone_id = models.TextField(blank=True, null=True, db_comment='The id of the hosted zone that Amazon Route 53 created resource record sets in.')
    message = models.TextField(blank=True, null=True, db_comment='If State is Failed, an explanation of the reason for the failure.')
    state = models.TextField(blank=True, null=True, db_comment='Current state of the instance.')
    traffic_policy_id = models.TextField(blank=True, null=True, db_comment='The ID of the traffic policy that Amazon Route 53 used to create resource record sets in the specified hosted zone.')
    traffic_policy_type = models.TextField(blank=True, null=True, db_comment='The DNS type that Amazon Route 53 assigned to all of the resource record sets that it created for this traffic policy instance.')
    traffic_policy_version = models.BigIntegerField(blank=True, null=True, db_comment='The version of the traffic policy that Amazon Route 53 used to create resource record sets in the specified hosted zone.')
    ttl = models.BigIntegerField(blank=True, null=True, db_comment='The TTL that Amazon Route 53 assigned to all of the resource record sets that it created in the specified hosted zone.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_route53_traffic_policy_instance'
        db_table_comment = 'AWS Route53 Traffic Policy Instance'


class AwsRoute53VpcAssociationAuthorization(models.Model):
    hosted_zone_id = models.TextField(blank=True, null=True, db_comment='The ID of the hosted zone for which you want a list of VPCs that can be associated with the hosted zone.')
    vpc_id = models.TextField(blank=True, null=True, db_comment='(Private hosted zones only) The ID of an Amazon VPC.')
    vpc_region = models.TextField(blank=True, null=True, db_comment='(Private hosted zones only) The region that an Amazon VPC was created in.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_route53_vpc_association_authorization'
        db_table_comment = 'AWS Route53 VPC Association Authorization'


class AwsRoute53Zone(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the domain. For public hosted zones, this is the name that is registered with your DNS registrar.')
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The ID that Amazon Route 53 assigned to the hosted zone when it was created.')
    caller_reference = models.TextField(blank=True, null=True, db_comment='The value that you specified for CallerReference when you created the hosted zone.')
    comment = models.TextField(blank=True, null=True, db_comment='A comment for the zone.')
    private_zone = models.BooleanField(blank=True, null=True, db_comment='If true, the zone is Private hosted Zone, otherwise it is public.')
    linked_service_principal = models.TextField(blank=True, null=True, db_comment='If the health check or hosted zone was created by another service, the service that created the resource.')
    linked_service_description = models.TextField(blank=True, null=True, db_comment='If the health check or hosted zone was created by another service, an optional description that can be provided by the other service.')
    resource_record_set_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of resource record sets in the hosted zone.')
    query_logging_configs = models.JSONField(blank=True, null=True, db_comment='A list of configuration for DNS query logging that is associated with the current AWS account.')
    dnssec_key_signing_keys = models.JSONField(blank=True, null=True, db_comment='The key-signing keys (KSKs) in AWS account.')
    dnssec_status = models.JSONField(blank=True, null=True, db_comment='The status of DNSSEC.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    vpcs = models.JSONField(blank=True, null=True, db_comment='The list of VPCs that are authorized to be associated with the specified hosted zone.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    resource_record_set_limit = models.JSONField(blank=True, null=True, db_comment='The maximum number of resource record sets allowed in the hosted zone.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_route53_zone'
        db_table_comment = 'AWS Route53 Zone'


class AwsS3AccessPoint(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='Specifies the name of the access point.')
    access_point_arn = models.TextField(blank=True, null=True, db_comment='Amazon Resource Name (ARN) of the access point.')
    bucket_name = models.TextField(blank=True, null=True, db_comment='The name of the bucket associated with this access point.')
    access_point_policy_is_public = models.BooleanField(blank=True, null=True, db_comment='Indicates whether this access point policy is public, or not.')
    block_public_acls = models.BooleanField(blank=True, null=True, db_comment='Specifies whether Amazon S3 should block public access control lists (ACLs) for buckets in this account.')
    block_public_policy = models.BooleanField(blank=True, null=True, db_comment='Specifies whether Amazon S3 should block public bucket policies for buckets in this account.')
    ignore_public_acls = models.BooleanField(blank=True, null=True, db_comment='Specifies whether Amazon S3 should ignore public ACLs for buckets in this account.')
    restrict_public_buckets = models.BooleanField(blank=True, null=True, db_comment='Specifies whether Amazon S3 should restrict public bucket policies for buckets in this account.')
    creation_date = models.DateTimeField(blank=True, null=True, db_comment='The date and time when the specified access point was created.')
    network_origin = models.TextField(blank=True, null=True, db_comment="Indicates whether this access point allows access from the public internet. If VpcConfiguration is specified for this access point, then NetworkOrigin is VPC, and the access point doesn't allow access from the public internet.")
    vpc_id = models.TextField(blank=True, null=True, db_comment='Specifies the VPC ID from which the access point will only allow connections.')
    policy = models.JSONField(blank=True, null=True, db_comment='The access point policy associated with the specified access point.')
    policy_std = models.JSONField(blank=True, null=True, db_comment='Contains the policy in a canonical form for easier searching.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_s3_access_point'
        db_table_comment = 'AWS S3 Access Point'


class AwsS3AccountSettings(models.Model):
    block_public_acls = models.BooleanField(blank=True, null=True, db_comment='Specifies whether Amazon S3 should block public access control lists (ACLs) for this bucket and objects in this bucket')
    block_public_policy = models.BooleanField(blank=True, null=True, db_comment='Specifies whether Amazon S3 should block public bucket policies for this bucket. If TRUE it causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access')
    ignore_public_acls = models.BooleanField(blank=True, null=True, db_comment='Specifies whether Amazon S3 should ignore public ACLs for this bucket and objects in this bucket. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on this bucket and objects in this bucket')
    restrict_public_buckets = models.BooleanField(blank=True, null=True, db_comment='Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this element to TRUE restricts access to this bucket to only AWS service principals and authorized users within this account if the bucket has a public policy')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_s3_account_settings'
        db_table_comment = 'AWS S3 Account Block Public Access Settings'


class AwsS3Bucket(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The user friendly name of the bucket.')
    arn = models.TextField(blank=True, null=True, db_comment='The ARN of the AWS S3 Bucket.')
    creation_date = models.DateTimeField(blank=True, null=True, db_comment='The date and time when bucket was created.')
    bucket_policy_is_public = models.BooleanField(blank=True, null=True, db_comment='The policy status for an Amazon S3 bucket, indicating whether the bucket is public.')
    versioning_enabled = models.BooleanField(blank=True, null=True, db_comment='The versioning state of a bucket.')
    versioning_mfa_delete = models.BooleanField(blank=True, null=True, db_comment='The MFA Delete status of the versioning state.')
    block_public_acls = models.BooleanField(blank=True, null=True, db_comment='Specifies whether Amazon S3 should block public access control lists (ACLs) for this bucket and objects in this bucket.')
    block_public_policy = models.BooleanField(blank=True, null=True, db_comment='Specifies whether Amazon S3 should block public bucket policies for this bucket. If TRUE it causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access.')
    ignore_public_acls = models.BooleanField(blank=True, null=True, db_comment='Specifies whether Amazon S3 should ignore public ACLs for this bucket and objects in this bucket. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on this bucket and objects in this bucket.')
    restrict_public_buckets = models.BooleanField(blank=True, null=True, db_comment='Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this element to TRUE restricts access to this bucket to only AWS service principals and authorized users within this account if the bucket has a public policy.')
    event_notification_configuration = models.JSONField(blank=True, null=True, db_comment='A container for specifying the notification configuration of the bucket. If this element is empty, notifications are turned off for the bucket.')
    server_side_encryption_configuration = models.JSONField(blank=True, null=True, db_comment='The default encryption configuration for an Amazon S3 bucket.')
    acl = models.JSONField(blank=True, null=True, db_comment='The access control list (ACL) of a bucket.')
    lifecycle_rules = models.JSONField(blank=True, null=True, db_comment='The lifecycle configuration information of the bucket.')
    logging = models.JSONField(blank=True, null=True, db_comment='The logging status of a bucket and the permissions users have to view and modify that status.')
    object_lock_configuration = models.JSONField(blank=True, null=True, db_comment="The specified bucket's object lock configuration.")
    object_ownership_controls = models.JSONField(blank=True, null=True, db_comment='The Ownership Controls for an Amazon S3 bucket.')
    policy = models.JSONField(blank=True, null=True, db_comment='The resource IAM access document for the bucket.')
    policy_std = models.JSONField(blank=True, null=True, db_comment='Contains the policy in a canonical form for easier searching.')
    replication = models.JSONField(blank=True, null=True, db_comment='The replication configuration of a bucket.')
    website_configuration = models.JSONField(blank=True, null=True, db_comment='The website configuration information of the bucket.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to bucket.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_s3_bucket'
        db_table_comment = 'AWS S3 Bucket'


class AwsS3BucketIntelligentTieringConfiguration(models.Model):
    bucket_name = models.TextField(blank=True, null=False, primary_key=True, db_comment='The name of the container bucket of this object.')
    id = models.TextField(blank=True, null=True, db_comment='The ID used to identify the S3 Intelligent-Tiering configuration.')
    status = models.TextField(blank=True, null=True, db_comment='Specifies the status of the configuration.')
    tierings = models.JSONField(blank=True, null=True, db_comment='Specifies the S3 Intelligent-Tiering storage class tier of the configuration.')
    filter = models.JSONField(blank=True, null=True, db_comment="Specifies a bucket filter. The configuration only includes objects that meet the filter's criteria.")
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_s3_bucket_intelligent_tiering_configuration'
        db_table_comment = 'AWS S3 Bucket Intelligent Tiering Configuration'


class AwsS3MultiRegionAccessPoint(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the Multi-Region Access Point.')
    alias = models.TextField(blank=True, null=True, db_comment='The alias for the Multi-Region Access Point.')
    created_at = models.DateTimeField(blank=True, null=True, db_comment='When the Multi-Region Access Point create request was received.')
    status = models.TextField(blank=True, null=True, db_comment='The current status of the Multi-Region Access Point. CREATING and DELETING are temporary states that exist while the request is propagating and being completed.')
    public_access_block = models.JSONField(blank=True, null=True, db_comment='The PublicAccessBlock configuration that you want to apply to this Amazon S3 account.')
    regions = models.JSONField(blank=True, null=True, db_comment='A collection of the Regions and buckets associated with the Multi-Region Access Point.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_s3_multi_region_access_point'
        db_table_comment = 'AWS S3 Multi Region Access Point'
# Unable to inspect table 'aws_s3_object'
# The error was: rpc error: code = Internal desc = aws: rpc error: code = Internal desc = 'List' call for table 'aws_s3_object' is missing 1 required qual: column:'bucket_name' operator: =

# Unable to inspect table 'aws_s3_object_version'
# The error was: rpc error: code = Internal desc = aws: rpc error: code = Internal desc = 'List' call for table 'aws_s3_object_version' is missing 1 required qual: column:'bucket_name' operator: =



class AwsSagemakerApp(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The app name.')
    app_type = models.TextField(blank=True, null=True, db_comment='The type of app.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the app.')
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='A timestamp that indicates when the app was created.')
    domain_id = models.TextField(blank=True, null=True, db_comment='The domain ID.')
    failure_reason = models.TextField(blank=True, null=True, db_comment='The failure reason.')
    last_health_check_timestamp = models.DateTimeField(blank=True, null=True, db_comment='The timestamp of the last health check.')
    last_user_activity_timestamp = models.DateTimeField(blank=True, null=True, db_comment='The timestamp of the last user activity.')
    status = models.TextField(blank=True, null=True, db_comment='The status of the app.')
    user_profile_name = models.TextField(blank=True, null=True, db_comment='The user profile name.')
    resource_spec = models.JSONField(blank=True, null=True, db_comment='The instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_sagemaker_app'
        db_table_comment = 'AWS Sagemaker App'


class AwsSagemakerDomain(models.Model):
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The domain ID.')
    name = models.TextField(blank=True, null=True, db_comment='The domain name.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the domain.')
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='A timestamp that indicates when the domain was created.')
    app_network_access_type = models.TextField(blank=True, null=True, db_comment='Specifies the VPC used for non-EFS traffic.')
    app_security_group_management = models.TextField(blank=True, null=True, db_comment='The entity that creates and manages the required security groups for inter-app communication in VPCOnly mode.')
    auth_mode = models.TextField(blank=True, null=True, db_comment="The domain's authentication mode.")
    failure_reason = models.TextField(blank=True, null=True, db_comment="The domain's failure reason.")
    home_efs_file_system_id = models.TextField(blank=True, null=True, db_comment='The ID of the Amazon Elastic File System (EFS) managed by this domain.')
    kms_key_id = models.TextField(blank=True, null=True, db_comment='The Amazon Web Services KMS customer managed key used to encrypt the EFS volume attached to the domain.')
    last_modified_time = models.DateTimeField(blank=True, null=True, db_comment="The domain's last modified time.")
    security_group_id_for_domain_boundary = models.TextField(blank=True, null=True, db_comment='The ID of the security group that authorizes traffic between the RSessionGateway apps and the RStudioServerPro app.')
    single_sign_on_managed_application_instance_id = models.TextField(blank=True, null=True, db_comment='The SSO managed application instance ID.')
    status = models.TextField(blank=True, null=True, db_comment="The domain's status.")
    tags_src = models.JSONField(blank=True, null=True, db_comment='The list of tags for the domain.')
    url = models.TextField(blank=True, null=True, db_comment="The domain's URL.")
    default_user_settings = models.JSONField(blank=True, null=True, db_comment='Settings which are applied to UserProfiles in this domain if settings are not explicitly specified in a given UserProfile.')
    domain_settings = models.JSONField(blank=True, null=True, db_comment='A collection of domain settings.')
    subnet_ids = models.JSONField(blank=True, null=True, db_comment='The VPC subnets that studio uses for communication.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_sagemaker_domain'
        db_table_comment = 'AWS Sagemaker Domain'


class AwsSagemakerEndpointConfiguration(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the endpoint configuration.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the endpoint configuration.')
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='A timestamp that shows when the endpoint configuration was created.')
    kms_key_id = models.TextField(blank=True, null=True, db_comment='AWS KMS key ID Amazon SageMaker uses to encrypt data when storing it on the ML storage volume attached to the instance.')
    data_capture_config = models.JSONField(blank=True, null=True, db_comment='Specifies the parameters to capture input/output of Sagemaker models endpoints.')
    production_variants = models.JSONField(blank=True, null=True, db_comment='An array of ProductionVariant objects, one for each model that you want to host at this endpoint.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='The list of tags for the endpoint configuration.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_sagemaker_endpoint_configuration'
        db_table_comment = 'AWS Sagemaker Endpoint Configuration'


class AwsSagemakerModel(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the model.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the model.')
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='A timestamp that indicates when the model was created.')
    enable_network_isolation = models.BooleanField(blank=True, null=True, db_comment='If True, no inbound or outbound network calls can be made to or from the model container.')
    execution_role_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the IAM role that you specified for the model.')
    containers = models.JSONField(blank=True, null=True, db_comment='The containers in the inference pipeline.')
    inference_execution_config = models.JSONField(blank=True, null=True, db_comment='Specifies details of how containers in a multi-container endpoint are called.')
    primary_container = models.JSONField(blank=True, null=True, db_comment='The location of the primary inference code, associated artifacts, and custom environment map that the inference code uses when it is deployed in production.')
    vpc_config = models.JSONField(blank=True, null=True, db_comment='A VpcConfig object that specifies the VPC that this model has access to.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='The list of tags for the model.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_sagemaker_model'
        db_table_comment = 'AWS Sagemaker Model'


class AwsSagemakerNotebookInstance(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the notebook instance.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the notebook instance.')
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='A timestamp that shows when the notebook instance was created.')
    default_code_repository = models.TextField(blank=True, null=True, db_comment='The Git repository associated with the notebook instance as its default code repository.')
    direct_internet_access = models.TextField(blank=True, null=True, db_comment='Describes whether Amazon SageMaker provides internet access to the notebook instance.')
    failure_reason = models.TextField(blank=True, null=True, db_comment='If status is Failed, the reason it failed.')
    instance_type = models.TextField(blank=True, null=True, db_comment='The type of ML compute instance that the notebook instance is running on.')
    kms_key_id = models.TextField(blank=True, null=True, db_comment='The AWS KMS key ID Amazon SageMaker uses to encrypt data when storing it on the ML storage volume attached to the instance.')
    last_modified_time = models.DateTimeField(blank=True, null=True, db_comment='A timestamp that shows when the notebook instance was last modified.')
    network_interface_id = models.TextField(blank=True, null=True, db_comment='The network interface IDs that Amazon SageMaker created at the time of creating the instance.')
    notebook_instance_lifecycle_config_name = models.TextField(blank=True, null=True, db_comment='The name of a notebook instance lifecycle configuration associated with this notebook instance.')
    notebook_instance_status = models.TextField(blank=True, null=True, db_comment='The status of the notebook instance.')
    role_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the IAM role associated with the instance.')
    root_access = models.TextField(blank=True, null=True, db_comment='Whether root access is enabled or disabled for users of the notebook instance.Lifecycle configurations need root access to be able to set up a notebook instance')
    subnet_id = models.TextField(blank=True, null=True, db_comment='The ID of the VPC subnet.')
    url = models.TextField(blank=True, null=True, db_comment='The URL that you use to connect to the Jupyter notebook that is running in your notebook instance.')
    volume_size_in_gb = models.BigIntegerField(blank=True, null=True, db_comment='The size, in GB, of the ML storage volume attached to the notebook instance.')
    accelerator_types = models.JSONField(blank=True, null=True, db_comment='The list of the Elastic Inference (EI) instance types associated with this notebook instance.')
    additional_code_repositories = models.JSONField(blank=True, null=True, db_comment='An array of up to three Git repositories associated with the notebook instance.')
    security_groups = models.JSONField(blank=True, null=True, db_comment='The IDs of the VPC security groups.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='The list of tags for the notebook instance.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_sagemaker_notebook_instance'
        db_table_comment = 'AWS Sagemaker Notebook Instance'


class AwsSagemakerTrainingJob(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the training job.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the training job.')
    training_job_status = models.TextField(blank=True, null=True, db_comment='The status of the training job.')
    auto_ml_job_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of an AutoML job.')
    billable_time_in_seconds = models.BigIntegerField(blank=True, null=True, db_comment='The billable time in seconds. Billable time refers to the absolute wall-clock time.')
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='A timestamp that shows when the training job was created.')
    enable_managed_spot_training = models.BooleanField(blank=True, null=True, db_comment='A Boolean indicating whether managed spot training is enabled or not.')
    enable_network_isolation = models.BooleanField(blank=True, null=True, db_comment='Specifies enable network isolation for training jobs.')
    enable_inter_container_traffic_encryption = models.BooleanField(blank=True, null=True, db_comment='To encrypt all communications between ML compute instances in distributed training, choose True.')
    failure_reason = models.TextField(blank=True, null=True, db_comment='If the training job failed, the reason it failed.')
    labeling_job_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the Amazon SageMaker Ground Truth labeling job that created the transform or training job.')
    last_modified_time = models.DateTimeField(blank=True, null=True, db_comment='Timestamp when the training job was last modified.')
    profiling_status = models.TextField(blank=True, null=True, db_comment='Profiling status of a training job.')
    role_arn = models.TextField(blank=True, null=True, db_comment='The AWS Identity and Access Management (IAM) role configured for the training job.')
    secondary_status = models.TextField(blank=True, null=True, db_comment='Provides detailed information about the state of the training job.')
    training_end_time = models.DateTimeField(blank=True, null=True, db_comment='A timestamp that shows when the training job ended.')
    training_start_time = models.DateTimeField(blank=True, null=True, db_comment='Indicates the time when the training job starts on training instances.')
    training_time_in_seconds = models.BigIntegerField(blank=True, null=True, db_comment='The training time in seconds.')
    tuning_job_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the associated hyperparameter tuning job if the training job was launched by a hyperparameter tuning job.')
    algorithm_specification = models.JSONField(blank=True, null=True, db_comment='Information about the algorithm used for training, and algorithm metadata.')
    checkpoint_config = models.JSONField(blank=True, null=True, db_comment='Contains information about the output location for managed spot training checkpoint data.')
    debug_hook_config = models.JSONField(blank=True, null=True, db_comment='Configuration information for the Debugger hook parameters, metric and tensor collections, and storage paths.')
    debug_rule_configurations = models.JSONField(blank=True, null=True, db_comment='Configuration information for Debugger rules for debugging output tensors.')
    debug_rule_evaluation_statuses = models.JSONField(blank=True, null=True, db_comment='Evaluation status of Debugger rules for debugging on a training job.')
    environment = models.JSONField(blank=True, null=True, db_comment='The environment variables to set in the Docker container.')
    experiment_config = models.JSONField(blank=True, null=True, db_comment='Associates a SageMaker job as a trial component with an experiment and trial.')
    final_metric_data_list = models.JSONField(blank=True, null=True, db_comment='A collection of MetricData objects that specify the names, values, and dates and times that the training algorithm emitted to Amazon CloudWatch.')
    hyper_parameters = models.JSONField(blank=True, null=True, db_comment='Algorithm-specific parameters.')
    input_data_config = models.JSONField(blank=True, null=True, db_comment='An array of Channel objects that describes each data input channel.')
    model_artifacts = models.JSONField(blank=True, null=True, db_comment='Information about the Amazon S3 location that is configured for storing model artifacts.')
    output_data_config = models.JSONField(blank=True, null=True, db_comment='The S3 path where model artifacts that you configured when creating the job are stored.')
    profiler_config = models.JSONField(blank=True, null=True, db_comment='Configuration information for Debugger system monitoring,framework profiling and storage paths.')
    profiler_rule_configurations = models.JSONField(blank=True, null=True, db_comment='Configuration information for Debugger rules for profiling system and framework metrics.')
    profiler_rule_evaluation_statuses = models.JSONField(blank=True, null=True, db_comment='Evaluation status of Debugger rules for profiling on a training job.')
    resource_config = models.JSONField(blank=True, null=True, db_comment='Resources, including ML compute instances and ML storage volumes, that are configured for model training.')
    secondary_status_transitions = models.JSONField(blank=True, null=True, db_comment='A history of all of the secondary statuses that the training job has transitioned through.')
    stopping_condition = models.JSONField(blank=True, null=True, db_comment='Specifies a limit to how long a model training job can run.')
    tensor_board_output_config = models.JSONField(blank=True, null=True, db_comment='Configuration of storage locations for the Debugger TensorBoard output data.')
    vpc_config = models.JSONField(blank=True, null=True, db_comment='A VpcConfig object that specifies the VPC that this training job has access to.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the training job.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_sagemaker_training_job'
        db_table_comment = 'AWS SageMaker Training Job'


class AwsSecretsmanagerSecret(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The friendly name of the secret.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the secret.')
    created_date = models.DateTimeField(blank=True, null=True, db_comment='The date and time when a secret was created.')
    description = models.TextField(blank=True, null=True, db_comment='The user-provided description of the secret.')
    kms_key_id = models.TextField(blank=True, null=True, db_comment='The ARN or alias of the AWS KMS customer master key (CMK) used to encrypt the SecretString and SecretBinary fields in each version of the secret.')
    deleted_date = models.DateTimeField(blank=True, null=True, db_comment='The date and time the deletion of the secret occurred.')
    last_accessed_date = models.DateTimeField(blank=True, null=True, db_comment='The last date that this secret was accessed.')
    last_changed_date = models.DateTimeField(blank=True, null=True, db_comment='The last date and time that this secret was modified in any way.')
    last_rotated_date = models.DateTimeField(blank=True, null=True, db_comment='The most recent date and time that the Secrets Manager rotation process was successfully completed.')
    owning_service = models.TextField(blank=True, null=True, db_comment='Returns the name of the service that created the secret.')
    primary_region = models.TextField(blank=True, null=True, db_comment='The Region where Secrets Manager originated the secret.')
    policy = models.JSONField(blank=True, null=True, db_comment='A JSON-formatted string that describes the permissions that are associated with the attached secret.')
    policy_std = models.JSONField(blank=True, null=True, db_comment='Contains the permissions that are associated with the attached secret in a canonical form for easier searching.')
    replication_status = models.JSONField(blank=True, null=True, db_comment='Describes a list of replication status objects as InProgress, Failed or InSync.')
    rotation_enabled = models.BooleanField(blank=True, null=True, db_comment='Indicates whether automatic, scheduled rotation is enabled for this secret.')
    rotation_lambda_arn = models.TextField(blank=True, null=True, db_comment='The ARN of an AWS Lambda function invoked by Secrets Manager to rotate and expire the secret either automatically per the schedule or manually by a call to RotateSecret.')
    rotation_rules = models.JSONField(blank=True, null=True, db_comment='A structure that defines the rotation configuration for the secret.')
    secret_versions_to_stages = models.JSONField(blank=True, null=True, db_comment='A list of all of the currently assigned SecretVersionStage staging labels and the SecretVersionId attached to each one.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='The list of user-defined tags associated with the secret.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_secretsmanager_secret'
        db_table_comment = 'AWS Secrets Manager Secret'


class AwsSecurityhubActionTarget(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the action target.')
    arn = models.TextField(blank=True, null=True, db_comment='The ARN for the target action.')
    description = models.TextField(blank=True, null=True, db_comment='The description of the target action.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_securityhub_action_target'
        db_table_comment = 'AWS Security Hub Action Target'


class AwsSecurityhubFinding(models.Model):
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The security findings provider-specific identifier for a finding.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the finding.')
    company_name = models.TextField(blank=True, null=True, db_comment='The name of the company for the product that generated the finding.')
    confidence = models.BigIntegerField(blank=True, null=True, db_comment="A finding's confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify.")
    created_at = models.DateTimeField(blank=True, null=True, db_comment='Indicates when the security-findings provider created the potential security issue that a finding captured.')
    compliance_status = models.TextField(blank=True, null=True, db_comment='The result of a compliance standards check.')
    updated_at = models.DateTimeField(blank=True, null=True, db_comment='Indicates when the security-findings provider last updated the finding record.')
    criticality = models.BigIntegerField(blank=True, null=True, db_comment='The level of importance assigned to the resources associated with the finding.')
    description = models.TextField(blank=True, null=True, db_comment="A finding's description.")
    first_observed_at = models.DateTimeField(blank=True, null=True, db_comment='Indicates when the security-findings provider first observed the potential security issue that a finding captured.')
    generator_id = models.TextField(blank=True, null=True, db_comment='The identifier for the solution-specific component (a discrete unit of logic) that generated a finding.')
    last_observed_at = models.DateTimeField(blank=True, null=True, db_comment='Indicates when the security-findings provider most recently observed the potential security issue that a finding captured.')
    product_arn = models.TextField(blank=True, null=True, db_comment='The ARN generated by Security Hub that uniquely identifies a product that generates findings.')
    product_name = models.TextField(blank=True, null=True, db_comment='The name of the product that generated the finding.')
    record_state = models.TextField(blank=True, null=True, db_comment='The record state of a finding.')
    schema_version = models.TextField(blank=True, null=True, db_comment='The schema version that a finding is formatted for.')
    source_url = models.TextField(blank=True, null=True, db_comment="A URL that links to a page about the current finding in the security-findings provider's solution.")
    verification_state = models.TextField(blank=True, null=True, db_comment='Indicates the veracity of a finding.')
    workflow_state = models.TextField(blank=True, null=True, db_comment='[DEPRECATED] This column has been deprecated and will be removed in a future release. The workflow state of a finding.')
    workflow_status = models.TextField(blank=True, null=True, db_comment='The workflow status of a finding. Possible values are NEW, NOTIFIED, SUPPRESSED, RESOLVED.')
    standards_control_arn = models.TextField(blank=True, null=True, db_comment='The ARN of the security standard control.')
    action = models.JSONField(blank=True, null=True, db_comment='Provides details about an action that affects or that was taken on a resource.')
    compliance = models.JSONField(blank=True, null=True, db_comment='This data type is exclusive to findings that are generated as the result of a check run against a specific rule in a supported security standard, such as CIS Amazon Web Services Foundations.')
    finding_provider_fields = models.JSONField(blank=True, null=True, db_comment='In a BatchImportFindings request, finding providers use FindingProviderFields to provide and update their own values for confidence, criticality, related findings, severity, and types.')
    malware = models.JSONField(blank=True, null=True, db_comment='A list of malware related to a finding.')
    network = models.JSONField(blank=True, null=True, db_comment='The details of network-related information about a finding.')
    network_path = models.JSONField(blank=True, null=True, db_comment='Provides information about a network path that is relevant to a finding. Each entry under NetworkPath represents a component of that path.')
    note = models.JSONField(blank=True, null=True, db_comment='A user-defined note added to a finding.')
    patch_summary = models.JSONField(blank=True, null=True, db_comment='Provides an overview of the patch compliance status for an instance against a selected compliance standard.')
    process = models.JSONField(blank=True, null=True, db_comment='The details of process-related information about a finding.')
    product_fields = models.JSONField(blank=True, null=True, db_comment="A data type where security-findings providers can include additional solution-specific details that aren't part of the defined AwsSecurityFinding format.")
    related_findings = models.JSONField(blank=True, null=True, db_comment='A list of related findings.')
    remediation = models.JSONField(blank=True, null=True, db_comment='A data type that describes the remediation options for a finding.')
    resources = models.JSONField(blank=True, null=True, db_comment='A set of resource data types that describe the resources that the finding refers to.')
    severity = models.JSONField(blank=True, null=True, db_comment="A finding's severity.")
    threat_intel_indicators = models.JSONField(blank=True, null=True, db_comment='Threat intelligence details related to a finding.')
    user_defined_fields = models.JSONField(blank=True, null=True, db_comment='A list of name/value string pairs associated with the finding.')
    vulnerabilities = models.JSONField(blank=True, null=True, db_comment='Provides a list of vulnerabilities associated with the findings.')
    source_account_id = models.TextField(blank=True, null=True, db_comment='The account id where the affected resource lives.')
    title = models.TextField(blank=True, null=True, db_comment="A finding's title.")
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_securityhub_finding'
        db_table_comment = 'AWS Security Hub Finding'


class AwsSecurityhubFindingAggregator(models.Model):
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the finding aggregator.')
    finding_aggregation_region = models.TextField(blank=True, null=True, db_comment='The aggregation Region.')
    region_linking_mode = models.TextField(blank=True, null=True, db_comment='Indicates whether to link all Regions, all Regions except for a list of excluded Regions, or a list of included Regions.')
    regions = models.JSONField(blank=True, null=True, db_comment='The list of excluded Regions or included Regions.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_securityhub_finding_aggregator'
        db_table_comment = 'AWS Security Hub Finding Aggregator'


class AwsSecurityhubHub(models.Model):
    hub_arn = models.TextField(blank=True, null=True, db_comment='The ARN of the Hub resource that was retrieved.')
    administrator_account = models.JSONField(blank=True, null=True, db_comment='Provides the details for the Security Hub administrator account for the current member account.')
    auto_enable_controls = models.BooleanField(blank=True, null=True, db_comment='Whether to automatically enable new controls when they are added to standards that are enabled.')
    subscribed_at = models.DateTimeField(blank=True, null=True, db_comment='The date and time when Security Hub was enabled in the account.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment="The title of hub. This is a constant value 'default'")
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_securityhub_hub'
        db_table_comment = 'AWS Security Hub'


class AwsSecurityhubInsight(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of a Security Hub insight.')
    arn = models.TextField(blank=True, null=True, db_comment='The ARN of a Security Hub insight.')
    group_by_attribute = models.TextField(blank=True, null=True, db_comment="The grouping attribute for the insight's findings. Indicates how to group the matching findings,and identifies the type of item that the insight applies to. For example, if an insight is grouped by resource identifier, then the insight produces a list of resource identifiers.")
    filters = models.JSONField(blank=True, null=True, db_comment='One or more attributes used to filter the findings included in the insight. The insight only includes findings that match the criteria defined in the filters.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_securityhub_insight'
        db_table_comment = 'AWS Securityhub Insight'


class AwsSecurityhubMember(models.Model):
    member_account_id = models.TextField(blank=True, null=True, db_comment='The Amazon Web Services account ID of the member account.')
    administrator_id = models.TextField(blank=True, null=True, db_comment='The Amazon Web Services account ID of the Security Hub administrator account associated with this member account.')
    email = models.TextField(blank=True, null=True, db_comment='The email address of the member account.')
    invited_at = models.DateTimeField(blank=True, null=True, db_comment='A timestamp for the date and time when the invitation was sent to the member account.')
    master_id = models.TextField(blank=True, null=True, db_comment='The Amazon Web Services account ID of the Security Hub administrator account associated with this member account.')
    member_status = models.TextField(blank=True, null=True, db_comment='The status of the relationship between the member account and its administrator account.')
    updated_at = models.DateTimeField(blank=True, null=True, db_comment='The timestamp for the date and time when the member account was updated.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_securityhub_member'
        db_table_comment = 'AWS Securityhub Member'


class AwsSecurityhubProduct(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the product.')
    product_arn = models.TextField(blank=True, null=True, db_comment='The ARN assigned to the product.')
    activation_url = models.TextField(blank=True, null=True, db_comment='The URL used to activate the product.')
    company_name = models.TextField(blank=True, null=True, db_comment='The name of the company that provides the product.')
    description = models.TextField(blank=True, null=True, db_comment='A description of the product.')
    marketplace_url = models.TextField(blank=True, null=True, db_comment='The URL for the page that contains more information about the product.')
    categories = models.JSONField(blank=True, null=True, db_comment='The categories assigned to the product.')
    integration_types = models.JSONField(blank=True, null=True, db_comment='The types of integration that the product supports.')
    product_subscription_resource_policy = models.JSONField(blank=True, null=True, db_comment='The resource policy associated with the product.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_securityhub_product'
        db_table_comment = 'AWS Securityhub Product'


class AwsSecurityhubStandardsControl(models.Model):
    control_id = models.TextField(blank=True, null=True, db_comment='The identifier of the security standard control.')
    arn = models.TextField(blank=True, null=True, db_comment='The ARN of the security standard control.')
    control_status = models.TextField(blank=True, null=True, db_comment='The current status of the security standard control. Indicates whether the control is enabled or disabled. Security Hub does not check against disabled controls.')
    severity_rating = models.TextField(blank=True, null=True, db_comment='The severity of findings generated from this security standard control.')
    control_status_updated_at = models.DateTimeField(blank=True, null=True, db_comment='The date and time that the status of the security standard control was most recently updated.')
    description = models.TextField(blank=True, null=True, db_comment='The longer description of the security standard control.')
    disabled_reason = models.TextField(blank=True, null=True, db_comment='The reason provided for the most recent change in status for the control.')
    remediation_url = models.TextField(blank=True, null=True, db_comment='A link to remediation information for the control in the Security Hub user documentation.')
    related_requirements = models.JSONField(blank=True, null=True, db_comment='The list of requirements that are related to this control.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_securityhub_standards_control'
        db_table_comment = 'AWS Security Hub Standards Control'


class AwsSecurityhubStandardsSubscription(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the standard.')
    standards_arn = models.TextField(blank=True, null=True, db_comment='The ARN of a standard.')
    description = models.TextField(blank=True, null=True, db_comment='The description of the standard.')
    enabled_by_default = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the standard is enabled by default.')
    standards_status = models.TextField(blank=True, null=True, db_comment='The status of the standard subscription.')
    standards_status_reason_code = models.TextField(blank=True, null=True, db_comment='The reason code that represents the reason for the current status of a standard subscription.')
    standards_subscription_arn = models.TextField(blank=True, null=True, db_comment='The ARN of a resource that represents your subscription to a supported standard.')
    standards_input = models.JSONField(blank=True, null=True, db_comment='A key-value pair of input for the standard.')
    standards_managed_by = models.JSONField(blank=True, null=True, db_comment='Provides details about the management of a security standard.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_securityhub_standards_subscription'
        db_table_comment = 'AWS Security Hub Standards Subscription'
# Unable to inspect table 'aws_securitylake_data_lake'
# The error was: rpc error: code = Unknown desc = aws: operation error SecurityLake: ListDataLakes, https response error StatusCode: 403, RequestID: 902fa747-d145-4a01-b61b-fcaa0f40bed1, AccessDeniedException: The request failed because your account is not authorized to perform this operation.
# Unable to inspect table 'aws_securitylake_subscriber'
# The error was: rpc error: code = Unknown desc = aws: operation error SecurityLake: ListSubscribers, https response error StatusCode: 403, RequestID: 37da9ac4-90ca-4015-a12d-13769252202d, AccessDeniedException: The request failed because your account is not authorized to perform this operation.


class AwsServerlessapplicationrepositoryApplication(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the application.')
    arn = models.TextField(blank=True, null=True, db_comment='The application Amazon Resource Name (ARN).')
    author = models.TextField(blank=True, null=True, db_comment='The name of the author publishing the app.')
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time this resource was created.')
    description = models.TextField(blank=True, null=True, db_comment='The description of the application.')
    home_page_url = models.TextField(blank=True, null=True, db_comment='A URL with more information about the application.')
    is_verified_author = models.BooleanField(blank=True, null=True, db_comment='Whether the author is verified.')
    license_url = models.TextField(blank=True, null=True, db_comment='The URL of the license.')
    readme_url = models.TextField(blank=True, null=True, db_comment='The URL of the Readme.')
    spdx_license_id = models.TextField(blank=True, null=True, db_comment='A valid identifier from https://spdx.org/licenses/.')
    verified_author_url = models.TextField(blank=True, null=True, db_comment='The URL of the verified author.')
    labels = models.JSONField(blank=True, null=True, db_comment='Labels to improve discovery of apps in search results.')
    statements = models.JSONField(blank=True, null=True, db_comment='The contents of the access policy.')
    version = models.JSONField(blank=True, null=True, db_comment='The policy statement of the application.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_serverlessapplicationrepository_application'
        db_table_comment = 'AWS Serverless Application Repository Application'


class AwsServiceDiscoveryInstance(models.Model):
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The ID of the instance.')
    service_id = models.TextField(blank=True, null=True, db_comment='The ID of the service.')
    ec2_instance_id = models.TextField(blank=True, null=True, db_comment='The Amazon EC2 instance ID for the instance. When the AWS_EC2_INSTANCE_ID attribute is specified, then the AWS_INSTANCE_IPV4 attribute contains the primary private IPv4 address.')
    alias_dns_name = models.TextField(blank=True, null=True, db_comment="For an alias record that routes traffic to an Elastic Load Balancing load balancer, the DNS name that's associated with the load balancer.")
    instance_cname = models.TextField(blank=True, null=True, db_comment='A CNAME record, the domain name that Route 53 returns in response to DNS queries (for example, example.com ).')
    init_health_status = models.TextField(blank=True, null=True, db_comment="If the service configuration includes HealthCheckCustomConfig, you can optionally use AWS_INIT_HEALTH_STATUS to specify the initial status of the custom health check, HEALTHY or UNHEALTHY. If you don't specify a value for AWS_INIT_HEALTH_STATUS, the initial status is HEALTHY.")
    instance_ipv4 = models.GenericIPAddressField(blank=True, null=True, db_comment='For an A record, the IPv4 address that Route 53 returns in response to DNS queries.')
    instance_ipv6 = models.GenericIPAddressField(blank=True, null=True, db_comment='For an AAAA record, the IPv6 address that Route 53 returns in response to DNS queries.')
    instance_port = models.BigIntegerField(blank=True, null=True, db_comment='For an SRV record, the value that Route 53 returns for the port. In addition, if the service includes HealthCheckConfig, the port on the endpoint that Route 53 sends requests to.')
    attributes = models.JSONField(blank=True, null=True, db_comment='Attributes of the instance.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_service_discovery_instance'
        db_table_comment = 'AWS Service Discovery Instance'


class AwsServiceDiscoveryNamespace(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the namespace.')
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The ID of the namespace.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) that Cloud Map assigns to the namespace when you create it.')
    create_date = models.DateTimeField(blank=True, null=True, db_comment='The date and time that the namespace was created.')
    description = models.TextField(blank=True, null=True, db_comment='A description for the namespace.')
    service_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of services that were created using the namespace.')
    type = models.TextField(blank=True, null=True, db_comment='The type of the namespace, either public or private.')
    dns_properties = models.JSONField(blank=True, null=True, db_comment='A complex type that contains the ID for the Route 53 hosted zone that Cloud Map creates when you create a namespace.')
    http_properties = models.JSONField(blank=True, null=True, db_comment='A complex type that contains the name of an HTTP namespace.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='Information about the tags associated with the namespace.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_service_discovery_namespace'
        db_table_comment = 'AWS Service Discovery Namespace'


class AwsServiceDiscoveryService(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the service.')
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The ID that Cloud Map assigned to the service when you created it.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) that Cloud Map assigns to the service when you create it.')
    create_date = models.DateTimeField(blank=True, null=True, db_comment='The date and time that the service was created.')
    description = models.TextField(blank=True, null=True, db_comment='A description for the service.')
    namespace_id = models.TextField(blank=True, null=True, db_comment='The ID of the namespace.')
    instance_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of instances that are currently associated with the service.')
    type = models.TextField(blank=True, null=True, db_comment='Describes the systems that can be used to discover the service instances. DNS_HTTP The service instances can be discovered using either DNS queries or the DiscoverInstances API operation. HTTP The service instances can only be discovered using the DiscoverInstances API operation. DNS Reserved.')
    routing_policy = models.TextField(blank=True, null=True, db_comment='The routing policy that you want to apply to all Route 53 DNS records that Cloud Map creates when you register an instance and specify this service.')
    dns_records = models.JSONField(blank=True, null=True, db_comment='An array that contains one DnsRecord object for each Route 53 DNS record that you want Cloud Map to create when you register an instance.')
    health_check_config = models.JSONField(blank=True, null=True, db_comment='Public DNS and HTTP namespaces only. Settings for an optional health check. If you specify settings for a health check, Cloud Map associates the health check with the records that you specify in DnsConfig.')
    health_check_custom_config = models.JSONField(blank=True, null=True, db_comment='Information about an optional custom health check.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='Information about the tags associated with the namespace.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_service_discovery_service'
        db_table_comment = 'AWS Service Discovery Service'


class AwsServicecatalogPortfolio(models.Model):
    display_name = models.TextField(blank=True, null=True, db_comment='The name to use for display purposes.')
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The portfolio identifier.')
    arn = models.TextField(blank=True, null=True, db_comment='The ARN assigned to the portfolio.')
    created_time = models.DateTimeField(blank=True, null=True, db_comment='The UTC timestamp of the creation time.')
    description = models.TextField(blank=True, null=True, db_comment='The description of the portfolio.')
    provider_name = models.TextField(blank=True, null=True, db_comment='The name of the portfolio provider.')
    budgets = models.JSONField(blank=True, null=True, db_comment='Information about the associated budgets.')
    tag_options = models.JSONField(blank=True, null=True, db_comment='Information about the tag options associated with the portfolio.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='Information about the tags associated with the portfolio.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_servicecatalog_portfolio'
        db_table_comment = 'AWS Service Catalog Portfolio'


class AwsServicecatalogProduct(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the product.')
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The product view identifier.')
    product_id = models.TextField(blank=True, null=True, db_comment='The product identifier.')
    source_product_id = models.TextField(blank=True, null=True, db_comment='The source product identifier.')
    distributor = models.TextField(blank=True, null=True, db_comment='The distributor of the product. Contact the product administrator for the significance of this value.')
    accept_language = models.TextField(blank=True, null=True, db_comment='The language code.')
    full_text_search = models.TextField(blank=True, null=True, db_comment='The full text for the product.')
    has_default_path = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the product has a default path. If the product does not have a default path, call ListLaunchPaths to disambiguate between paths.')
    owner = models.TextField(blank=True, null=True, db_comment='The owner of the product. Contact the product administrator for the significance of this value.')
    short_description = models.TextField(blank=True, null=True, db_comment='Short description of the product.')
    support_description = models.TextField(blank=True, null=True, db_comment='The description of the support for this product.')
    support_email = models.TextField(blank=True, null=True, db_comment='The email contact information to obtain support for this product.')
    support_url = models.TextField(blank=True, null=True, db_comment='The URL information to obtain support for this product.')
    type = models.TextField(blank=True, null=True, db_comment='The product type. Contact the product administrator for the significance of this value. If this value is MARKETPLACE, the product was created by Amazon Web Services Marketplace.')
    budgets = models.JSONField(blank=True, null=True, db_comment='Information about the associated budgets.')
    launch_paths = models.JSONField(blank=True, null=True, db_comment='Information about the associated launch paths.')
    provisioning_artifacts = models.JSONField(blank=True, null=True, db_comment='Information about the provisioning artifacts for the specified product.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_servicecatalog_product'
        db_table_comment = 'AWS Service Catalog Product'


class AwsServicecatalogProvisionedProduct(models.Model):
    arn = models.TextField(blank=True, null=True, db_comment='The ARN of the provisioned product.')
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The identifier of the provisioned product.')
    created_time = models.DateTimeField(blank=True, null=True, db_comment='The UTC time stamp of the creation time.')
    idempotency_token = models.TextField(blank=True, null=True, db_comment='A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.')
    last_provisioning_record_id = models.TextField(blank=True, null=True, db_comment='The record identifier of the last request performed on this provisioned product.')
    accept_language = models.TextField(blank=True, null=True, db_comment='The language code.')
    last_record_id = models.TextField(blank=True, null=True, db_comment='The record identifier of the last request performed on this provisioned product.')
    last_successful_provisioning_record_id = models.TextField(blank=True, null=True, db_comment='The record identifier of the last successful request performed on this provisioned product.')
    launch_role_arn = models.TextField(blank=True, null=True, db_comment='The ARN of the launch role associated with the provisioned product.')
    name = models.TextField(blank=True, null=True, db_comment='The user-friendly name of the provisioned product.')
    product_id = models.TextField(blank=True, null=True, db_comment='The product identifier. For example, prod-abcdzk7xy33qa.')
    provisioning_artifact_id = models.TextField(blank=True, null=True, db_comment='The identifier of the provisioning artifact. For example, pa-4abcdjnxjj6ne.')
    status = models.TextField(blank=True, null=True, db_comment='The current status of the provisioned product.')
    status_message = models.TextField(blank=True, null=True, db_comment='The current status message of the provisioned product.')
    type = models.TextField(blank=True, null=True, db_comment='The type of provisioned product. The supported values are CFN_STACK and CFN_STACKSET.')
    cloud_watch_dashboards = models.JSONField(blank=True, null=True, db_comment='Any CloudWatch dashboards that were created when provisioning the product.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_servicecatalog_provisioned_product'
        db_table_comment = 'AWS Service Catalog Provisioned Product'


class AwsServicequotasDefaultServiceQuota(models.Model):
    quota_name = models.TextField(blank=True, null=True, db_comment='The quota name.')
    quota_code = models.TextField(blank=True, null=True, db_comment='The quota code.')
    quota_arn = models.TextField(blank=True, null=True, db_comment='The arn of the service quota.')
    global_quota = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the quota is global.')
    service_name = models.TextField(blank=True, null=True, db_comment='The service name.')
    service_code = models.TextField(blank=True, null=True, db_comment='The service identifier.')
    adjustable = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the quota value can be increased.')
    unit = models.TextField(blank=True, null=True, db_comment='The unit of measurement.')
    value = models.BigIntegerField(blank=True, null=True, db_comment='The quota value.')
    error_reason = models.JSONField(blank=True, null=True, db_comment='The error code and error reason.')
    period = models.JSONField(blank=True, null=True, db_comment='The period of time for the quota.')
    usage_metric = models.JSONField(blank=True, null=True, db_comment='Information about the measurement.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_servicequotas_default_service_quota'
        db_table_comment = 'AWS Service Quotas Default Service Quota'


class AwsServicequotasService(models.Model):
    service_name = models.TextField(blank=True, null=True, db_comment='Specifies the service name.')
    service_code = models.TextField(blank=True, null=True, db_comment='Specifies the service identifier.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_servicequotas_service'
        db_table_comment = 'AWS Service Quotas Service'


class AwsServicequotasServiceQuota(models.Model):
    quota_name = models.TextField(blank=True, null=True, db_comment='The quota name.')
    quota_code = models.TextField(blank=True, null=True, db_comment='The quota code.')
    quota_arn = models.TextField(blank=True, null=True, db_comment='The arn of the service quota.')
    global_quota = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the quota is global.')
    service_name = models.TextField(blank=True, null=True, db_comment='The service name.')
    service_code = models.TextField(blank=True, null=True, db_comment='The service identifier.')
    adjustable = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the quota value can be increased.')
    unit = models.TextField(blank=True, null=True, db_comment='The unit of measurement.')
    value = models.BigIntegerField(blank=True, null=True, db_comment='The quota value.')
    error_reason = models.JSONField(blank=True, null=True, db_comment='The error code and error reason.')
    period = models.JSONField(blank=True, null=True, db_comment='The period of time for the quota.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='The list of tags associated with the service quota.')
    usage_metric = models.JSONField(blank=True, null=True, db_comment='Information about the measurement.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_servicequotas_service_quota'
        db_table_comment = 'AWS Service Quotas Service Quota'


class AwsServicequotasServiceQuotaChangeRequest(models.Model):
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The unique identifier.')
    case_id = models.TextField(blank=True, null=True, db_comment='The case ID.')
    status = models.TextField(blank=True, null=True, db_comment='The state of the quota increase request.')
    quota_name = models.TextField(blank=True, null=True, db_comment='The quota name.')
    quota_code = models.TextField(blank=True, null=True, db_comment='The quota code.')
    quota_arn = models.TextField(blank=True, null=True, db_comment='The arn of the service quota.')
    desired_value = models.FloatField(blank=True, null=True, db_comment='The increased value for the quota.')
    created = models.DateTimeField(blank=True, null=True, db_comment='The date and time when the quota increase request was received and the case ID was created.')
    global_quota = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the quota is global.')
    last_updated = models.DateTimeField(blank=True, null=True, db_comment='The date and time of the most recent change.')
    requester = models.TextField(blank=True, null=True, db_comment='The IAM identity of the requester.')
    service_name = models.TextField(blank=True, null=True, db_comment='The service name.')
    service_code = models.TextField(blank=True, null=True, db_comment='The service identifier.')
    unit = models.TextField(blank=True, null=True, db_comment='The unit of measurement.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='The list of tags associated with the change request.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_servicequotas_service_quota_change_request'
        db_table_comment = 'AWS Service Quotas Service Quota Change Request'


class AwsSesDomainIdentity(models.Model):
    identity = models.TextField(blank=True, null=True, db_comment='The domain identity.')
    arn = models.TextField(blank=True, null=True, db_comment='The ARN of the AWS SES identity.')
    verification_status = models.TextField(blank=True, null=True, db_comment='The verification status of the identity.')
    verification_token = models.TextField(blank=True, null=True, db_comment='The verification token for a domain identity.')
    dkim_attributes = models.JSONField(blank=True, null=True, db_comment='The DKIM attributes for an email address or a domain.')
    identity_mail_from_domain_attributes = models.JSONField(blank=True, null=True, db_comment='The custom MAIL FROM attributes for a list of identities.')
    notification_attributes = models.JSONField(blank=True, null=True, db_comment='Represents the notification attributes of an identity.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ses_domain_identity'
        db_table_comment = 'AWS SES Domain Identity'


class AwsSesEmailIdentity(models.Model):
    identity = models.TextField(blank=True, null=True, db_comment='The email identity.')
    arn = models.TextField(blank=True, null=True, db_comment='The ARN of the AWS SES identity.')
    verification_status = models.TextField(blank=True, null=True, db_comment='The verification status of the identity.')
    verification_token = models.TextField(blank=True, null=True, db_comment='[DEPRECATED] This column has been deprecated and will be removed in a future release. The verification token for a domain identity.')
    notification_attributes = models.JSONField(blank=True, null=True, db_comment='Represents the notification attributes of an identity.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ses_email_identity'
        db_table_comment = 'AWS SES Email Identity'


class AwsSfnStateMachine(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the state machine.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) that identifies the state machine.')
    status = models.TextField(blank=True, null=True, db_comment='The current status of the state machine.')
    type = models.TextField(blank=True, null=True, db_comment='The type of the state machine.')
    creation_date = models.DateTimeField(blank=True, null=True, db_comment='The date the state machine is created.')
    definition = models.TextField(blank=True, null=True, db_comment='The Amazon States Language definition of the state machine.')
    role_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the IAM role used when creating this state machine.')
    logging_configuration = models.JSONField(blank=True, null=True, db_comment='The LoggingConfiguration data type is used to set CloudWatch Logs options.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='The list of tags associated with the state machine.')
    tracing_configuration = models.JSONField(blank=True, null=True, db_comment='Selects whether AWS X-Ray tracing is enabled.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_sfn_state_machine'
        db_table_comment = 'AWS Step Functions State Machine'


class AwsSfnStateMachineExecution(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the execution.')
    execution_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) that identifies the execution.')
    status = models.TextField(blank=True, null=True, db_comment='The current status of the execution.')
    input = models.TextField(blank=True, null=True, db_comment='The string that contains the JSON input data of the execution.')
    output = models.TextField(blank=True, null=True, db_comment='The JSON output data of the execution.')
    start_date = models.DateTimeField(blank=True, null=True, db_comment='The date the execution started.')
    state_machine_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the executed state machine.')
    stop_date = models.DateTimeField(blank=True, null=True, db_comment='If the execution already ended, the date the execution stopped.')
    trace_header = models.TextField(blank=True, null=True, db_comment='The AWS X-Ray trace header that was passed to the execution.')
    input_details = models.JSONField(blank=True, null=True, db_comment='Provides details about execution input or output.')
    output_details = models.JSONField(blank=True, null=True, db_comment='Provides details about execution input or output.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_sfn_state_machine_execution'
        db_table_comment = 'AWS Step Functions State Machine Execution'


class AwsSfnStateMachineExecutionHistory(models.Model):
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The id of the event.')
    execution_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) that identifies the execution.')
    previous_event_id = models.TextField(blank=True, null=True, db_comment='The id of the previous event.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The date and time the event occurred.')
    type = models.TextField(blank=True, null=True, db_comment='The type of the event.')
    activity_failed_event_details = models.JSONField(blank=True, null=True, db_comment='Contains details about an activity that failed during an execution.')
    activity_schedule_failed_event_details = models.JSONField(blank=True, null=True, db_comment='Contains details about an activity schedule event that failed during an execution.')
    activity_scheduled_event_details = models.JSONField(blank=True, null=True, db_comment='Contains details about an activity scheduled during an execution.')
    activity_started_event_details = models.JSONField(blank=True, null=True, db_comment='Contains details about the start of an activity during an execution.')
    activity_succeeded_event_details = models.JSONField(blank=True, null=True, db_comment='Contains details about an activity that successfully terminated during an execution.')
    activity_timed_out_event_details = models.JSONField(blank=True, null=True, db_comment='Contains details about an activity timeout that occurred during an execution.')
    execution_aborted_event_details = models.JSONField(blank=True, null=True, db_comment='Contains details about an abort of an execution.')
    execution_failed_event_details = models.JSONField(blank=True, null=True, db_comment='Contains details about an execution failure event.')
    execution_started_event_details = models.JSONField(blank=True, null=True, db_comment='Contains details about the start of the execution.')
    execution_succeeded_event_details = models.JSONField(blank=True, null=True, db_comment='Contains details about the successful termination of the execution.')
    execution_timed_out_event_details = models.JSONField(blank=True, null=True, db_comment='Contains details about the execution timeout that occurred during the execution.')
    lambda_function_failed_event_details = models.JSONField(blank=True, null=True, db_comment='Contains details about a lambda function that failed during an execution.')
    lambda_function_schedule_failed_event_details = models.JSONField(blank=True, null=True, db_comment='Contains details about a failed lambda function schedule event that occurred during an execution.')
    lambda_function_scheduled_event_details = models.JSONField(blank=True, null=True, db_comment='Contains details about a lambda function scheduled during an execution.')
    lambda_function_start_failed_event_details = models.JSONField(blank=True, null=True, db_comment='Contains details about a lambda function that failed to start during an execution.')
    lambda_function_succeeded_event_details = models.JSONField(blank=True, null=True, db_comment='Contains details about a lambda function that terminated successfully during an execution.')
    lambda_function_timed_out_event_details = models.JSONField(blank=True, null=True, db_comment='Contains details about a lambda function timeout that occurred during an execution.')
    map_iteration_aborted_event_details = models.JSONField(blank=True, null=True, db_comment='Contains details about an iteration of a Map state that was aborted.')
    map_iteration_failed_event_details = models.JSONField(blank=True, null=True, db_comment='Contains details about an iteration of a Map state that failed.')
    map_iteration_started_event_details = models.JSONField(blank=True, null=True, db_comment='Contains details about an iteration of a Map state that was started.')
    map_iteration_succeeded_event_details = models.JSONField(blank=True, null=True, db_comment='Contains details about an iteration of a Map state that succeeded.')
    map_state_started_event_details = models.JSONField(blank=True, null=True, db_comment='Contains details about Map state that was started.')
    state_entered_event_details = models.JSONField(blank=True, null=True, db_comment='Contains details about a state entered during an execution.')
    state_exited_event_details = models.JSONField(blank=True, null=True, db_comment='Contains details about an exit from a state during an execution.')
    task_failed_event_details = models.JSONField(blank=True, null=True, db_comment='Contains details about the failure of a task.')
    task_scheduled_event_details = models.JSONField(blank=True, null=True, db_comment='Contains details about a task that was scheduled.')
    task_start_failed_event_details = models.JSONField(blank=True, null=True, db_comment='Contains details about a task that failed to start.')
    task_started_event_details = models.JSONField(blank=True, null=True, db_comment='Contains details about a task that was started.')
    task_submit_failed_event_details = models.JSONField(blank=True, null=True, db_comment='Contains details about a task that where the submit failed.')
    task_submitted_event_details = models.JSONField(blank=True, null=True, db_comment='Contains details about a submitted task.')
    task_succeeded_event_details = models.JSONField(blank=True, null=True, db_comment='Contains details about a task that succeeded.')
    task_timed_out_event_details = models.JSONField(blank=True, null=True, db_comment='Contains details about a task that timed out.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_sfn_state_machine_execution_history'
        db_table_comment = 'AWS Step Functions State Machine Execution History'


class AwsSimspaceweaverSimulation(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the simulation.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the simulation.')
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='The time when the simulation was created, expressed as the number of seconds and milliseconds in UTC since the Unix epoch (0:0:0.000, January 1, 1970).')
    status = models.TextField(blank=True, null=True, db_comment='The current status of the simulation.')
    execution_id = models.TextField(blank=True, null=True, db_comment='A universally unique identifier (UUID) for this simulation.')
    maximum_duration = models.TextField(blank=True, null=True, db_comment='The maximum running time of the simulation, specified as a number of months (m or M), hours (h or H), or days (d or D).')
    role_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that the simulation assumes to perform actions.')
    schema_error = models.TextField(blank=True, null=True, db_comment='An error message that SimSpace Weaver returns only if there is a problem with the simulation schema.')
    live_simulation_state = models.JSONField(blank=True, null=True, db_comment='A collection of additional state information, such as domain and clock configuration.')
    logging_configuration = models.JSONField(blank=True, null=True, db_comment='Settings that control how SimSpace Weaver handles your simulation log data.')
    schema_s3_location = models.JSONField(blank=True, null=True, db_comment='The location of the simulation schema in Amazon Simple Storage Service (Amazon S3).')
    target_status = models.JSONField(blank=True, null=True, db_comment='The desired status of the simulation.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_simspaceweaver_simulation'
        db_table_comment = 'AWS SimSpace Weaver Simulation'


class AwsSnsSubscription(models.Model):
    subscription_arn = models.TextField(blank=True, null=True, db_comment='Amazon Resource Name of the subscription.')
    topic_arn = models.TextField(blank=True, null=True, db_comment='The topic ARN that the subscription is associated with.')
    owner = models.TextField(blank=True, null=True, db_comment="The AWS account ID of the subscription's owner.")
    protocol = models.TextField(blank=True, null=True, db_comment="The subscription's protocol.")
    endpoint = models.TextField(blank=True, null=True, db_comment="The subscription's endpoint (format depends on the protocol).")
    confirmation_was_authenticated = models.BooleanField(blank=True, null=True, db_comment='Reflects authentication status of the subscription.')
    pending_confirmation = models.BooleanField(blank=True, null=True, db_comment="Reflects the confirmation status of the subscription. True if the subscription hasn't been confirmed.")
    raw_message_delivery = models.BooleanField(blank=True, null=True, db_comment='true if raw message delivery is enabled for the subscription.')
    delivery_policy = models.JSONField(blank=True, null=True, db_comment="The JSON of the subscription's delivery policy.")
    effective_delivery_policy = models.JSONField(blank=True, null=True, db_comment='The JSON of the effective delivery policy that takes into account the topic delivery policy and account system defaults.')
    redrive_policy = models.JSONField(blank=True, null=True, db_comment="When specified, sends undeliverable messages to the specified Amazon SQS dead-letter queue. Messages that can't be delivered due to client errors (for example, when the subscribed endpoint is unreachable) or server errors (for example, when the service that powers the subscribed endpoint becomes unavailable) are held in the dead-letter queue for further analysis or reprocessing.")
    filter_policy = models.JSONField(blank=True, null=True, db_comment='The filter policy JSON that is assigned to the subscription.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_sns_subscription'
        db_table_comment = 'AWS SNS Subscription'


class AwsSnsTopic(models.Model):
    topic_arn = models.TextField(blank=True, null=True, db_comment='Amazon Resource Name (ARN) of the Topic.')
    display_name = models.TextField(blank=True, null=True, db_comment='The human-readable name used in the From field for notifications to email and email-json endpoints.')
    application_failure_feedback_role_arn = models.TextField(blank=True, null=True, db_comment='IAM role for failed deliveries of notification messages sent to topics with platform application endpoint.')
    application_success_feedback_role_arn = models.TextField(blank=True, null=True, db_comment='IAM role for successful deliveries of notification messages sent to topics with platform application endpoint.')
    application_success_feedback_sample_rate = models.TextField(blank=True, null=True, db_comment='Sample rate for successful deliveries of notification messages sent to topics with platform application endpoint.')
    firehose_failure_feedback_role_arn = models.TextField(blank=True, null=True, db_comment='IAM role for failed deliveries of notification messages sent to topics with kinesis data firehose endpoint.')
    firehose_success_feedback_role_arn = models.TextField(blank=True, null=True, db_comment='IAM role for successful deliveries of notification messages sent to topics with kinesis data firehose endpoint.')
    firehose_success_feedback_sample_rate = models.TextField(blank=True, null=True, db_comment='Sample rate for successful deliveries of notification messages sent to topics with firehose endpoint.')
    http_failure_feedback_role_arn = models.TextField(blank=True, null=True, db_comment='IAM role for failed deliveries of notification messages sent to topics with http endpoint.')
    http_success_feedback_role_arn = models.TextField(blank=True, null=True, db_comment='IAM role for successful deliveries of notification messages sent to topics with http endpoint.')
    http_success_feedback_sample_rate = models.TextField(blank=True, null=True, db_comment='Sample rate for successful deliveries of notification messages sent to topics with http endpoint.')
    lambda_failure_feedback_role_arn = models.TextField(blank=True, null=True, db_comment='IAM role for failed deliveries of notification messages sent to topics with lambda endpoint.')
    lambda_success_feedback_role_arn = models.TextField(blank=True, null=True, db_comment='IAM role for successful deliveries of notification messages sent to topics with lambda endpoint.')
    lambda_success_feedback_sample_rate = models.TextField(blank=True, null=True, db_comment='Sample rate for successful deliveries of notification messages sent to topics with lambda endpoint.')
    owner = models.TextField(blank=True, null=True, db_comment="The AWS account ID of the topic's owner.")
    sqs_failure_feedback_role_arn = models.TextField(blank=True, null=True, db_comment='IAM role for failed deliveries of notification messages sent to topics with sqs endpoint.')
    sqs_success_feedback_role_arn = models.TextField(blank=True, null=True, db_comment='IAM role for successful deliveries of notification messages sent to topics with sqs endpoint.')
    sqs_success_feedback_sample_rate = models.TextField(blank=True, null=True, db_comment='Sample rate for successful deliveries of notification messages sent to topics with sqs endpoint.')
    subscriptions_confirmed = models.BigIntegerField(blank=True, null=True, db_comment='The number of confirmed subscriptions for the topic.')
    subscriptions_deleted = models.BigIntegerField(blank=True, null=True, db_comment='The number of deleted subscriptions for the topic.')
    subscriptions_pending = models.BigIntegerField(blank=True, null=True, db_comment='The number of subscriptions pending confirmation for the topic.')
    kms_master_key_id = models.TextField(blank=True, null=True, db_comment='The ID of an AWS-managed customer master key (CMK) for Amazon SNS or a custom CMK.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='The list of tags associated with the topic.')
    policy = models.JSONField(blank=True, null=True, db_comment="The topic's access control policy (i.e. Resource IAM Policy).")
    policy_std = models.JSONField(blank=True, null=True, db_comment='Contains the policy in a canonical form for easier searching.')
    delivery_policy = models.JSONField(blank=True, null=True, db_comment="The JSON object of the topic's delivery policy.")
    effective_delivery_policy = models.JSONField(blank=True, null=True, db_comment='The effective delivery policy, taking system defaults into account.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_sns_topic'
        db_table_comment = 'AWS SNS Topic'


class AwsSnsTopicSubscription(models.Model):
    subscription_arn = models.TextField(blank=True, null=True, db_comment='Amazon Resource Name of the subscription.')
    topic_arn = models.TextField(blank=True, null=True, db_comment='The topic ARN that the subscription is associated with.')
    owner = models.TextField(blank=True, null=True, db_comment="The AWS account ID of the subscription's owner.")
    protocol = models.TextField(blank=True, null=True, db_comment="The subscription's protocol.")
    endpoint = models.TextField(blank=True, null=True, db_comment="The subscription's endpoint (format depends on the protocol).")
    confirmation_was_authenticated = models.BooleanField(blank=True, null=True, db_comment='Reflects authentication status of the subscription.')
    pending_confirmation = models.BooleanField(blank=True, null=True, db_comment="Reflects the confirmation status of the subscription. True if the subscription hasn't been confirmed.")
    raw_message_delivery = models.BooleanField(blank=True, null=True, db_comment='true if raw message delivery is enabled for the subscription.')
    delivery_policy = models.JSONField(blank=True, null=True, db_comment="The JSON of the subscription's delivery policy.")
    effective_delivery_policy = models.JSONField(blank=True, null=True, db_comment='The JSON of the effective delivery policy that takes into account the topic delivery policy and account system defaults.')
    redrive_policy = models.JSONField(blank=True, null=True, db_comment="When specified, sends undeliverable messages to the specified Amazon SQS dead-letter queue. Messages that can't be delivered due to client errors (for example, when the subscribed endpoint is unreachable) or server errors (for example, when the service that powers the subscribed endpoint becomes unavailable) are held in the dead-letter queue for further analysis or reprocessing.")
    filter_policy = models.JSONField(blank=True, null=True, db_comment='The filter policy JSON that is assigned to the subscription.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_sns_topic_subscription'
        db_table_comment = 'AWS SNS Topic Subscription'


class AwsSqsQueue(models.Model):
    queue_url = models.TextField(blank=True, null=True, db_comment='The URL of the Amazon SQS queue.')
    queue_arn = models.TextField(blank=True, null=True, db_comment='The Amazon resource name (ARN) of the queue.')
    fifo_queue = models.BooleanField(blank=True, null=True, db_comment='Returns true if the queue is FIFO.')
    fifo_throughput_limit = models.TextField(blank=True, null=True, db_comment='Specifies whether the FIFO queue throughput quota applies to the entire queue or per message group.')
    delay_seconds = models.TextField(blank=True, null=True, db_comment='The default delay on the queue in seconds.')
    max_message_size = models.TextField(blank=True, null=True, db_comment='The limit of how many bytes a message can contain before Amazon SQS rejects it.')
    message_retention_seconds = models.TextField(blank=True, null=True, db_comment='The length of time, in seconds, for which Amazon SQS retains a message.')
    receive_wait_time_seconds = models.TextField(blank=True, null=True, db_comment='The length of time, in seconds, for which the ReceiveMessage action waits for a message to arrive.')
    sqs_managed_sse_enabled = models.BooleanField(blank=True, null=True, db_comment='Returns true if the queue is using SSE-SQS encryption with SQS-owned encryption keys.')
    visibility_timeout_seconds = models.TextField(blank=True, null=True, db_comment='The visibility timeout for the queue in seconds.')
    policy = models.JSONField(blank=True, null=True, db_comment='The resource IAM policy of the queue.')
    policy_std = models.JSONField(blank=True, null=True, db_comment='Contains the policy in a canonical form for easier searching.')
    redrive_policy = models.JSONField(blank=True, null=True, db_comment='The string that includes the parameters for the dead-letter queue functionality of the source queue as a JSON object.')
    content_based_deduplication = models.TextField(blank=True, null=True, db_comment='Mentions whether content-based deduplication is enabled for the queue.')
    deduplication_scope = models.TextField(blank=True, null=True, db_comment='Specifies whether message deduplication occurs at the message group or queue level.')
    kms_master_key_id = models.TextField(blank=True, null=True, db_comment='The ID of an AWS-managed customer master key (CMK) for Amazon SQS or a custom CMK.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_sqs_queue'
        db_table_comment = 'AWS SQS Queue'


class AwsSsmAssociation(models.Model):
    association_id = models.TextField(blank=True, null=True, db_comment='The ID created by the system when you create an association.')
    association_name = models.TextField(blank=True, null=True, db_comment='The Name of association.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the association.')
    document_name = models.TextField(blank=True, null=True, db_comment='The name of the Systems Manager document.')
    date = models.DateTimeField(blank=True, null=True, db_comment='The date when the association was made.')
    compliance_severity = models.TextField(blank=True, null=True, db_comment='A cron expression that specifies a schedule when the association runs.')
    apply_only_at_cron_interval = models.BooleanField(blank=True, null=True, db_comment="By default, when you create a new associations, the system runs it immediately after it is created and then according to the schedule you specified. Specify this option if you don't want an association to run immediately after you create it. This parameter is not supported for rate expressions.")
    association_version = models.TextField(blank=True, null=True, db_comment='The association version.')
    automation_target_parameter_name = models.TextField(blank=True, null=True, db_comment='Specify the target for the association. This target is required for associations that use an Automation document and target resources by using rate controls.')
    document_version = models.TextField(blank=True, null=True, db_comment='The version of the document used in the association.')
    instance_id = models.TextField(blank=True, null=True, db_comment='The ID of the instance.')
    last_execution_date = models.DateTimeField(blank=True, null=True, db_comment='The date on which the association was last run.')
    last_successful_execution_date = models.DateTimeField(blank=True, null=True, db_comment='The last date on which the association was successfully run.')
    last_update_association_date = models.DateTimeField(blank=True, null=True, db_comment='The date when the association was last updated.')
    schedule_expression = models.TextField(blank=True, null=True, db_comment='A cron expression that specifies a schedule when the association runs.')
    max_concurrency = models.TextField(blank=True, null=True, db_comment='The maximum number of targets allowed to run the association at the same time.')
    max_errors = models.TextField(blank=True, null=True, db_comment='The number of errors that are allowed before the system stops sending requests to run the association on additional targets.')
    sync_compliance = models.TextField(blank=True, null=True, db_comment='The mode for generating association compliance. You can specify AUTO or MANUAL.')
    overview = models.JSONField(blank=True, null=True, db_comment='Information about the association.')
    output_location = models.JSONField(blank=True, null=True, db_comment='An S3 bucket where you want to store the output details of the request.')
    parameters = models.JSONField(blank=True, null=True, db_comment='A description of the parameters for a document.')
    status = models.TextField(blank=True, null=True, db_comment='The status of the association. Status can be: Pending, Success, or Failed.')
    targets = models.JSONField(blank=True, null=True, db_comment='A cron expression that specifies a schedule when the association runs.')
    target_locations = models.JSONField(blank=True, null=True, db_comment='The combination of AWS Regions and AWS accounts where you want to run the association.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ssm_association'
        db_table_comment = 'AWS SSM Association'


class AwsSsmDocument(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the Systems Manager document.')
    account_ids = models.JSONField(blank=True, null=True, db_comment='[DEPRECATED] The account IDs that have permission to use this document.The ID can be either an AWS account or All.')
    account_sharing_info_list = models.JSONField(blank=True, null=True, db_comment='[DEPRECATED] A list of AWS accounts where the current document is shared and the version shared with each account.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the document.')
    approved_version = models.TextField(blank=True, null=True, db_comment='The version of the document currently approved for use in the organization.')
    attachments_information = models.JSONField(blank=True, null=True, db_comment='Details about the document attachments, including names, locations, sizes,and so on.')
    author = models.TextField(blank=True, null=True, db_comment='The user in your organization who created the document.')
    created_date = models.DateTimeField(blank=True, null=True, db_comment='The date when the document was created.')
    default_version = models.TextField(blank=True, null=True, db_comment='The default version.')
    description = models.TextField(blank=True, null=True, db_comment='A description of the document.')
    document_format = models.TextField(blank=True, null=True, db_comment='The document format, either JSON or YAML.')
    document_type = models.TextField(blank=True, null=True, db_comment='The type of document.')
    document_version = models.TextField(blank=True, null=True, db_comment='The document version.')
    hash = models.TextField(blank=True, null=True, db_comment='The Sha256 or Sha1 hash created by the system when the document was created.')
    hash_type = models.TextField(blank=True, null=True, db_comment='The hash type of the document.')
    latest_version = models.TextField(blank=True, null=True, db_comment='The latest version of the document.')
    owner_type = models.TextField(blank=True, null=True, db_comment='The AWS user account type to filter the documents. Possible values: Self, Amazon, Public, Private, ThirdParty, All, Default.')
    owner = models.TextField(blank=True, null=True, db_comment='The AWS user account that created the document.')
    parameters = models.JSONField(blank=True, null=True, db_comment='A description of the parameters for a document.')
    pending_review_version = models.TextField(blank=True, null=True, db_comment='The version of the document that is currently under review.')
    platform_types = models.JSONField(blank=True, null=True, db_comment='The operating system platform.')
    requires = models.JSONField(blank=True, null=True, db_comment='A list of SSM documents required by a document.')
    review_information = models.JSONField(blank=True, null=True, db_comment='Details about the review of a document.')
    review_status = models.TextField(blank=True, null=True, db_comment='The current status of the review.')
    schema_version = models.TextField(blank=True, null=True, db_comment='The schema version.')
    sha1 = models.TextField(blank=True, null=True, db_comment='The SHA1 hash of the document, which you can use for verification.')
    status = models.TextField(blank=True, null=True, db_comment='The user in your organization who created the document.')
    status_information = models.TextField(blank=True, null=True, db_comment='A message returned by AWS Systems Manager that explains the Status value.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags associated with document')
    target_type = models.TextField(blank=True, null=True, db_comment='The target type which defines the kinds of resources the document can run on.')
    version_name = models.TextField(blank=True, null=True, db_comment='The version of the artifact associated with the document.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ssm_document'
        db_table_comment = 'AWS SSM Document'
# Unable to inspect table 'aws_ssm_document_permission'
# The error was: rpc error: code = Internal desc = aws: rpc error: code = Internal desc = 'List' call for table 'aws_ssm_document_permission' is missing 1 required qual: column:'document_name' operator: =



class AwsSsmInventory(models.Model):
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='ID of the inventory result entity.')
    type_name = models.TextField(blank=True, null=True, db_comment='The type of inventory item returned by the request.')
    filter_key = models.TextField(blank=True, null=True, db_comment="The name of the filter key. Example: inventory filter key where managed node ID 'AWS:InstanceInformation.InstanceId'.")
    filter_value = models.TextField(blank=True, null=True, db_comment="Inventory filter values. Example: inventory filter where managed node IDs are specified as values 'i-a12b3c4d5e6g'.")
    component_attribute_key = models.TextField(blank=True, null=True, db_comment='The attribute key that are supported for type name AWS:AWSComponent, Possible values are: Name,ApplicationType,Publisher,Version,InstalledTime,Architecture and URL.')
    component_attribute_value = models.TextField(blank=True, null=True, db_comment='The value for the component attribute key.')
    application_attribute_key = models.TextField(blank=True, null=True, db_comment='The attribute key of the type name AWS:Application.')
    application_attribute_value = models.TextField(blank=True, null=True, db_comment='The value for the attribute key of the type name AWS:Application.')
    compliance_attribute_key = models.TextField(blank=True, null=True, db_comment='The attribute key of the type name AWS:ComplianceItem.')
    compliance_attribute_value = models.TextField(blank=True, null=True, db_comment='The value for the attribute key of the type name AWS:ComplianceItem.')
    file_attribute_key = models.TextField(blank=True, null=True, db_comment='The attribute key of the type name AWS:File.')
    file_attribute_value = models.TextField(blank=True, null=True, db_comment='The value for the attribute key of the type name AWS:File.')
    instance_detailed_information_attribute_key = models.TextField(blank=True, null=True, db_comment='The attribute key of the type name AWS:InstanceDetailedInformation.')
    instance_detailed_information_attribute_value = models.TextField(blank=True, null=True, db_comment='The value for the attribute key of the type name AWS:InstanceDetailedInformation.')
    instance_information_attribute_key = models.TextField(blank=True, null=True, db_comment='The attribute key of the type name AWS:InstanceInformation.')
    instance_information_attribute_value = models.TextField(blank=True, null=True, db_comment='The value for the attribute key of the type name AWS:InstanceInformation.')
    network_attribute_key = models.TextField(blank=True, null=True, db_comment='The attribute key of the type name AWS:Network.')
    network_attribute_value = models.TextField(blank=True, null=True, db_comment='The value for the attribute key of the type name AWS:Network.')
    windows_registry_attribute_key = models.TextField(blank=True, null=True, db_comment='The attribute key of the type name AWS:WindowsRegistry.')
    windows_registry_attribute_value = models.TextField(blank=True, null=True, db_comment='The value for the attribute key of the type name AWS:WindowsRegistry.')
    patch_compliance_attribute_key = models.TextField(blank=True, null=True, db_comment='The attribute key of the type name AWS:PatchCompliance.')
    patch_compliance_attribute_value = models.TextField(blank=True, null=True, db_comment='The value for the attribute key of the type name AWS:PatchCompliance.')
    patch_summary_attribute_key = models.TextField(blank=True, null=True, db_comment='The attribute key of the type name AWS:PatchSummary.')
    patch_summary_attribute_value = models.TextField(blank=True, null=True, db_comment='The value for the attribute key of the type name AWS:PatchSummary.')
    resource_group_attribute_key = models.TextField(blank=True, null=True, db_comment='The attribute key of the type name AWS:ResourceGroup.')
    resource_group_attribute_value = models.TextField(blank=True, null=True, db_comment='The value for the attribute key of the type name AWS:ResourceGroup.')
    service_attribute_key = models.TextField(blank=True, null=True, db_comment='The attribute key of the type name AWS:Service.')
    service_attribute_value = models.TextField(blank=True, null=True, db_comment='The value for the attribute key of the type name AWS:Service.')
    tag_attribute_key = models.TextField(blank=True, null=True, db_comment='The attribute key of the type name AWS:Tag.')
    tag_attribute_value = models.TextField(blank=True, null=True, db_comment='The value for the attribute key of the type name AWS:Tag.')
    windows_role_attribute_key = models.TextField(blank=True, null=True, db_comment='The attribute key of the type name AWS:WindowsRole.')
    windows_role_attribute_value = models.TextField(blank=True, null=True, db_comment='The value for the attribute key of the type name AWS:WindowsRole.')
    windows_update_attribute_key = models.TextField(blank=True, null=True, db_comment='The attribute key of the type name AWS:WindowsUpdate.')
    windows_update_attribute_value = models.TextField(blank=True, null=True, db_comment='The value for the attribute key of the type name AWS:WindowsUpdate.')
    capture_time = models.DateTimeField(blank=True, null=True, db_comment='The time that inventory information was collected for the managed node(s).')
    schema_version = models.TextField(blank=True, null=True, db_comment='The inventory schema version used by the managed node(s).')
    content = models.JSONField(blank=True, null=True, db_comment='Contains all the inventory data of the item type. Results include attribute names and values.')
    schema = models.JSONField(blank=True, null=True, db_comment='The inventory item schema definition. Users can use this to compose inventory query filters.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ssm_inventory'
        db_table_comment = 'AWS SSM Inventory'


class AwsSsmInventoryEntry(models.Model):
    instance_id = models.TextField(blank=True, null=True, db_comment='The managed node ID targeted by the request to query inventory information.')
    type_name = models.TextField(blank=True, null=True, db_comment='The type of inventory item returned by the request.')
    capture_time = models.DateTimeField(blank=True, null=True, db_comment='The time that inventory information was collected for the managed node(s).')
    schema_version = models.TextField(blank=True, null=True, db_comment='The inventory schema version used by the managed node(s).')
    entries = models.JSONField(blank=True, null=True, db_comment='The inventory items on the managed node(s).')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ssm_inventory_entry'
        db_table_comment = 'AWS SSM Inventory Entry'


class AwsSsmMaintenanceWindow(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the Maintenance Window.')
    window_id = models.TextField(blank=True, null=True, db_comment='The ID of the Maintenance Window.')
    enabled = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the Maintenance Window is enabled.')
    allow_unassociated_targets = models.BooleanField(blank=True, null=True, db_comment='Indicates whether targets must be registered with the Maintenance Window before tasks can be defined for those targets.')
    description = models.TextField(blank=True, null=True, db_comment='A description of the Maintenance Window.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the Maintenance Window')
    duration = models.BigIntegerField(blank=True, null=True, db_comment='The duration of the Maintenance Window in hours.')
    cutoff = models.BigIntegerField(blank=True, null=True, db_comment='The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.')
    schedule = models.TextField(blank=True, null=True, db_comment='The schedule of the Maintenance Window in the form of a cron or rate expression.')
    schedule_offset = models.BigIntegerField(blank=True, null=True, db_comment='The number of days to wait to run a Maintenance Window after the scheduled CRON expression date and time.')
    targets = models.JSONField(blank=True, null=True, db_comment='The targets of Maintenance Window.')
    tasks = models.JSONField(blank=True, null=True, db_comment='The Tasks of Maintenance Window.')
    created_date = models.DateTimeField(blank=True, null=True, db_comment='The date the maintenance window was created.')
    end_date = models.TextField(blank=True, null=True, db_comment='The date and time, in ISO-8601 Extended format, for when the maintenance window is scheduled to become inactive. The maintenance window will not run after this specified time.')
    schedule_timezone = models.TextField(blank=True, null=True, db_comment='The schedule of the maintenance window in the form of a cron or rate expression.')
    start_date = models.TextField(blank=True, null=True, db_comment='The date and time, in ISO-8601 Extended format, for when the maintenance window is scheduled to become active.')
    modified_date = models.DateTimeField(blank=True, null=True, db_comment='The date the Maintenance Window was last modified.')
    next_execution_time = models.TextField(blank=True, null=True, db_comment='The next time the maintenance window will actually run, taking into account any specified times for the Maintenance Window to become active or inactive.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ssm_maintenance_window'
        db_table_comment = 'AWS SSM Maintenance Window'


class AwsSsmManagedInstance(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name assigned to an on-premises server or virtual machine (VM) when it is activated as a Systems Manager managed instance.')
    instance_id = models.TextField(blank=True, null=True, db_comment='The ID of the instance.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the instance.')
    resource_type = models.TextField(blank=True, null=True, db_comment='The type of instance. Instances are either EC2 instances or managed instances.')
    ping_status = models.TextField(blank=True, null=True, db_comment='Connection status of SSM Agent.')
    activation_id = models.TextField(blank=True, null=True, db_comment='The activation ID created by Systems Manager when the server or VM was registered.')
    agent_version = models.TextField(blank=True, null=True, db_comment='The version of SSM Agent running on your Linux instance.')
    association_status = models.TextField(blank=True, null=True, db_comment='The status of the association.')
    computer_name = models.TextField(blank=True, null=True, db_comment='The fully qualified host name of the managed instance.')
    ip_address = models.GenericIPAddressField(blank=True, null=True, db_comment='The IP address of the managed instance.')
    is_latest_version = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the latest version of SSM Agent is running on your Linux Managed Instance.')
    last_association_execution_date = models.DateTimeField(blank=True, null=True, db_comment='The date the association was last run.')
    last_ping_date_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time when the agent last pinged the Systems Manager service.')
    last_successful_association_execution_date = models.DateTimeField(blank=True, null=True, db_comment='The last date the association was successfully run.')
    platform_name = models.TextField(blank=True, null=True, db_comment='The name of the operating system platform running on your instance.')
    platform_type = models.TextField(blank=True, null=True, db_comment='The operating system platform type.')
    platform_version = models.TextField(blank=True, null=True, db_comment='The version of the OS platform running on your instance.')
    registration_date = models.DateTimeField(blank=True, null=True, db_comment='The date the server or VM was registered with AWS as a managed instance.')
    association_overview = models.JSONField(blank=True, null=True, db_comment='Information about the association.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ssm_managed_instance'
        db_table_comment = 'AWS SSM Managed Instance'
# Unable to inspect table 'aws_ssm_managed_instance_compliance'
# The error was: rpc error: code = Internal desc = aws: rpc error: code = Internal desc = 'List' call for table 'aws_ssm_managed_instance_compliance' is missing 1 required qual: column:'resource_id' operator: =



class AwsSsmManagedInstancePatchState(models.Model):
    instance_id = models.TextField(blank=True, null=True, db_comment='The ID of the managed node the high-level patch compliance information was collected for.')
    baseline_id = models.TextField(blank=True, null=True, db_comment='The ID of the patch baseline used to patch the managed node.')
    operation = models.TextField(blank=True, null=True, db_comment='The type of patching operation that was performed.')
    operation_end_time = models.DateTimeField(blank=True, null=True, db_comment='The time the most recent patching operation completed on the managed node.')
    operation_start_time = models.DateTimeField(blank=True, null=True, db_comment='The time the most recent patching operation was started on the managed node.')
    patch_group = models.TextField(blank=True, null=True, db_comment='The name of the patch group the managed node belongs to.')
    critical_non_compliant_count = models.BigIntegerField(blank=True, null=True, db_comment="The number of patches per node that are specified as Critical for compliance reporting in the patch baseline aren't installed. These patches might be missing, have failed installation, were rejected, or were installed but awaiting a required managed node reboot. The status of these managed nodes is NON_COMPLIANT.")
    failed_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of patches from the patch baseline that were attempted to be installed during the last patching operation, but failed to install.')
    installed_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of patches from the patch baseline that are installed on the managed node.')
    installed_other_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of patches not specified in the patch baseline that are installed on the managed node.')
    installed_pending_reboot_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of patches installed by Patch Manager since the last time the managed node was rebooted.')
    installed_rejected_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of patches installed on a managed node that are specified in a RejectedPatches list. Patches with a status of InstalledRejected were typically installed before they were added to a RejectedPatches list.')
    last_no_reboot_install_operation_time = models.DateTimeField(blank=True, null=True, db_comment='The time of the last attempt to patch the managed node with NoReboot specified as the reboot option.')
    missing_count = models.BigIntegerField(blank=True, null=True, db_comment="The number of patches from the patch baseline that are applicable for the managed node but aren't currently installed.")
    not_applicable_count = models.BigIntegerField(blank=True, null=True, db_comment="The number of patches from the patch baseline that aren't applicable for the managed node and therefore aren't installed on the node. This number may be truncated if the list of patch names is very large. The number of patches beyond this limit are reported in UnreportedNotApplicableCount.")
    other_non_compliant_count = models.BigIntegerField(blank=True, null=True, db_comment="The number of patches per node that are specified as other than Critical or Security but aren't compliant with the patch baseline. The status of these managed nodes is NON_COMPLIANT.")
    owner_information = models.TextField(blank=True, null=True, db_comment='Placeholder information. This field will always be empty in the current release of the service.')
    reboot_option = models.TextField(blank=True, null=True, db_comment="Indicates the reboot option specified in the patch baseline. Reboot options apply to Install operations only. Reboots aren't attempted for Patch Manager Scan operations.")
    security_non_compliant_count = models.BigIntegerField(blank=True, null=True, db_comment="The number of patches per node that are specified as Security in a patch advisory aren't installed. These patches might be missing, have failed installation, were rejected, or were installed but awaiting a required managed node reboot. The status of these managed nodes is NON_COMPLIANT.")
    snapshot_id = models.TextField(blank=True, null=True, db_comment='The ID of the patch baseline snapshot used during the patching operation when this compliance data was collected.')
    unreported_not_applicable_count = models.BigIntegerField(blank=True, null=True, db_comment="The number of patches beyond the supported limit of NotApplicableCount that aren't reported by name to Inventory. Inventory is a capability of Amazon Web Services Systems Manager.")
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ssm_managed_instance_patch_state'
        db_table_comment = 'AWS SSM Managed Instance Patch State'


class AwsSsmParameter(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The parameter name.')
    type = models.TextField(blank=True, null=True, db_comment='The type of parameter. Valid parameter types include the following: String, StringList, and SecureString.')
    value = models.TextField(blank=True, null=True, db_comment='The value of parameter.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the parameter.')
    data_type = models.TextField(blank=True, null=True, db_comment='The data type of the parameter, such as text or aws:ec2:image. The default is text.')
    key_id = models.TextField(blank=True, null=True, db_comment='The ID of the query key used for this parameter.')
    last_modified_date = models.DateTimeField(blank=True, null=True, db_comment='Date the parameter was last changed or updated.')
    last_modified_user = models.TextField(blank=True, null=True, db_comment='Amazon Resource Name (ARN) of the AWS user who last changed the parameter.')
    version = models.BigIntegerField(blank=True, null=True, db_comment='The parameter version.')
    selector = models.TextField(blank=True, null=True, db_comment='Either the version number or the label used to retrieve the parameter value.')
    source_result = models.TextField(blank=True, null=True, db_comment='SourceResult is the raw result or response from the source. Applies to parameters that reference information in other AWS services.')
    tier = models.TextField(blank=True, null=True, db_comment='The parameter tier.')
    policies = models.JSONField(blank=True, null=True, db_comment='A list of policies associated with a parameter. Parameter policies help you manage a growing set of parameters by enabling you to assign specific criteria to a parameter such as an expiration date or time to live. Parameter policies are especially helpful in forcing you to update or delete passwords and configuration data stored in Parameter Store.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the parameter.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ssm_parameter'
        db_table_comment = 'AWS SSM Parameter'


class AwsSsmPatchBaseline(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the patch baseline.')
    baseline_id = models.TextField(blank=True, null=True, db_comment='The ID of the retrieved patch baseline.')
    description = models.TextField(blank=True, null=True, db_comment='A description of the patch baseline.')
    operating_system = models.TextField(blank=True, null=True, db_comment='Returns the operating system specified for the patch baseline.')
    created_date = models.DateTimeField(blank=True, null=True, db_comment='The date the patch baseline was created.')
    modified_date = models.DateTimeField(blank=True, null=True, db_comment='The date the patch baseline was last modified.')
    approved_patches_compliance_level = models.TextField(blank=True, null=True, db_comment='Returns the specified compliance severity level for approved patches in the patch baseline.')
    approved_patches_enable_non_security = models.BooleanField(blank=True, null=True, db_comment="Indicates whether the list of approved patches includes non-security updates that should be applied to the instances. The default value is 'false'. Applies to Linux instances only.")
    approval_rules = models.JSONField(blank=True, null=True, db_comment='A set of rules used to include patches in the baseline.')
    approved_patches = models.JSONField(blank=True, null=True, db_comment='A list of explicitly approved patches for the baseline.')
    global_filters = models.JSONField(blank=True, null=True, db_comment='A set of global filters used to exclude patches from the baseline.')
    patch_groups = models.JSONField(blank=True, null=True, db_comment='Patch groups included in the patch baseline.')
    rejected_patches_action = models.TextField(blank=True, null=True, db_comment='The action specified to take on patches included in the RejectedPatches list. A patch can be allowed only if it is a dependency of another package, or blocked entirely along with packages that include it as a dependency.')
    rejected_patches = models.JSONField(blank=True, null=True, db_comment='A list of explicitly rejected patches for the baseline.')
    sources = models.JSONField(blank=True, null=True, db_comment='Information about the patches to use to update the instances, including target operating systems and source repositories. Applies to Linux instances only.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the patch baseline.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ssm_patch_baseline'
        db_table_comment = 'AWS SSM Patch Baseline'


class AwsSsmincidentsResponsePlan(models.Model):
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the response plan.')
    name = models.TextField(blank=True, null=True, db_comment='The name of the response plan.')
    display_name = models.TextField(blank=True, null=True, db_comment='The human readable name of the response plan.')
    incident_template = models.JSONField(blank=True, null=True, db_comment='Details used to create the incident when using this response plan.')
    actions = models.JSONField(blank=True, null=True, db_comment='The actions that this response plan takes at the beginning of the incident.')
    chat_channel = models.JSONField(blank=True, null=True, db_comment='The Chatbot chat channel used for collaboration during an incident.')
    engagements = models.JSONField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the contacts and escalation plans that the response plan engages during an incident.')
    integrations = models.JSONField(blank=True, null=True, db_comment='Information about third-party services integrated into the Incident Manager response plan.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ssmincidents_response_plan'
        db_table_comment = 'AWS SSMIncidents Response Plan'


class AwsSsoadminInstance(models.Model):
    arn = models.TextField(blank=True, null=True, db_comment='The ARN of the SSO instance under which the operation will be executed.')
    identity_store_id = models.TextField(blank=True, null=True, db_comment='The identifier of the identity store that is connected to the SSO instance.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ssoadmin_instance'
        db_table_comment = 'AWS SSO Instance'
# Unable to inspect table 'aws_ssoadmin_managed_policy_attachment'
# The error was: rpc error: code = Internal desc = aws: rpc error: code = Internal desc = 'List' call for table 'aws_ssoadmin_managed_policy_attachment' is missing 1 required qual: column:'permission_set_arn' operator: =



class AwsSsoadminPermissionSet(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the permission set.')
    arn = models.TextField(blank=True, null=True, db_comment='The ARN of the permission set.')
    created_date = models.DateTimeField(blank=True, null=True, db_comment='The date that the permission set was created.')
    description = models.TextField(blank=True, null=True, db_comment='The description of the permission set.')
    instance_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the SSO Instance under which the operation will be executed.')
    relay_state = models.TextField(blank=True, null=True, db_comment='Used to redirect users within the application during the federation authentication process.')
    session_duration = models.TextField(blank=True, null=True, db_comment='The length of time that the application user sessions are valid for in the ISO-8601 standard.')
    tags_src = models.JSONField(blank=True, null=True)
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_ssoadmin_permission_set'
        db_table_comment = 'AWS SSO Permission Set'


class AwsStsCallerIdentity(models.Model):
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Web Services ARN associated with the calling entity.')
    user_id = models.TextField(blank=True, null=True, db_comment='The unique identifier of the calling entity. The exact value depends on the type of entity that is making the call.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_sts_caller_identity'
        db_table_comment = 'AWS STS Caller Identity'


class AwsTaggingResource(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the resource.')
    arn = models.TextField(blank=True, null=True, db_comment='The ARN of the resource.')
    compliance_status = models.BooleanField(blank=True, null=True, db_comment='Whether a resource is compliant with the effective tag policy.')
    keys_with_noncompliant_values = models.JSONField(blank=True, null=True, db_comment='These are keys defined in the effective policy that are on the resource with either incorrect case treatment or noncompliant values.')
    noncompliant_keys = models.JSONField(blank=True, null=True, db_comment='These tag keys on the resource are noncompliant with the effective tag policy.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the parameter.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_tagging_resource'
        db_table_comment = 'AWS Tagging Resource'


class AwsTransferServer(models.Model):
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the server.')
    server_id = models.TextField(blank=True, null=True, db_comment='The system-assigned unique identifier for the server.')
    domain = models.TextField(blank=True, null=True, db_comment='Specifies the domain of the storage system that is used for file transfers.')
    identity_provider_type = models.TextField(blank=True, null=True, db_comment='The mode of authentication for a server.')
    endpoint_type = models.TextField(blank=True, null=True, db_comment='Specifies the type of VPC endpoint that your server is connected to.')
    logging_role = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that allows a server to turn on Amazon CloudWatch logging for Amazon S3 or Amazon EFSevents. When set, you can view user activity in your CloudWatch logs.')
    state = models.TextField(blank=True, null=True, db_comment='The condition of the server that was described.')
    user_count = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the number of users that are assigned to a server.')
    certificate = models.TextField(blank=True, null=True, db_comment='Specifies the ARN of the Amazon Web ServicesCertificate Manager (ACM) certificate.')
    host_key_fingerprint = models.TextField(blank=True, null=True, db_comment="Specifies the Base64-encoded SHA256 fingerprint of the server's host key.")
    pre_authentication_login_banner = models.TextField(blank=True, null=True, db_comment='Specifies a string to display when users connect to a server. This string is displayed before the user authenticates.')
    post_authentication_login_banner = models.TextField(blank=True, null=True, db_comment='Specifies a string to display when users connect to a server. This string is displayed after the user authenticates.')
    security_policy_name = models.TextField(blank=True, null=True, db_comment='Specifies the name of the security policy that is attached to the server.')
    identity_provider_details = models.JSONField(blank=True, null=True, db_comment='Specifies information to call a customer-supplied authentication API.')
    protocol_details = models.JSONField(blank=True, null=True, db_comment='The protocol settings that are configured for your server.')
    endpoint_details = models.JSONField(blank=True, null=True, db_comment='The virtual private cloud (VPC) endpoint settings that are configured for your server.')
    protocols = models.JSONField(blank=True, null=True, db_comment="Specifies the file transfer protocol or protocols over which your file transfer protocol client can connect to your server's endpoint.")
    workflow_details = models.JSONField(blank=True, null=True, db_comment="Specifies the workflow ID for the workflow to assign and the execution role that's used for executing the workflow.")
    structured_log_destinations = models.JSONField(blank=True, null=True, db_comment='Specifies the log groups to which your server logs are sent.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_transfer_server'
        db_table_comment = 'AWS Transfer Server'


class AwsTransferUser(models.Model):
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the user.')
    server_id = models.TextField(blank=True, null=True, db_comment='The ID of the server that the user is attached to.')
    user_name = models.TextField(blank=True, null=True, db_comment='Specifies the name of the user whose ARN was specified. User names are used for authentication purposes.')
    home_directory = models.TextField(blank=True, null=True, db_comment='Specifies the landing directory (folder) for a user when they log in to the server.')
    home_directory_mappings = models.JSONField(blank=True, null=True, db_comment='The landing directory (folder) for a user when they log in to the server using the client.')
    home_directory_type = models.TextField(blank=True, null=True, db_comment='The type of landing directory (folder) you mapped for your users to see when they log in to the server.')
    role = models.TextField(blank=True, null=True, db_comment="The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that controls your users' access to your Amazon S3 bucket or Amazon EFS file system.")
    ssh_public_key_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of SSH public keys stored for the user on the server.')
    ssh_public_keys = models.JSONField(blank=True, null=True, db_comment='The public SSH keys stored for the user on the server.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_transfer_user'
        db_table_comment = 'AWS Transfer User'
# Unable to inspect table 'aws_trusted_advisor_check_summary'
# The error was: rpc error: code = Internal desc = aws: rpc error: code = Internal desc = 'List' call for table 'aws_trusted_advisor_check_summary' is missing 1 required qual: column:'language' operator: =



class AwsVpc(models.Model):
    vpc_id = models.TextField(blank=True, null=True, db_comment='The ID of the VPC.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the vpc.')
    cidr_block = models.TextField(blank=True, null=True, db_comment='The primary IPv4 CIDR block for the VPC.')  # This field type is a guess.
    state = models.TextField(blank=True, null=True, db_comment='Contains the current state of the VPC.')
    is_default = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the VPC is the default VPC.')
    dhcp_options_id = models.TextField(blank=True, null=True, db_comment='Contains the ID of the set of DHCP options, associated with the VPC.')
    instance_tenancy = models.TextField(blank=True, null=True, db_comment='The allowed tenancy of instances launched into the VPC.')
    owner_id = models.TextField(blank=True, null=True, db_comment='Contains ID of the AWS account that owns the VPC.')
    cidr_block_association_set = models.JSONField(blank=True, null=True, db_comment='Information about the IPv4 CIDR blocks associated with the VPC.')
    ipv6_cidr_block_association_set = models.JSONField(blank=True, null=True, db_comment='Information about the IPv6 CIDR blocks associated with the VPC.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags that are attached with the VPC.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_vpc'
        db_table_comment = 'AWS VPC'


class AwsVpcCustomerGateway(models.Model):
    customer_gateway_id = models.TextField(blank=True, null=True, db_comment='The ID of the customer gateway.')
    type = models.TextField(blank=True, null=True, db_comment='The type of VPN connection the customer gateway supports (ipsec.1).')
    state = models.TextField(blank=True, null=True, db_comment='The current state of the customer gateway (pending | available | deleting | deleted).')
    bgp_asn = models.TextField(blank=True, null=True, db_comment="The customer gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN).")
    certificate_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) for the customer gateway certificate.')
    device_name = models.TextField(blank=True, null=True, db_comment='The name of customer gateway device.')
    ip_address = models.GenericIPAddressField(blank=True, null=True, db_comment="The Internet-routable IP address of the customer gateway's outside interface.")
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags that are attached to customer gateway.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_vpc_customer_gateway'
        db_table_comment = 'AWS VPC Customer Gateway'


class AwsVpcDhcpOptions(models.Model):
    dhcp_options_id = models.TextField(blank=True, null=True, db_comment='The ID of the set of DHCP options.')
    owner_id = models.TextField(blank=True, null=True, db_comment='The ID of the AWS account that owns the DHCP options set.')
    domain_name = models.JSONField(blank=True, null=True, db_comment='The domain name for instances. This value is used to complete unqualified DNS hostnames.')
    domain_name_servers = models.JSONField(blank=True, null=True, db_comment='The IP addresses of up to four domain name servers, or AmazonProvidedDNS.')
    netbios_name_servers = models.JSONField(blank=True, null=True, db_comment='The IP addresses of up to four NetBIOS name servers.')
    netbios_node_type = models.JSONField(blank=True, null=True, db_comment='The NetBIOS node type (1, 2, 4, or 8).')
    ntp_servers = models.JSONField(blank=True, null=True, db_comment='The IP addresses of up to four Network Time Protocol (NTP) servers.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags that are attached to vpc dhcp options.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_vpc_dhcp_options'
        db_table_comment = 'AWS VPC DHCP Options'


class AwsVpcEgressOnlyInternetGateway(models.Model):
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The ID of the egress-only internet gateway.')
    attachments = models.JSONField(blank=True, null=True, db_comment='Information about the attachment of the egress-only internet gateway.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags that are attached to egress only internet gateway.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_vpc_egress_only_internet_gateway'
        db_table_comment = 'AWS VPC Egress Only Internet Gateway'


class AwsVpcEip(models.Model):
    allocation_id = models.TextField(blank=True, null=True, db_comment='Contains the ID representing the allocation of the address for use with EC2-VPC.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the VPC EIP.')
    public_ip = models.GenericIPAddressField(blank=True, null=True, db_comment='Contains the Elastic IP address.')
    public_ipv4_pool = models.TextField(blank=True, null=True, db_comment='The ID of an address pool.')
    domain = models.TextField(blank=True, null=True, db_comment='Indicates whether Elastic IP address is for use with instances in EC2-Classic (standard) or instances in a VPC (vpc).')
    association_id = models.TextField(blank=True, null=True, db_comment='Contains the ID representing the association of the address with an instance in a VPC.')
    carrier_ip = models.TextField(blank=True, null=True, db_comment='The carrier IP address associated. This option is only available for network interfaces which reside in a subnet in a Wavelength Zone (for example an EC2 instance).')
    customer_owned_ip = models.GenericIPAddressField(blank=True, null=True, db_comment='The customer-owned IP address.')
    customer_owned_ipv4_pool = models.TextField(blank=True, null=True, db_comment='The ID of the customer-owned address pool.')
    instance_id = models.TextField(blank=True, null=True, db_comment='Contains the ID of the instance that the address is associated with.')
    network_border_group = models.TextField(blank=True, null=True, db_comment='The name of the unique set of Availability Zones, Local Zones, or Wavelength Zones from which AWS advertises IP addresses.')
    network_interface_id = models.TextField(blank=True, null=True, db_comment='The ID of the network interface.')
    network_interface_owner_id = models.TextField(blank=True, null=True, db_comment='The ID of the AWS account that owns the network interface.')
    private_ip_address = models.GenericIPAddressField(blank=True, null=True, db_comment='The private IP address associated with the Elastic IP address.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags that are attached to the vpc.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_vpc_eip'
        db_table_comment = 'AWS VPC Elastic IP'


class AwsVpcEipAddressTransfer(models.Model):
    allocation_id = models.TextField(blank=True, null=True, db_comment='The allocation ID of an Elastic IP address.')
    address_transfer_status = models.TextField(blank=True, null=True, db_comment='The Elastic IP address transfer status.')
    public_ip = models.TextField(blank=True, null=True, db_comment='The Elastic IP address being transferred.')
    transfer_account_id = models.TextField(blank=True, null=True, db_comment='The ID of the account that you want to transfer the Elastic IP address to.')
    transfer_offer_accepted_timestamp = models.DateTimeField(blank=True, null=True, db_comment='The timestamp when the Elastic IP address transfer was accepted.')
    transfer_offer_expiration_timestamp = models.DateTimeField(blank=True, null=True, db_comment='The timestamp when the Elastic IP address transfer expired.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_vpc_eip_address_transfer'
        db_table_comment = 'AWS VPC Elastic IP Address Transfer'


class AwsVpcEndpoint(models.Model):
    vpc_endpoint_id = models.TextField(blank=True, null=True, db_comment='The ID of the VPC endpoint.')
    service_name = models.TextField(blank=True, null=True, db_comment='The name of the service to which the endpoint is associated.')
    owner_id = models.TextField(blank=True, null=True, db_comment='The ID of the AWS account that owns the VPC endpoint.')
    vpc_id = models.TextField(blank=True, null=True, db_comment='The ID of the VPC to which the endpoint is associated.')
    vpc_endpoint_type = models.TextField(blank=True, null=True, db_comment='The type of endpoint.')
    state = models.TextField(blank=True, null=True, db_comment='The state of the VPC endpoint.')
    private_dns_enabled = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the VPC is associated with a private hosted zone.')
    requester_managed = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the VPC endpoint is being managed by its service.')
    policy = models.JSONField(blank=True, null=True, db_comment='The policy document associated with the endpoint, if applicable.')
    policy_std = models.JSONField(blank=True, null=True, db_comment='Contains the policy in a canonical form for easier searching.')
    subnet_ids = models.JSONField(blank=True, null=True, db_comment='One or more subnets in which the endpoint is located.')
    route_table_ids = models.JSONField(blank=True, null=True, db_comment='One or more route tables associated with the endpoint.')
    groups = models.JSONField(blank=True, null=True, db_comment='Information about the security groups that are associated with the network interface.')
    network_interface_ids = models.JSONField(blank=True, null=True, db_comment='One or more network interfaces for the endpoint.')
    dns_entries = models.JSONField(blank=True, null=True, db_comment='The DNS entries for the endpoint.')
    creation_timestamp = models.DateTimeField(blank=True, null=True, db_comment='The date and time that the VPC endpoint was created.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the VPC endpoint.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_vpc_endpoint'
        db_table_comment = 'AWS VPC Endpoint'


class AwsVpcEndpointService(models.Model):
    service_name = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the service.')
    service_id = models.TextField(blank=True, null=True, db_comment='The ID of the endpoint service.')
    owner = models.TextField(blank=True, null=True, db_comment='The AWS account ID of the service owner.')
    acceptance_required = models.BooleanField(blank=True, null=True, db_comment='Indicates whether VPC endpoint connection requests to the service must be accepted by the service owner.')
    manages_vpc_endpoints = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the service manages its VPC endpoints. Management of the service VPC endpoints using the VPC endpoint API is restricted.')
    private_dns_name = models.TextField(blank=True, null=True, db_comment='The private DNS name for the service.')
    private_dns_name_verification_state = models.TextField(blank=True, null=True, db_comment='The verification state of the VPC endpoint service. Consumers of the endpoint service cannot use the private name when the state is not verified.')
    vpc_endpoint_policy_supported = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the service supports endpoint policies.')
    availability_zones = models.JSONField(blank=True, null=True, db_comment='The Availability Zones in which the service is available.')
    base_endpoint_dns_names = models.JSONField(blank=True, null=True, db_comment='The DNS names for the service.')
    service_type = models.JSONField(blank=True, null=True, db_comment='The type of service.')
    vpc_endpoint_connections = models.JSONField(blank=True, null=True, db_comment='Information about one or more VPC endpoint connections.')
    vpc_endpoint_service_permissions = models.JSONField(blank=True, null=True, db_comment='Information about one or more allowed principals.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the service.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_vpc_endpoint_service'
        db_table_comment = 'AWS VPC Endpoint Service'


class AwsVpcFlowLog(models.Model):
    flow_log_id = models.TextField(blank=True, null=True, db_comment='The ID of the flow log.')
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time the flow log was created.')
    deliver_logs_error_message = models.TextField(blank=True, null=True, db_comment='Information about the error that occurred.')
    deliver_logs_permission_arn = models.TextField(blank=True, null=True, db_comment='The ARN of the IAM role that posts logs to CloudWatch Logs.')
    deliver_logs_status = models.TextField(blank=True, null=True, db_comment='The status of the logs delivery (SUCCESS | FAILED).')
    flow_log_status = models.TextField(blank=True, null=True, db_comment='The status of the flow log (ACTIVE).')
    log_group_name = models.TextField(blank=True, null=True, db_comment='The name of the flow log group.')
    resource_id = models.TextField(blank=True, null=True, db_comment='The ID of the VPC, subnet, or network interface.')
    traffic_type = models.TextField(blank=True, null=True, db_comment="The type of traffic. Valid values are: 'ACCEPT', 'REJECT',  'ALL'.")
    log_destination_type = models.TextField(blank=True, null=True, db_comment='Specifies the type of destination to which the flow log data is published.')
    log_destination = models.TextField(blank=True, null=True, db_comment='Specifies the destination to which the flow log data is published.')
    bucket_name = models.TextField(blank=True, null=True, db_comment='The name of the destination bucket to which the flow log data is published.')
    log_format = models.TextField(blank=True, null=True, db_comment='The format of the flow log record.')
    max_aggregation_interval = models.BigIntegerField(blank=True, null=True, db_comment='The maximum interval of time, in seconds, during which a flow of packets is captured and aggregated into a flow log record.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the VPC flowlog.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_vpc_flow_log'
        db_table_comment = 'AWS VPC Flowlog'
# Unable to inspect table 'aws_vpc_flow_log_event'
# The error was: rpc error: code = Internal desc = aws: rpc error: code = Internal desc = 'List' call for table 'aws_vpc_flow_log_event' is missing 1 required qual: column:'log_group_name' operator: =



class AwsVpcInternetGateway(models.Model):
    internet_gateway_id = models.TextField(blank=True, null=True, db_comment='The ID of the internet gateway.')
    owner_id = models.TextField(blank=True, null=True, db_comment='The ID of the AWS account that owns the internet gateway.')
    attachments = models.JSONField(blank=True, null=True, db_comment='Any VPCs attached to the internet gateway.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='tags assigned to the internet gateway.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_vpc_internet_gateway'
        db_table_comment = 'AWS VPC Internet Gateway'


class AwsVpcNatGateway(models.Model):
    nat_gateway_id = models.TextField(blank=True, null=True, db_comment='The ID of the NAT gateway.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the NAT gateway.')
    nat_gateway_addresses = models.JSONField(blank=True, null=True, db_comment='Information about the IP addresses and network interface associated with the NAT gateway.')
    state = models.TextField(blank=True, null=True, db_comment='The current state of the NAT gateway (pending | failed | available | deleting | deleted).')
    create_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time the NAT gateway was created.')
    vpc_id = models.TextField(blank=True, null=True, db_comment='The ID of the VPC in which the NAT gateway is located.')
    subnet_id = models.TextField(blank=True, null=True, db_comment='The ID of the subnet in which the NAT gateway is located.')
    delete_time = models.DateTimeField(blank=True, null=True, db_comment='The date and time the NAT gateway was deleted, if applicable.')
    failure_code = models.TextField(blank=True, null=True, db_comment='If the NAT gateway could not be created, specifies the error code for the failure. (InsufficientFreeAddressesInSubnet | Gateway.NotAttached | InvalidAllocationID.NotFound | Resource.AlreadyAssociated | InternalError | InvalidSubnetID.NotFound).')
    failure_message = models.TextField(blank=True, null=True, db_comment='If the NAT gateway could not be created, specifies the error message for the failure.')
    provisioned_bandwidth = models.JSONField(blank=True, null=True, db_comment='Reserved. If you need to sustain traffic greater than the documented limits (https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html).')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags that are attached to NAT gateway.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_vpc_nat_gateway'
        db_table_comment = 'AWS VPC Network Address Translation Gateway'


class AwsVpcNatGatewayMetricBytesOutToDestination(models.Model):
    nat_gateway_id = models.TextField(blank=True, null=True, db_comment='The ID of the NAT gateway.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric.')
    namespace = models.TextField(blank=True, null=True, db_comment='The metric namespace.')
    average = models.FloatField(blank=True, null=True, db_comment='The average of the metric values that correspond to the data point.')
    maximum = models.FloatField(blank=True, null=True, db_comment='The maximum metric value for the data point.')
    minimum = models.FloatField(blank=True, null=True, db_comment='The minimum metric value for the data point.')
    sample_count = models.FloatField(blank=True, null=True, db_comment='The number of metric values that contributed to the aggregate value of this data point.')
    sum = models.FloatField(blank=True, null=True, db_comment='The sum of the metric values for the data point.')
    unit = models.TextField(blank=True, null=True, db_comment='The standard unit for the data point.')
    timestamp = models.DateTimeField(blank=True, null=True, db_comment='The time stamp used for the data point.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_vpc_nat_gateway_metric_bytes_out_to_destination'
        db_table_comment = 'AWS VPC Nat Gateway Cloudwatch Metrics - BytesOutToDestination'


class AwsVpcNetworkAcl(models.Model):
    network_acl_id = models.TextField(blank=True, null=True, db_comment='The ID of the network ACL.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the network ACL.')
    is_default = models.BooleanField(blank=True, null=True, db_comment='Indicates whether this is the default network ACL for the VPC.')
    vpc_id = models.TextField(blank=True, null=True, db_comment='The ID of the VPC for the network ACL.')
    owner_id = models.TextField(blank=True, null=True, db_comment='The ID of the AWS account that owns the network ACL.')
    associations = models.JSONField(blank=True, null=True, db_comment='Any associations between the network ACL and one or more subnets.')
    entries = models.JSONField(blank=True, null=True, db_comment='One or more entries (rules) in the network ACL.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags that are attached to Network ACL.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_vpc_network_acl'
        db_table_comment = 'AWS VPC Network ACL'


class AwsVpcPeeringConnection(models.Model):
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='The ID of the VPC peering connection.')
    status_code = models.TextField(blank=True, null=True, db_comment="The status of the VPC peering connection. Possible values include: 'pending-acceptance', 'failed', 'expired', 'provisioning', 'active', 'deleting', 'deleted' or 'rejected'.")
    accepter_cidr_block = models.TextField(blank=True, null=True, db_comment='The IPv4 CIDR block for the accepter VPC.')  # This field type is a guess.
    accepter_owner_id = models.TextField(blank=True, null=True, db_comment='The ID of the Amazon Web Services account that owns the accepter VPC.')
    accepter_region = models.TextField(blank=True, null=True, db_comment='The Region in which the accepter VPC is located.')
    accepter_vpc_id = models.TextField(blank=True, null=True, db_comment='The ID of the accepter VPC.')
    expiration_time = models.DateTimeField(blank=True, null=True, db_comment='The time that an unaccepted VPC peering connection will expire.')
    requester_cidr_block = models.TextField(blank=True, null=True, db_comment='The IPv4 CIDR block for the requester VPC.')  # This field type is a guess.
    requester_owner_id = models.TextField(blank=True, null=True, db_comment='The ID of the Amazon Web Services account that owns the requester VPC.')
    requester_region = models.TextField(blank=True, null=True, db_comment='The Region in which the requester VPC is located.')
    requester_vpc_id = models.TextField(blank=True, null=True, db_comment='The ID of the requester VPC.')
    status_message = models.TextField(blank=True, null=True, db_comment='A message that provides more information about the status, if applicable.')
    accepter_cidr_block_set = models.JSONField(blank=True, null=True, db_comment='Information about the IPv4 CIDR blocks for the accepter VPC.')
    accepter_ipv6_cidr_block_set = models.JSONField(blank=True, null=True, db_comment='The IPv6 CIDR block for the accepter VPC.')
    accepter_peering_options = models.JSONField(blank=True, null=True, db_comment='Information about the VPC peering connection options for the accepter VPC.')
    requester_cidr_block_set = models.JSONField(blank=True, null=True, db_comment='Information about the IPv4 CIDR blocks for the requester VPC.')
    requester_ipv6_cidr_block_set = models.JSONField(blank=True, null=True, db_comment='The IPv6 CIDR block for the requester VPC.')
    requester_peering_options = models.JSONField(blank=True, null=True, db_comment='Information about the VPC peering connection options for the requester VPC.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='The tags assigned to the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_vpc_peering_connection'
        db_table_comment = 'AWS VPC Peering Connection'


class AwsVpcRoute(models.Model):
    route_table_id = models.TextField(blank=True, null=True, db_comment='The ID of the route table containing the route.')
    state = models.TextField(blank=True, null=True, db_comment="The state of the route. The blackhole state indicates that the route's target isn't available (for example, the specified gateway isn't attached to the VPC, or the specified NAT instance has been terminated).")
    destination_cidr_block = models.TextField(blank=True, null=True, db_comment='The IPv4 CIDR block used for the destination match.')  # This field type is a guess.
    destination_ipv6_cidr_block = models.TextField(blank=True, null=True, db_comment='The IPv6 CIDR block used for the destination match.')  # This field type is a guess.
    carrier_gateway_id = models.TextField(blank=True, null=True, db_comment='The ID of the carrier gateway.')
    destination_prefix_list_id = models.TextField(blank=True, null=True, db_comment='The prefix of the AWS service.')
    egress_only_internet_gateway_id = models.TextField(blank=True, null=True, db_comment='The ID of the egress-only internet gateway.')
    gateway_id = models.TextField(blank=True, null=True, db_comment='The ID of a gateway attached to your VPC.')
    instance_id = models.TextField(blank=True, null=True, db_comment='The ID of a NAT instance in your VPC.')
    instance_owner_id = models.TextField(blank=True, null=True, db_comment='The AWS account ID of the owner of the instance.')
    local_gateway_id = models.TextField(blank=True, null=True, db_comment='The ID of the local gateway.')
    nat_gateway_id = models.TextField(blank=True, null=True, db_comment='The ID of a NAT gateway.')
    network_interface_id = models.TextField(blank=True, null=True, db_comment='The ID of the network interface.')
    transit_gateway_id = models.TextField(blank=True, null=True, db_comment='The ID of a transit gateway.')
    vpc_peering_connection_id = models.TextField(blank=True, null=True, db_comment='The ID of a VPC peering connection.')
    origin = models.TextField(blank=True, null=True, db_comment='Describes how the route was created. CreateRouteTable - The route was automatically created when the route table was created. CreateRoute - The route was manually added to the route table. EnableVgwRoutePropagation - The route was propagated by route propagation.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_vpc_route'
        db_table_comment = 'AWS VPC Route'


class AwsVpcRouteTable(models.Model):
    route_table_id = models.TextField(blank=True, null=True, db_comment='Contains the ID of the route table.')
    vpc_id = models.TextField(blank=True, null=True, db_comment='The ID of the VPC.')
    owner_id = models.TextField(blank=True, null=True, db_comment='The ID of the AWS account that owns the route table.')
    associations = models.JSONField(blank=True, null=True, db_comment='Contains the associations between the route table and one or more subnets or a gateway.')
    routes = models.JSONField(blank=True, null=True, db_comment='A list of routes in the route table.')
    propagating_vgws = models.JSONField(blank=True, null=True, db_comment='A list of virtual private gateway (VGW) propagating routes.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags that are attached to the route table.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_vpc_route_table'
        db_table_comment = 'AWS VPC Route table'


class AwsVpcSecurityGroup(models.Model):
    group_name = models.TextField(blank=True, null=True, db_comment='The friendly name that identifies the security group.')
    group_id = models.TextField(blank=True, null=True, db_comment='Contains the unique ID to identify a security group.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the security group.')
    description = models.TextField(blank=True, null=True, db_comment='A description of the security group.')
    vpc_id = models.TextField(blank=True, null=True, db_comment='The ID of the VPC for the security group.')
    owner_id = models.TextField(blank=True, null=True, db_comment='Contains the AWS account ID of the owner of the security group.')
    ip_permissions = models.JSONField(blank=True, null=True, db_comment='A list of inbound rules associated with the security group')
    ip_permissions_egress = models.JSONField(blank=True, null=True, db_comment='A list of outbound rules associated with the security group')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags that are attached to the security group')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_vpc_security_group'
        db_table_comment = 'AWS VPC Security Group'


class AwsVpcSecurityGroupRule(models.Model):
    security_group_rule_id = models.TextField(blank=True, null=True, db_comment='The ID of the security group rule.')
    group_name = models.TextField(blank=True, null=True, db_comment='[DEPRECATED] This column has been deprecated and will be removed in a future release. The name of the security group to which rule belongs.')
    group_id = models.TextField(blank=True, null=True, db_comment='The ID of the security group to which rule belongs.')
    is_egress = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the security group rule is an outbound rule.')
    type = models.TextField(blank=True, null=True, db_comment='Type of the rule ( ingress | egress).')
    vpc_id = models.TextField(blank=True, null=True, db_comment='[DEPRECATED] This column has been deprecated and will be removed in a future release. The ID of the VPC for the security group.')
    owner_id = models.TextField(blank=True, null=True, db_comment='[DEPRECATED] This column has been deprecated and will be removed in a future release, use group_owner_id instead. The AWS account ID of the owner of the security group to which rule belongs.')
    group_owner_id = models.TextField(blank=True, null=True, db_comment='The ID of the Amazon Web Services account that owns the security group.')
    description = models.TextField(blank=True, null=True, db_comment='The security group rule description.')
    ip_protocol = models.TextField(blank=True, null=True, db_comment='The IP protocol name (tcp, udp, icmp, icmpv6) or number [see Protocol Numbers ](http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml). Use -1 to specify all protocols. When authorizing security group rules, specifying -1 or a protocol number other than tcp, udp, icmp, or icmpv6 allows traffic on all ports, regardless of any port range specified. For tcp, udp, and icmp, a port range is specified. For icmpv6, the port range is optional. If port range is omitted, traffic for all types and codes is allowed.')
    from_port = models.BigIntegerField(blank=True, null=True, db_comment='The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number. A value of -1 indicates all ICMP/ICMPv6 types.')
    to_port = models.BigIntegerField(blank=True, null=True, db_comment='The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of -1 indicates all ICMP/ICMPv6 codes.')
    cidr_ip = models.TextField(blank=True, null=True, db_comment='[DEPRECATED] This column has been deprecated and will be removed in a future release, use cidr_ipv4 instead. The IPv4 CIDR range.')  # This field type is a guess.
    cidr_ipv4 = models.TextField(blank=True, null=True, db_comment='The IPv4 CIDR range.')  # This field type is a guess.
    cidr_ipv6 = models.TextField(blank=True, null=True, db_comment='The IPv6 CIDR range.')  # This field type is a guess.
    pair_group_id = models.TextField(blank=True, null=True, db_comment='[DEPRECATED] This column has been deprecated and will be removed in a future release, use referenced_group_id instead. The ID of the referenced security group.')
    referenced_group_id = models.TextField(blank=True, null=True, db_comment='The ID of the referenced security group.')
    pair_group_name = models.TextField(blank=True, null=True, db_comment='[DEPRECATED] This column has been deprecated and will be removed in a future release. The name of the referenced security group.')
    pair_peering_status = models.TextField(blank=True, null=True, db_comment='[DEPRECATED] This column has been deprecated and will be removed in a future release, use referenced_peering_status instead. Please use the referenced_peering_status column instead. The status of a VPC peering connection, if applicable.')
    referenced_peering_status = models.TextField(blank=True, null=True, db_comment='The status of a VPC peering connection, if applicable.')
    pair_user_id = models.TextField(blank=True, null=True, db_comment='[DEPRECATED] This column has been deprecated and will be removed in a future release, use referenced_user_id instead. The ID of an AWS account. For a referenced security group in another VPC, the account ID of the referenced security group is returned in the response. If the referenced security group is deleted, this value is not returned.')
    referenced_user_id = models.TextField(blank=True, null=True, db_comment='The ID of an AWS account. For a referenced security group in another VPC, the account ID of the referenced security group is returned in the response. If the referenced security group is deleted, this value is not returned.')
    pair_vpc_id = models.TextField(blank=True, null=True, db_comment='[DEPRECATED] This column has been deprecated and will be removed in a future release, use referenced_vpc_id instead. The ID of the VPC for the referenced security group, if applicable.')
    referenced_vpc_id = models.TextField(blank=True, null=True, db_comment='The ID of the VPC for the referenced security group, if applicable.')
    pair_vpc_peering_connection_id = models.TextField(blank=True, null=True, db_comment='[DEPRECATED] This column has been deprecated and will be removed in a future release, use referenced_vpc_peering_connection_id instead. The ID of the VPC peering connection, if applicable.')
    referenced_vpc_peering_connection_id = models.TextField(blank=True, null=True, db_comment='The ID of the VPC peering connection, if applicable.')
    prefix_list_id = models.TextField(blank=True, null=True, db_comment='The ID of the prefix list.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_vpc_security_group_rule'
        db_table_comment = 'AWS VPC Security Group Rule'


class AwsVpcSubnet(models.Model):
    subnet_id = models.TextField(blank=True, null=True, db_comment='Contains the unique ID to specify a subnet.')
    subnet_arn = models.TextField(blank=True, null=True, db_comment='Contains the Amazon Resource Name (ARN) of the subnet.')
    vpc_id = models.TextField(blank=True, null=True, db_comment='ID of the VPC, the subnet is in.')
    cidr_block = models.TextField(blank=True, null=True, db_comment='Contains the IPv4 CIDR block assigned to the subnet.')  # This field type is a guess.
    state = models.TextField(blank=True, null=True, db_comment='Current state of the subnet.')
    owner_id = models.TextField(blank=True, null=True, db_comment='Contains the AWS account that own the subnet.')
    assign_ipv6_address_on_creation = models.BooleanField(blank=True, null=True, db_comment='Indicates whether a network interface created in this subnet (including a network interface created by RunInstances) receives an IPv6 address.')
    available_ip_address_count = models.BigIntegerField(blank=True, null=True, db_comment='The number of unused private IPv4 addresses in the subnet. The IPv4 addresses for any stopped instances are considered unavailable.')
    availability_zone = models.TextField(blank=True, null=True, db_comment='The Availability Zone of the subnet.')
    availability_zone_id = models.TextField(blank=True, null=True, db_comment='The AZ ID of the subnet.')
    customer_owned_ipv4_pool = models.TextField(blank=True, null=True, db_comment='The customer-owned IPv4 address pool associated with the subnet.')
    default_for_az = models.BooleanField(blank=True, null=True, db_comment='Indicates whether this is the default subnet for the Availability Zone.')
    map_customer_owned_ip_on_launch = models.BooleanField(blank=True, null=True, db_comment='Indicates whether a network interface created in this subnet (including a network interface created by RunInstances) receives a customer-owned IPv4 address.')
    map_public_ip_on_launch = models.BooleanField(blank=True, null=True, db_comment='Indicates whether instances launched in this subnet receive a public IPv4 address.')
    outpost_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the Outpost. Available only if subnet is on an outpost.')
    ipv6_cidr_block_association_set = models.JSONField(blank=True, null=True, db_comment='A list of IPv6 CIDR blocks associated with the subnet.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags that are attached to the subnet.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_vpc_subnet'
        db_table_comment = 'AWS VPC Subnet'


class AwsVpcVerifiedAccessEndpoint(models.Model):
    verified_access_endpoint_id = models.TextField(blank=True, null=True, db_comment='The ID of the AWS verified access endpoint.')
    verified_access_group_id = models.TextField(blank=True, null=True, db_comment='The ID of the AWS verified access group.')
    verified_access_instance_id = models.TextField(blank=True, null=True, db_comment='The ID of the AWS verified access instance.')
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='The creation time.')
    status_code = models.TextField(blank=True, null=True, db_comment='The endpoint status code. Possible values are pending, active, updating, deleting or deleted.')
    application_domain = models.TextField(blank=True, null=True, db_comment='The DNS name for users to reach your application.')
    attachment_type = models.TextField(blank=True, null=True, db_comment='The type of attachment used to provide connectivity between the AWS verified access endpoint and the application.')
    deletion_time = models.DateTimeField(blank=True, null=True, db_comment='The deletion time.')
    description = models.TextField(blank=True, null=True, db_comment='A description for the AWS verified access endpoint.')
    device_validation_domain = models.TextField(blank=True, null=True, db_comment='Returned if endpoint has a device trust provider attached.')
    domain_certificate_arn = models.TextField(blank=True, null=True, db_comment='The ARN of a public TLS/SSL certificate imported into or created with ACM.')
    endpoint_domain = models.TextField(blank=True, null=True, db_comment='A DNS name that is generated for the endpoint..')
    endpoint_type = models.TextField(blank=True, null=True, db_comment='The type of AWS verified access endpoint. Incoming application requests will be sent to an IP address, load balancer or a network interface depending on the endpoint type specified. Possible values are load-balancer or network-interface.')
    last_updated_time = models.DateTimeField(blank=True, null=True, db_comment='The last updated time.')
    load_balancer_options = models.JSONField(blank=True, null=True, db_comment='The load balancer details if creating the AWS verified access endpoint as load-balancertype.')
    network_interface_options = models.JSONField(blank=True, null=True, db_comment='The options for network-interface type endpoint.')
    status = models.JSONField(blank=True, null=True, db_comment='The endpoint status.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_vpc_verified_access_endpoint'
        db_table_comment = 'AWS VPC verified access Endpoint'


class AwsVpcVerifiedAccessGroup(models.Model):
    verified_access_group_id = models.TextField(blank=True, null=True, db_comment='The ID of the verified access group.')
    arn = models.TextField(blank=True, null=True, db_comment='The ARN of the verified access group.')
    verified_access_instance_id = models.TextField(blank=True, null=True, db_comment='The ID of the AWS Verified Access instance.')
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='The creation time.')
    deletion_time = models.DateTimeField(blank=True, null=True, db_comment='The deleteion time.')
    description = models.TextField(blank=True, null=True, db_comment='A description for the AWS verified access group.')
    last_updated_time = models.DateTimeField(blank=True, null=True, db_comment='The last updated time.')
    owner = models.TextField(blank=True, null=True, db_comment='The AWS account number that owns the group.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_vpc_verified_access_group'
        db_table_comment = 'AWS VPC Verified Access Group'


class AwsVpcVerifiedAccessInstance(models.Model):
    verified_access_instance_id = models.TextField(blank=True, null=True, db_comment='The ID of the AWS Verified Access instance.')
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='The creation time.')
    description = models.TextField(blank=True, null=True, db_comment='A description for the AWS Verified Access instance.')
    last_updated_time = models.DateTimeField(blank=True, null=True, db_comment='The last updated time.')
    verified_access_trust_providers = models.JSONField(blank=True, null=True, db_comment='The IDs of the AWS Verified Access trusted providers.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_vpc_verified_access_instance'
        db_table_comment = 'AWS VPC Verified Access Instance'


class AwsVpcVerifiedAccessTrustProvider(models.Model):
    verified_access_trust_provider_id = models.TextField(blank=True, null=True, db_comment='The ID of the AWS Verified Access trust provider.')
    creation_time = models.DateTimeField(blank=True, null=True, db_comment='The creation time.')
    description = models.TextField(blank=True, null=True, db_comment='A description for the AWS Verified Access trust provider.')
    device_trust_provider_type = models.TextField(blank=True, null=True, db_comment='The type of device-based trust provider.')
    last_updated_time = models.DateTimeField(blank=True, null=True, db_comment='The last updated time.')
    policy_reference_name = models.TextField(blank=True, null=True, db_comment='The identifier to be used when working with policy rules.')
    trust_provider_type = models.TextField(blank=True, null=True, db_comment='The type of Verified Access trust provider.')
    user_trust_provider_type = models.TextField(blank=True, null=True, db_comment='The type of user-based trust provider.')
    oidc_options = models.JSONField(blank=True, null=True, db_comment='The OpenID Connect details for an oidc-type, user-identity based trust provider.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_vpc_verified_access_trust_provider'
        db_table_comment = 'AWS VPC Verified Access Trust Provider'


class AwsVpcVpnConnection(models.Model):
    vpn_connection_id = models.TextField(blank=True, null=True, db_comment='The ID of the VPN connection.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) specifying the VPN connection.')
    state = models.TextField(blank=True, null=True, db_comment='The current state of the VPN connection.')
    type = models.TextField(blank=True, null=True, db_comment='The type of VPN connection.')
    category = models.TextField(blank=True, null=True, db_comment='The category of the VPN connection. A value of VPN indicates an AWS VPN connection.')
    vpn_gateway_id = models.TextField(blank=True, null=True, db_comment='The ID of the virtual private gateway at the AWS side of the VPN connection.')
    customer_gateway_id = models.TextField(blank=True, null=True, db_comment='The ID of the customer gateway at your end of the VPN connection.')
    customer_gateway_configuration = models.TextField(blank=True, null=True, db_comment="The configuration information for the VPN connection's customer gateway.")
    transit_gateway_id = models.TextField(blank=True, null=True, db_comment='The ID of the transit gateway associated with the VPN connection.')
    options = models.JSONField(blank=True, null=True, db_comment='The VPN connection options.')
    routes = models.JSONField(blank=True, null=True, db_comment='The static routes associated with the VPN connection.')
    vgw_telemetry = models.JSONField(blank=True, null=True, db_comment='Information about the VPN tunnel.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags that are attached to VPN gateway.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_vpc_vpn_connection'
        db_table_comment = 'AWS VPC VPN Connection'


class AwsVpcVpnGateway(models.Model):
    vpn_gateway_id = models.TextField(blank=True, null=True, db_comment='The ID of the virtual private gateway.')
    state = models.TextField(blank=True, null=True, db_comment='The current state of the virtual private gateway.')
    type = models.TextField(blank=True, null=True, db_comment='The type of VPN connection the virtual private gateway supports.')
    amazon_side_asn = models.BigIntegerField(blank=True, null=True, db_comment='The private Autonomous System Number (ASN) for the Amazon side of a BGP session.')
    availability_zone = models.TextField(blank=True, null=True, db_comment='The Availability Zone where the virtual private gateway was created, if applicable. This field may be empty or not returned.')
    vpc_attachments = models.JSONField(blank=True, null=True, db_comment='Any VPCs attached to the virtual private gateway.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags that are attached to VPN gateway.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_vpc_vpn_gateway'
        db_table_comment = 'AWS VPC VPN Gateway'


class AwsWafRateBasedRule(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name for the rule.')
    rule_id = models.TextField(blank=True, null=True, db_comment='The ID of the Rule.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name or description for the metrics for a RateBasedRule.')
    rate_key = models.TextField(blank=True, null=True, db_comment='The field that AWS WAF uses to determine if requests are likely arriving from single source and thus subject to rate monitoring.')
    rate_limit = models.BigIntegerField(blank=True, null=True, db_comment='The maximum number of requests, which have an identical value in the field specified by the RateKey, allowed in a five-minute period.')
    predicates = models.JSONField(blank=True, null=True, db_comment='The Predicates object contains one Predicate element for each ByteMatchSet, IPSet or SqlInjectionMatchSet object that you want to include in a RateBasedRule.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the Rule.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_waf_rate_based_rule'
        db_table_comment = 'AWS WAF Rate Based Rule'


class AwsWafRule(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name for the rule.')
    rule_id = models.TextField(blank=True, null=True, db_comment='The ID of the Rule.')
    metric_name = models.TextField(blank=True, null=True, db_comment='The name of the metric for the Rule.')
    predicates = models.JSONField(blank=True, null=True, db_comment='The Predicates object contains one Predicate element for each ByteMatchSet,IPSet, or SqlInjectionMatchSet object that you want to include in a Rule.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags assigned to the Rule.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_waf_rule'
        db_table_comment = 'AWS WAF Rule'


class AwsWafRuleGroup(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the rule group.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the entity.')
    rule_group_id = models.TextField(blank=True, null=True, db_comment='A unique identifier for the rule group.')
    metric_name = models.TextField(blank=True, null=True, db_comment='A friendly name or description for the metrics for this RuleGroup.')
    activated_rules = models.JSONField(blank=True, null=True, db_comment='A list of activated rules associated with the resource.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags associated with the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_waf_rule_group'
        db_table_comment = 'AWS WAF Rule Group'


class AwsWafWebAcl(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the Web ACL. You cannot change the name of a Web ACL after you create it.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the entity.')
    web_acl_id = models.TextField(blank=True, null=True, db_comment='The unique identifier for the Web ACL.')
    default_action = models.TextField(blank=True, null=True, db_comment='The action to perform if none of the Rules contained in the WebACL match.')
    metric_name = models.TextField(blank=True, null=True, db_comment='A friendly name or description for the metrics for this WebACL.')
    logging_configuration = models.JSONField(blank=True, null=True, db_comment='The logging configuration for the specified web ACL.')
    rules = models.JSONField(blank=True, null=True, db_comment='The Rule statements used to identify the web requests that you want to allow, block, or count.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags associated with the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_waf_web_acl'
        db_table_comment = 'AWS WAF Web ACL'


class AwsWafregionalRule(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The friendly name or description for the Rule.')
    arn = models.TextField(blank=True, null=True, db_comment='Amazon Resource Name (ARN) of the Rule.')
    rule_id = models.TextField(blank=True, null=True, db_comment='A unique identifier for a Rule.')
    metric_name = models.TextField(blank=True, null=True, db_comment='A friendly name or description for the metrics for this Rule.')
    predicates = models.JSONField(blank=True, null=True, db_comment='The Predicates object contains one Predicate element for each ByteMatchSet,IPSet, or SqlInjectionMatchSet object that you want to include in a Rule.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_wafregional_rule'
        db_table_comment = 'AWS WAF Regional Rule'


class AwsWafregionalRuleGroup(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the rule group.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the entity.')
    rule_group_id = models.TextField(blank=True, null=True, db_comment='A unique identifier for the rule group.')
    metric_name = models.TextField(blank=True, null=True, db_comment='A friendly name or description for the metrics for this RuleGroup.')
    activated_rules = models.JSONField(blank=True, null=True, db_comment='A list of activated rules associated with the resource.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags associated with the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_wafregional_rule_group'
        db_table_comment = 'AWS WAF Regional Rule Group'


class AwsWafregionalWebAcl(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the Web ACL. You cannot change the name of a Web ACL after you create it.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the entity.')
    web_acl_id = models.TextField(blank=True, null=True, db_comment='The unique identifier for the Web ACL.')
    default_action = models.TextField(blank=True, null=True, db_comment='The action to perform if none of the Rules contained in the WebACL match.')
    metric_name = models.TextField(blank=True, null=True, db_comment='A friendly name or description for the metrics for this WebACL.')
    logging_configuration = models.JSONField(blank=True, null=True, db_comment='The logging configuration for the web ACL.')
    resources = models.JSONField(blank=True, null=True, db_comment='An array of ARNs (Amazon Resource Names) of the resources associated with the web ACL.')
    rules = models.JSONField(blank=True, null=True, db_comment='The Rule statements used to identify the web requests that you want to allow, block, or count.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags associated with the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_wafregional_web_acl'
        db_table_comment = 'AWS WAF Regional Web ACL'


class AwsWafv2IpSet(models.Model):
    name = models.TextField(blank=True, null=True, db_comment='The name of the IP set.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the entity.')
    id = models.TextField(blank=True, null=False, primary_key=True, db_comment='A unique identifier for the IP set.')
    scope = models.TextField(blank=True, null=True, db_comment="Specifies the scope of the IP Set. Possible values are: 'REGIONAL' and 'CLOUDFRONT'.")
    description = models.TextField(blank=True, null=True, db_comment='A description of the IP set that helps with identification.')
    ip_address_version = models.TextField(blank=True, null=True, db_comment="Specifies the IP address type. Possible values are: 'IPV4' and 'IPV6'.")
    lock_token = models.TextField(blank=True, null=True, db_comment='A token used for optimistic locking.')
    addresses = models.JSONField(blank=True, null=True, db_comment='An array of strings that specify one or more IP addresses or blocks of IP addresses in Classless Inter-Domain Routing (CIDR) notation.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags associated with the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_wafv2_ip_set'
        db_table_comment = 'AWS WAFv2 IP Set'


class AwsWafv2RegexPatternSet(models.Model):
    name = models.TextField(blank=True, null=False, primary_key=True, db_comment='The name of the Regex Pattern set.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the entity.')
    id = models.TextField(blank=True, null=True, db_comment='A unique identifier for the Regex Pattern set.')
    scope = models.TextField(blank=True, null=True, db_comment="Specifies the scope of the Regex Pattern Set. Possible values are: 'REGIONAL' and 'CLOUDFRONT'.")
    description = models.TextField(blank=True, null=True, db_comment='A description of the Regex Pattern set that helps with identification.')
    lock_token = models.TextField(blank=True, null=True, db_comment='A token used for optimistic locking.')
    regular_expressions = models.JSONField(blank=True, null=True, db_comment='The list of regular expression patterns in the set.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags associated with the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_wafv2_regex_pattern_set'
        db_table_comment = 'AWS WAFv2 Regex Pattern Set'


class AwsWafv2RuleGroup(models.Model):
    name = models.TextField(blank=True, null=False, primary_key=True, db_comment='The name of the rule group.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the entity.')
    id = models.TextField(blank=True, null=True, db_comment='A unique identifier for the rule group.')
    scope = models.TextField(blank=True, null=True, db_comment="Specifies the scope of the rule group. Possible values are: 'REGIONAL' and 'CLOUDFRONT'.")
    capacity = models.BigIntegerField(blank=True, null=True, db_comment='The web ACL capacity units (WCUs) required for this rule group.')
    description = models.TextField(blank=True, null=True, db_comment='A description of the rule group that helps with identification.')
    lock_token = models.TextField(blank=True, null=True, db_comment='A token used for optimistic locking.')
    rules = models.JSONField(blank=True, null=True, db_comment='The Rule statements used to identify the web requests that you want to allow, block, or count.')
    visibility_config = models.JSONField(blank=True, null=True, db_comment='Defines and enables Amazon CloudWatch metrics and web request sample collection.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags associated with the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_wafv2_rule_group'
        db_table_comment = 'AWS WAFv2 Rule Group'


class AwsWafv2WebAcl(models.Model):
    name = models.TextField(blank=True, null=False, primary_key=True, db_comment='The name of the Web ACL. You cannot change the name of a Web ACL after you create it.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the entity.')
    id = models.TextField(blank=True, null=True, db_comment='The unique identifier for the Web ACL.')
    scope = models.TextField(blank=True, null=True, db_comment="Specifies the scope of the Web ACL. Possibles values are: 'REGIONAL' and 'CLOUDFRONT'.")
    description = models.TextField(blank=True, null=True, db_comment='A description of the Web ACL that helps with identification.')
    capacity = models.BigIntegerField(blank=True, null=True, db_comment='The Web ACL capacity units(WCUs) currently being used by this resource.')
    lock_token = models.TextField(blank=True, null=True, db_comment='A token used for optimistic locking.')
    managed_by_firewall_manager = models.BooleanField(blank=True, null=True, db_comment='Indicates whether this web ACL is managed by AWS Firewall Manager.')
    associated_resources = models.JSONField(blank=True, null=True, db_comment='The array of Amazon Resource Names (ARNs) of the associated resources.')
    default_action = models.JSONField(blank=True, null=True, db_comment='The action to perform if none of the Rules contained in the Web ACL match.')
    logging_configuration = models.JSONField(blank=True, null=True, db_comment='The logging configuration for the specified web ACL.')
    pre_process_firewall_manager_rule_groups = models.JSONField(blank=True, null=True, db_comment='The first set of rules for AWS WAF to process in the web ACL.')
    post_process_firewall_manager_rule_groups = models.JSONField(blank=True, null=True, db_comment='The last set of rules for AWS WAF to process in the web ACL.')
    rules = models.JSONField(blank=True, null=True, db_comment='The Rule statements used to identify the web requests that you want to allow, block, or count.')
    visibility_config = models.JSONField(blank=True, null=True, db_comment='Defines and enables Amazon CloudWatch metrics and web request sample collection.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='A list of tags associated with the resource.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_wafv2_web_acl'
        db_table_comment = 'AWS WAFv2 Web ACL'


class AwsWellarchitectedAnswer(models.Model):
    question_id = models.TextField(blank=True, null=True, db_comment='The ID of the question.')
    lens_alias = models.TextField(blank=True, null=True, db_comment='The alias of the lens.')
    workload_id = models.TextField(blank=True, null=True, db_comment='The ID assigned to the workload.')
    helpful_resource_display_text = models.TextField(blank=True, null=True, db_comment='The helpful resource text to be displayed.')
    helpful_resource_url = models.TextField(blank=True, null=True, db_comment='The helpful resource URL for a question.')
    improvement_plan_url = models.TextField(blank=True, null=True, db_comment='The improvement plan URL for a question. This value is only available if the question has been answered.')
    is_applicable = models.BooleanField(blank=True, null=True, db_comment='Defines whether this question is applicable to a lens review.')
    lens_arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the lens.')
    milestone_number = models.BigIntegerField(blank=True, null=True, db_comment='The milestone number.')
    notes = models.TextField(blank=True, null=True, db_comment='The notes associated with the workload.')
    pillar_id = models.TextField(blank=True, null=True, db_comment='The ID used to identify a pillar, for example, security. A pillar is identified by its PillarReviewSummary$PillarId.')
    question_description = models.TextField(blank=True, null=True, db_comment='The description of the question.')
    question_title = models.TextField(blank=True, null=True, db_comment='The title of the question.')
    reason = models.TextField(blank=True, null=True, db_comment='The reason why the question is not applicable to your workload.')
    risk = models.TextField(blank=True, null=True, db_comment='The risk for a given workload, lens review, pillar, or question.')
    choice_answers = models.JSONField(blank=True, null=True, db_comment='A list of selected choices to a question in your workload.')
    choices = models.JSONField(blank=True, null=True, db_comment='List of choices available for a question.')
    selected_choices = models.JSONField(blank=True, null=True, db_comment='List of selected choice IDs in a question answer. The values entered replace the previously selected choices.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_wellarchitected_answer'
        db_table_comment = 'AWS Well-Architected Answer'


class AwsWellarchitectedCheckDetail(models.Model):
    choice_id = models.TextField(blank=True, null=True, db_comment='The ID of a choice.')
    description = models.TextField(blank=True, null=True, db_comment='Trusted Advisor check description.')
    flagged_resources = models.BigIntegerField(blank=True, null=True, db_comment='Count of flagged resources associated to the check.')
    lens_arn = models.TextField(blank=True, null=True, db_comment='Well-Architected Lens ARN associated to the check.')
    name = models.TextField(blank=True, null=True, db_comment='Trusted Advisor check name.')
    owner_account_id = models.TextField(blank=True, null=True, db_comment='An Amazon Web Services account ID.')
    pillar_id = models.TextField(blank=True, null=True, db_comment='The ID used to identify a pillar, for example, security. A pillar is identified by its PillarReviewSummary$PillarId.')
    provider = models.TextField(blank=True, null=True, db_comment='Provider of the check related to the best practice.')
    question_id = models.TextField(blank=True, null=True, db_comment='The ID of the question.')
    reason = models.TextField(blank=True, null=True, db_comment='Reason associated to the check.')
    status = models.TextField(blank=True, null=True, db_comment='Status associated to the check.')
    updated_at = models.DateTimeField(blank=True, null=True, db_comment='The date and time recorded.')
    workload_id = models.TextField(blank=True, null=True, db_comment='The ID of the workload.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_wellarchitected_check_detail'
        db_table_comment = 'AWS Well-Architected Check Detail'


class AwsWellarchitectedCheckSummary(models.Model):
    choice_id = models.TextField(blank=True, null=True, db_comment='The ID of a choice.')
    description = models.TextField(blank=True, null=True, db_comment='Trusted Advisor check description.')
    lens_arn = models.TextField(blank=True, null=True, db_comment='Well-Architected Lens ARN associated to the check.')
    name = models.TextField(blank=True, null=True, db_comment='Trusted Advisor check name.')
    pillar_id = models.TextField(blank=True, null=True, db_comment='The ID used to identify a pillar, for example, security. A pillar is identified by its PillarReviewSummary$PillarId.')
    provider = models.TextField(blank=True, null=True, db_comment='Provider of the check related to the best practice.')
    question_id = models.TextField(blank=True, null=True, db_comment='The ID of the question.')
    status = models.TextField(blank=True, null=True, db_comment='Status associated to the check.')
    updated_at = models.DateTimeField(blank=True, null=True, db_comment='The date and time recorded.')
    workload_id = models.TextField(blank=True, null=True, db_comment='The ID of the workload.')
    account_summary = models.JSONField(blank=True, null=True, db_comment='Account summary associated to the check.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_wellarchitected_check_summary'
        db_table_comment = 'AWS Well-Architected Check Summary'


class AwsWellarchitectedConsolidatedReport(models.Model):
    workload_name = models.TextField(blank=True, null=True, db_comment='The name of the workload.')
    workload_arn = models.TextField(blank=True, null=True, db_comment='The ARN for the workload.')
    workload_id = models.TextField(blank=True, null=True, db_comment='The ID assigned to the workload.')
    include_shared_resources = models.BooleanField(blank=True, null=True, db_comment='Set to true to have shared resources included in the report.')
    base64_string = models.JSONField(blank=True, null=True, db_comment='The Base64-encoded string representation of a lens review report. This data can be used to create a PDF file. Only returned by GetConsolidatedReport when PDF format is requested.')
    lenses_applied_count = models.BigIntegerField(blank=True, null=True, db_comment='The total number of lenses applied to the workload.')
    metric_type = models.TextField(blank=True, null=True, db_comment='The metric type of a metric in the consolidated report. Currently only WORKLOAD metric types are supported.')
    updated_at = models.DateTimeField(blank=True, null=True, db_comment='The date and time when the consolidated report was updated.')
    lenses = models.JSONField(blank=True, null=True, db_comment='The metrics for the lenses in the workload.')
    risk_counts = models.JSONField(blank=True, null=True, db_comment='A map from risk names to the count of how many questions have that rating.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_wellarchitected_consolidated_report'
        db_table_comment = 'AWS Well-Architected Consolidated Report'


class AwsWellarchitectedLens(models.Model):
    lens_name = models.TextField(blank=True, null=True, db_comment='The full name of the lens.')
    lens_alias = models.TextField(blank=True, null=True, db_comment='The alias of the lens.')
    arn = models.TextField(blank=True, null=True, db_comment='The Amazon Resource Name (ARN) of the lens.')
    created_at = models.DateTimeField(blank=True, null=True, db_comment='The date and time when the lens was created.')
    updated_at = models.DateTimeField(blank=True, null=True, db_comment='The date and time when the lens was last updated.')
    description = models.TextField(blank=True, null=True, db_comment='The description of the lens.')
    lens_status = models.TextField(blank=True, null=True, db_comment='The status of the lens.')
    lens_type = models.TextField(blank=True, null=True, db_comment='The type of the lens.')
    lens_version = models.TextField(blank=True, null=True, db_comment='The version of the lens.')
    owner = models.TextField(blank=True, null=True, db_comment='An Amazon Web Services account ID.')
    share_invitation_id = models.TextField(blank=True, null=True, db_comment='The ID assigned to the shared invitation.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_wellarchitected_lens'
        db_table_comment = 'AWS Well-Architected Lens'


class AwsWellarchitectedLensReview(models.Model):
    lens_name = models.TextField(blank=True, null=True, db_comment='The full name of the lens.')
    lens_arn = models.TextField(blank=True, null=True, db_comment='The ARN for the lens.')
    lens_alias = models.TextField(blank=True, null=True, db_comment='The alias of the lens.')
    workload_id = models.TextField(blank=True, null=True, db_comment='The ID assigned to the workload.')
    lens_status = models.TextField(blank=True, null=True, db_comment='The status of the lens.')
    lens_version = models.TextField(blank=True, null=True, db_comment='The version of the lens.')
    milestone_number = models.BigIntegerField(blank=True, null=True, db_comment='The milestone number. A workload can have a maximum of 100 milestones.')
    notes = models.TextField(blank=True, null=True, db_comment='The notes associated with the workload.')
    updated_at = models.DateTimeField(blank=True, null=True, db_comment='The date and time of the last update.')
    pillar_review_summaries = models.JSONField(blank=True, null=True, db_comment='A map from risk names to the count of how questions have that rating.')
    risk_counts = models.JSONField(blank=True, null=True, db_comment='A map from risk names to the count of how questions have that rating.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_wellarchitected_lens_review'
        db_table_comment = 'AWS Well-Architected Lens Review'


class AwsWellarchitectedLensReviewImprovement(models.Model):
    lens_alias = models.TextField(blank=True, null=True, db_comment='The alias of the lens. For Amazon Web Services official lenses, this is either the lens alias, such as serverless, or the lens ARN, such as arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens. Each lens is identified by its LensSummary$LensAlias.')
    lens_arn = models.TextField(blank=True, null=True, db_comment='The ARN for the lens.')
    workload_id = models.TextField(blank=True, null=True, db_comment='The ID assigned to the workload.')
    milestone_number = models.BigIntegerField(blank=True, null=True, db_comment='The milestone number. A workload can have a maximum of 100 milestones.')
    improvement_plan_url = models.TextField(blank=True, null=True, db_comment='The improvement plan URL for a question. This value is only available if the question has been answered.')
    pillar_id = models.TextField(blank=True, null=True, db_comment='The ID used to identify a pillar, for example, security. A pillar is identified by its PillarReviewSummary$PillarId.')
    question_id = models.TextField(blank=True, null=True, db_comment='The ID of the question.')
    question_title = models.TextField(blank=True, null=True, db_comment='The title of the question.')
    risk = models.TextField(blank=True, null=True, db_comment='The risk for a given workload, lens review, pillar, or question.')
    improvement_plans = models.JSONField(blank=True, null=True, db_comment='The improvement plan details.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_wellarchitected_lens_review_improvement'
        db_table_comment = 'AWS Well-Architected Lens Review Improvement'


class AwsWellarchitectedLensReviewReport(models.Model):
    lens_alias = models.TextField(blank=True, null=True, db_comment='The alias of the lens. For Amazon Web Services official lenses, this is either the lens alias, such as serverless, or the lens ARN, such as arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens. Each lens is identified by its LensSummary$LensAlias.')
    lens_arn = models.TextField(blank=True, null=True, db_comment='The ARN for the lens.')
    workload_id = models.TextField(blank=True, null=True, db_comment='The ID assigned to the workload.')
    milestone_number = models.BigIntegerField(blank=True, null=True, db_comment='The milestone number. A workload can have a maximum of 100 milestones.')
    base64_string = models.TextField(blank=True, null=True, db_comment='The Base64-encoded string representation of a lens review report. This data can be used to create a PDF file.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_wellarchitected_lens_review_report'
        db_table_comment = 'AWS Well-Architected Lens Review Report'
# Unable to inspect table 'aws_wellarchitected_lens_share'
# The error was: rpc error: code = Unknown desc = aws: interface conversion: interface {} is aws.LensInfo, not types.LensSummary


class AwsWellarchitectedMilestone(models.Model):
    milestone_name = models.TextField(blank=True, null=True, db_comment='The name of the milestone in a workload. Milestone names must be unique within a workload.')
    milestone_number = models.BigIntegerField(blank=True, null=True, db_comment='The milestone number. A workload can have a maximum of 100 milestones.')
    recorded_at = models.DateTimeField(blank=True, null=True, db_comment='The date and time recorded.')
    workload_id = models.TextField(blank=True, null=True, db_comment='The ID assigned to the workload.')
    workload = models.JSONField(blank=True, null=True, db_comment='A workload return object.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_wellarchitected_milestone'
        db_table_comment = 'AWS Well-Architected Milestone'


class AwsWellarchitectedNotification(models.Model):
    current_lens_version = models.TextField(blank=True, null=True, db_comment='The current version of the lens.')
    latest_lens_version = models.TextField(blank=True, null=True, db_comment='The latest version of the lens.')
    lens_alias = models.TextField(blank=True, null=True, db_comment='The alias of the lens.')
    lens_arn = models.TextField(blank=True, null=True, db_comment='The ARN of the lens.')
    type = models.TextField(blank=True, null=True, db_comment='The type of notification.')
    workload_id = models.TextField(blank=True, null=True, db_comment='The ID assigned to the workload.')
    workload_name = models.TextField(blank=True, null=True, db_comment='The name of the workload.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_wellarchitected_notification'
        db_table_comment = 'AWS Well-Architected Notification'


class AwsWellarchitectedShareInvitation(models.Model):
    lens_arn = models.TextField(blank=True, null=True, db_comment='The ARN for the lens.')
    lens_name = models.TextField(blank=True, null=True, db_comment='The full name of the lens.')
    permission_type = models.TextField(blank=True, null=True, db_comment='Permission granted on a workload share.')
    share_invitation_id = models.TextField(blank=True, null=True, db_comment='The ID assigned to the share invitation.')
    share_resource_type = models.TextField(blank=True, null=True, db_comment='The resource type of the share invitation.')
    shared_by = models.TextField(blank=True, null=True, db_comment='An Amazon Web Services account ID.')
    shared_with = models.TextField(blank=True, null=True, db_comment='The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload is shared.')
    workload_name = models.TextField(blank=True, null=True, db_comment='The name of the workload.')
    workload_id = models.TextField(blank=True, null=True, db_comment='The ID assigned to the workload.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_wellarchitected_share_invitation'
        db_table_comment = 'AWS Well-Architected Share Invitation'


class AwsWellarchitectedWorkload(models.Model):
    workload_name = models.TextField(blank=True, null=True, db_comment='The name of the workload.')
    workload_arn = models.TextField(blank=True, null=True, db_comment='The ARN for the workload.')
    workload_id = models.TextField(blank=True, null=True, db_comment='The ID assigned to the workload.')
    architectural_design = models.TextField(blank=True, null=True, db_comment='The URL of the architectural design for the workload.')
    description = models.TextField(blank=True, null=True, db_comment='The description for the workload.')
    environment = models.TextField(blank=True, null=True, db_comment='The environment for the workload.')
    improvement_status = models.TextField(blank=True, null=True, db_comment='The improvement status for a workload.')
    industry = models.TextField(blank=True, null=True, db_comment='The industry for the workload.')
    industry_type = models.TextField(blank=True, null=True, db_comment='The industry type for the workload.')
    is_review_owner_update_acknowledged = models.BooleanField(blank=True, null=True, db_comment='Flag indicating whether the workload owner has acknowledged that the review owner field is required.')
    notes = models.TextField(blank=True, null=True, db_comment='The notes associated with the workload.')
    owner = models.TextField(blank=True, null=True, db_comment='An AWS account ID.')
    review_owner = models.TextField(blank=True, null=True, db_comment='The review owner of the workload.')
    review_restriction_date = models.DateTimeField(blank=True, null=True, db_comment='The date and time recorded.')
    share_invitation_id = models.TextField(blank=True, null=True, db_comment='The ID assigned to the share invitation.')
    updated_at = models.DateTimeField(blank=True, null=True, db_comment='The date and time recorded.')
    account_ids = models.JSONField(blank=True, null=True, db_comment='The list of AWS account IDs associated with the workload.')
    aws_regions = models.JSONField(blank=True, null=True, db_comment='The list of AWS Regions associated with the workload, for example, us-east-2, or ca-central-1.')
    lenses = models.JSONField(blank=True, null=True, db_comment='The list of lenses associated with the workload. Each lens is identified by its LensSummary$LensAlias.')
    non_aws_regions = models.JSONField(blank=True, null=True, db_comment='The list of non-AWS Regions associated with the workload.')
    pillar_priorities = models.JSONField(blank=True, null=True, db_comment='The priorities of the pillars, which are used to order items in the improvement plan. ')
    risk_counts = models.JSONField(blank=True, null=True, db_comment='A map from risk names to the count of how questions have that rating.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_wellarchitected_workload'
        db_table_comment = 'AWS Well-Architected Workload'


class AwsWellarchitectedWorkloadShare(models.Model):
    workload_id = models.TextField(blank=True, null=True, db_comment='The ID assigned to the workload.')
    permission_type = models.TextField(blank=True, null=True, db_comment='Permission granted on a workload share.')
    share_id = models.TextField(blank=True, null=True, db_comment='The ID associated with the workload share.')
    shared_with = models.TextField(blank=True, null=True, db_comment='The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload is shared.')
    status = models.TextField(blank=True, null=True, db_comment='The status of a workload share.')
    status_message = models.TextField(blank=True, null=True, db_comment='Optional message to compliment the Status field.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_wellarchitected_workload_share'
        db_table_comment = 'AWS Well-Architected Workload Share'


class AwsWorkspacesDirectory(models.Model):
    directory_id = models.TextField(blank=True, null=True, db_comment='The directory identifier.')
    name = models.TextField(blank=True, null=True, db_comment='The name of the directory.')
    arn = models.TextField(blank=True, null=True, db_comment='The arn of the directory.')
    alias = models.TextField(blank=True, null=True, db_comment='The directory alias.')
    certificate_based_auth_properties = models.JSONField(blank=True, null=True, db_comment='The certificate-based authentication properties used to authenticate SAML 2.0 Identity Provider (IdP) user identities to Active Directory for WorkSpaces login.')
    customer_user_name = models.TextField(blank=True, null=True, db_comment='The user name for the service account.')
    directory_type = models.TextField(blank=True, null=True, db_comment='The directory type.')
    dns_ip_addresses = models.JSONField(blank=True, null=True, db_comment='The IP addresses of the DNS servers for the directory.')
    iam_role_id = models.TextField(blank=True, null=True, db_comment='The identifier of the IAM role. This is the role that allows Amazon WorkSpaces to make calls to other services, such as Amazon EC2, on your behalf.')
    ip_group_ids = models.TextField(blank=True, null=True, db_comment='The identifiers of the IP access control groups associated with the directory.')
    registration_code = models.TextField(blank=True, null=True, db_comment='The registration code for the directory. This is the code that users enter in their Amazon WorkSpaces client application to connect to the directory.')
    saml_properties = models.JSONField(blank=True, null=True, db_comment='Describes the enablement status, user access URL, and relay state parameter name that are used for configuring federation with an SAML 2.0 identity provider.')
    selfservice_permissions = models.JSONField(blank=True, null=True, db_comment='The default self-service permissions for WorkSpaces in the directory.')
    state = models.TextField(blank=True, null=True, db_comment="The state of the directory's registration with Amazon WorkSpaces.")
    subnet_ids = models.JSONField(blank=True, null=True, db_comment='The identifiers of the subnets used with the directory.')
    tenancy = models.TextField(blank=True, null=True, db_comment='Specifies whether the directory is dedicated or shared.')
    workspace_access_properties = models.JSONField(blank=True, null=True, db_comment='The devices and operating systems that users can use to access WorkSpaces.')
    workspace_creation_properties = models.JSONField(blank=True, null=True, db_comment='The default creation properties for all WorkSpaces in the directory.')
    workspace_security_group_id = models.TextField(blank=True, null=True, db_comment='The identifier of the security group that is assigned to new WorkSpaces.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='The list of tags for the directory.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_workspaces_directory'
        db_table_comment = 'AWS Workspaces Directory'


class AwsWorkspacesWorkspace(models.Model):
    workspace_id = models.TextField(blank=True, null=True, db_comment='The id of the WorkSpace.')
    name = models.TextField(blank=True, null=True, db_comment='The name of the WorkSpace.')
    arn = models.TextField(blank=True, null=True, db_comment='The arn of the WorkSpace.')
    bundle_id = models.TextField(blank=True, null=True, db_comment='The identifier of the bundle used to create the WorkSpace.')
    directory_id = models.TextField(blank=True, null=True, db_comment='The identifier of the AWS Directory Service directory for the WorkSpace.')
    state = models.TextField(blank=True, null=True, db_comment='The operational state of the WorkSpace.')
    error_code = models.TextField(blank=True, null=True, db_comment='The error code that is returned if the WorkSpace cannot be created.')
    error_message = models.TextField(blank=True, null=True, db_comment='The text of the error message that is returned if the WorkSpace cannot be created.')
    ip_address = models.GenericIPAddressField(blank=True, null=True, db_comment='The IP address of the WorkSpace.')
    root_volume_encryption_enabled = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the data stored on the root volume is encrypted.')
    subnet_id = models.TextField(blank=True, null=True, db_comment='The identifier of the subnet for the WorkSpace.')
    user_name = models.TextField(blank=True, null=True, db_comment='The user for the WorkSpace.')
    user_volume_encryption_enabled = models.BooleanField(blank=True, null=True, db_comment='Indicates whether the data stored on the user volume is encrypted.')
    volume_encryption_key = models.TextField(blank=True, null=True, db_comment='The symmetric AWS KMS customer master key (CMK) used to encrypt data stored on your WorkSpace. Amazon WorkSpaces does not support asymmetric CMKs.')
    modification_states = models.JSONField(blank=True, null=True, db_comment='The modification states of the WorkSpace.')
    workspace_properties = models.JSONField(blank=True, null=True, db_comment='The properties of the WorkSpace.')
    tags_src = models.JSONField(blank=True, null=True, db_comment='The list of tags for the WorkSpace.')
    title = models.TextField(blank=True, null=True, db_comment='Title of the resource.')
    tags = models.JSONField(blank=True, null=True, db_comment='A map of tags for the resource.')
    akas = models.JSONField(blank=True, null=True, db_comment='Array of globally unique identifier strings (also known as) for the resource.')
    partition = models.TextField(blank=True, null=True, db_comment='The AWS partition in which the resource is located (aws, aws-cn, or aws-us-gov).')
    region = models.TextField(blank=True, null=True, db_comment='The AWS Region in which the resource is located.')
    account_id = models.TextField(blank=True, null=True, db_comment='The AWS Account ID in which the resource is located.')
    sp_connection_name = models.TextField(blank=True, null=True, db_comment='Steampipe connection name.')
    sp_ctx = models.JSONField(blank=True, null=True, db_comment='Steampipe context in JSON form.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'aws_workspaces_workspace'
        db_table_comment = 'AWS Workspaces'


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.SmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    id = models.BigAutoField(primary_key=True)
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class IniKeyValue(models.Model):
    path = models.TextField(blank=True, null=True, db_comment='Specifies the path of the INI file.')
    section = models.TextField(blank=True, null=True, db_comment='Specifies the name of the section.')
    key = models.TextField(blank=True, null=True, db_comment='The name of the key.')
    value = models.TextField(blank=True, null=True, db_comment='The value of corresponding key.')
    comment = models.TextField(blank=True, null=True, db_comment='The short notes used to describe the key.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form, e.g. connection_name.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'ini_key_value'
        db_table_comment = 'Table representation of an INI file.'


class IniSection(models.Model):
    path = models.TextField(blank=True, null=True, db_comment='Specifies the path of the INI file.')
    section = models.TextField(blank=True, null=True, db_comment='Specifies the name of the section.')
    comment = models.TextField(blank=True, null=True, db_comment='The short notes used to describe the key.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form, e.g. connection_name.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'ini_section'
        db_table_comment = 'Retrieves a list of sections and subsections defined in a INI file.'


class JsonFile(models.Model):
    path = models.TextField(blank=True, null=True, db_comment='Specifies the path of the JSON file.')
    content = models.JSONField(blank=True, null=True, db_comment='Specifies the file content.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form, e.g. connection_name.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'json_file'
        db_table_comment = 'Represents the JSON file content.'


class JsonKeyValue(models.Model):
    path = models.TextField(blank=True, null=True, db_comment='Specifies the path of the JSON file.')
    key_path = models.TextField(blank=True, null=True, db_comment='Specifies full path of a key in JSON file.')  # This field type is a guess.
    value = models.TextField(blank=True, null=True, db_comment='Specifies the value of the corresponding key.')
    keys = models.JSONField(blank=True, null=True, db_comment='The array representation of path of a key.')
    start_line = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the line number where the value is located.')
    start_column = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the starting column of the value.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form, e.g. connection_name.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'json_key_value'
        db_table_comment = 'List all key value pairs from given JSON file.'


class SteampipeConnection(models.Model):
    name = models.TextField(primary_key=True)
    state = models.TextField(blank=True, null=True)
    type = models.TextField(blank=True, null=True)
    connections = models.TextField(blank=True, null=True)  # This field type is a guess.
    import_schema = models.TextField(blank=True, null=True)
    error = models.TextField(blank=True, null=True)
    plugin = models.TextField(blank=True, null=True)
    plugin_instance = models.TextField(blank=True, null=True)
    schema_mode = models.TextField(blank=True, null=True)
    schema_hash = models.TextField(blank=True, null=True)
    comments_set = models.BooleanField(blank=True, null=True)
    connection_mod_time = models.DateTimeField(blank=True, null=True)
    plugin_mod_time = models.DateTimeField(blank=True, null=True)
    file_name = models.TextField(blank=True, null=True)
    start_line_number = models.IntegerField(blank=True, null=True)
    end_line_number = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'steampipe_connection'


class SteampipeConnectionState(models.Model):
    name = models.TextField(primary_key=True)
    state = models.TextField(blank=True, null=True)
    type = models.TextField(blank=True, null=True)
    connections = models.TextField(blank=True, null=True)  # This field type is a guess.
    import_schema = models.TextField(blank=True, null=True)
    error = models.TextField(blank=True, null=True)
    plugin = models.TextField(blank=True, null=True)
    plugin_instance = models.TextField(blank=True, null=True)
    schema_mode = models.TextField(blank=True, null=True)
    schema_hash = models.TextField(blank=True, null=True)
    comments_set = models.BooleanField(blank=True, null=True)
    connection_mod_time = models.DateTimeField(blank=True, null=True)
    plugin_mod_time = models.DateTimeField(blank=True, null=True)
    file_name = models.TextField(blank=True, null=True)
    start_line_number = models.IntegerField(blank=True, null=True)
    end_line_number = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'steampipe_connection_state'


class SteampipePlugin(models.Model):
    plugin_instance = models.TextField(blank=True, null=True)
    plugin = models.TextField()
    memory_max_mb = models.IntegerField(blank=True, null=True)
    limiters = models.JSONField(blank=True, null=True)
    file_name = models.TextField(blank=True, null=True)
    start_line_number = models.IntegerField(blank=True, null=True)
    end_line_number = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'steampipe_plugin'


class SteampipePluginLimiter(models.Model):
    name = models.TextField(blank=True, null=True)
    plugin = models.TextField(blank=True, null=True)
    plugin_instance = models.TextField(blank=True, null=True)
    source_type = models.TextField(blank=True, null=True)
    status = models.TextField(blank=True, null=True)
    bucket_size = models.IntegerField(blank=True, null=True)
    fill_rate = models.FloatField(blank=True, null=True)
    max_concurrency = models.IntegerField(blank=True, null=True)
    scope = models.JSONField(blank=True, null=True)
    where = models.TextField(blank=True, null=True)
    file_name = models.TextField(blank=True, null=True)
    start_line_number = models.IntegerField(blank=True, null=True)
    end_line_number = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'steampipe_plugin_limiter'


class SteampipeScanMetadata(models.Model):
    id = models.BigIntegerField(blank=True, null=False, primary_key=True)
    table = models.TextField(blank=True, null=True)
    cache_hit = models.BooleanField(blank=True, null=True)
    rows_fetched = models.BigIntegerField(blank=True, null=True)
    hydrate_calls = models.BigIntegerField(blank=True, null=True)
    start_time = models.DateTimeField(blank=True, null=True)
    duration = models.FloatField(blank=True, null=True)
    columns = models.JSONField(blank=True, null=True)
    limit = models.BigIntegerField(blank=True, null=True)
    quals = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'steampipe_scan_metadata'


class SteampipeServerSettings(models.Model):
    start_time = models.DateTimeField()
    steampipe_version = models.TextField()
    fdw_version = models.TextField()
    cache_max_ttl = models.IntegerField()
    cache_max_size_mb = models.IntegerField()
    cache_enabled = models.BooleanField()

    class Meta:
        managed = False
        db_table = 'steampipe_server_settings'
# Unable to inspect table 'steampipe_settings'
# The error was: permission denied for foreign table steampipe_settings


class YmlFile(models.Model):
    path = models.TextField(blank=True, null=True, db_comment='Specifies the path of the YML file.')
    content = models.JSONField(blank=True, null=True, db_comment='Specifies the file content in JSON format.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form, e.g. connection_name.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'yml_file'
        db_table_comment = 'Represents the YML file content into JSON format.'


class YmlKeyValue(models.Model):
    path = models.TextField(blank=True, null=True, db_comment='Specifies the path of the YML file.')
    key_path = models.TextField(blank=True, null=True, db_comment='Specifies full path of a key in YML file.')  # This field type is a guess.
    value = models.TextField(blank=True, null=True, db_comment='Specifies the value of the corresponding key.')
    keys = models.JSONField(blank=True, null=True, db_comment='The array representation of path of a key.')
    tag = models.TextField(blank=True, null=True, db_comment='Specifies the data type of the value.')
    start_line = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the line number where the value is located.')
    start_column = models.BigIntegerField(blank=True, null=True, db_comment='Specifies the starting column of the value.')
    pre_comments = models.JSONField(blank=True, null=True, db_comment='Specifies the comments added above a key.')
    head_comment = models.TextField(blank=True, null=True, db_comment='Specifies the comment in the lines preceding the node and not separated by an empty line.')
    line_comment = models.TextField(blank=True, null=True, db_comment='Specifies the comment at the end of the line where the node is in.')
    foot_comment = models.TextField(blank=True, null=True, db_comment='Specifies the comment following the node and before empty lines.')
    field_ctx = models.JSONField(db_column='_ctx', blank=True, null=True, db_comment='Steampipe context in JSON form, e.g. connection_name.')  # Field renamed because it started with '_'.

    class Meta:
        managed = False
        db_table = 'yml_key_value'
        db_table_comment = 'List all key value pairs from given YML file.'
